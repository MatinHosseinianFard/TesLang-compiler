Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> prog
Rule 1     prog -> empty
Rule 2     prog -> func prog
Rule 3     func -> DEF type iden LPAREN flist RPAREN func_choice
Rule 4     func -> DEF type iden LPAREN error RPAREN func_choice
Rule 5     func_choice -> LBRACE body RBRACE
Rule 6     func_choice -> RETURN expr SEMICOLON
Rule 7     body -> empty
Rule 8     body -> stmt body
Rule 9     body -> error body
Rule 10    stmt -> expr SEMICOLON
Rule 11    stmt -> error SEMICOLON
Rule 12    stmt -> defvar SEMICOLON
Rule 13    stmt -> IF LPAREN expr RPAREN stmt else_choice
Rule 14    stmt -> IF LPAREN error RPAREN stmt else_choice
Rule 15    else_choice -> empty
Rule 16    else_choice -> ELSE stmt
Rule 17    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 18    stmt -> WHILE LPAREN error RPAREN stmt
Rule 19    stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
Rule 20    stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
Rule 21    stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
Rule 22    stmt -> RETURN expr SEMICOLON
Rule 23    stmt -> LBRACE body RBRACE
Rule 24    stmt -> func
Rule 25    defvar -> VAR type iden defvar_choice
Rule 26    defvar -> VAR error iden defvar_choice
Rule 27    defvar_choice -> empty
Rule 28    defvar_choice -> ASSIGN expr
Rule 29    flist -> empty
Rule 30    flist -> type iden
Rule 31    flist -> type iden COMMA flist
Rule 32    clist -> empty
Rule 33    clist -> expr
Rule 34    clist -> expr COMMA clist
Rule 35    expr -> expr LBRACKET expr RBRACKET
Rule 36    expr -> expr LBRACKET error RBRACKET
Rule 37    expr -> LBRACKET clist RBRACKET
Rule 38    expr -> LBRACKET error RBRACKET
Rule 39    expr -> expr QUESTIONMARK expr COLON expr
Rule 40    expr -> expr QUESTIONMARK expr error expr
Rule 41    expr -> expr ASSIGN expr
Rule 42    expr -> expr PLUS expr
Rule 43    expr -> expr MINUS expr
Rule 44    expr -> expr TIMES expr
Rule 45    expr -> expr DIVIDE expr
Rule 46    expr -> expr MOD expr
Rule 47    expr -> expr GT expr
Rule 48    expr -> expr LT expr
Rule 49    expr -> expr EQUAL expr
Rule 50    expr -> expr GTE expr
Rule 51    expr -> expr LTE expr
Rule 52    expr -> expr NOT_EQUAL expr
Rule 53    expr -> expr OR expr
Rule 54    expr -> expr AND expr
Rule 55    expr -> NOT expr
Rule 56    expr -> PLUS expr
Rule 57    expr -> MINUS expr
Rule 58    expr -> iden
Rule 59    expr -> iden LPAREN clist RPAREN
Rule 60    expr -> iden LPAREN error RPAREN
Rule 61    expr -> num
Rule 62    expr -> str
Rule 63    type -> INT_TYPE
Rule 64    type -> VECTOR_TYPE
Rule 65    type -> STR_TYPE
Rule 66    type -> NULL_TYPE
Rule 67    iden -> IDENTIFIER
Rule 68    str -> STRING
Rule 69    num -> NUMBER
Rule 70    empty -> <empty>

Terminals, with rules where they appear

AND                  : 54
ASSIGN               : 19 20 21 28 41
COLON                : 39
COMMA                : 31 34
COMMENT              : 
DEF                  : 3 4
DIVIDE               : 45
ELSE                 : 16
EQUAL                : 49
FOR                  : 19 20 21
GT                   : 47
GTE                  : 50
IDENTIFIER           : 67
IF                   : 13 14
INT_TYPE             : 63
LBRACE               : 5 23
LBRACKET             : 35 36 37 38
LPAREN               : 3 4 13 14 17 18 19 20 21 59 60
LT                   : 48
LTE                  : 51
MINUS                : 43 57
MOD                  : 46
NOT                  : 55
NOT_EQUAL            : 52
NULL_TYPE            : 66
NUMBER               : 69
OR                   : 53
PLUS                 : 42 56
QUESTIONMARK         : 39 40
RBRACE               : 5 23
RBRACKET             : 35 36 37 38
RETURN               : 6 22
RPAREN               : 3 4 13 14 17 18 19 20 21 59 60
SEMICOLON            : 6 10 11 12 22
STRING               : 68
STR_TYPE             : 65
TIMES                : 44
TO                   : 19 20 21
VAR                  : 25 26
VECTOR_TYPE          : 64
WHILE                : 17 18
error                : 4 9 11 14 18 20 21 26 36 38 40 60

Nonterminals, with rules where they appear

body                 : 5 8 9 23
clist                : 34 37 59
defvar               : 12
defvar_choice        : 25 26
else_choice          : 13 14
empty                : 1 7 15 27 29 32
expr                 : 6 10 13 17 19 19 20 21 22 28 33 34 35 35 36 39 39 39 40 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 56 57
flist                : 3 31
func                 : 2 24
func_choice          : 3 4
iden                 : 3 4 19 20 21 25 26 30 31 58 59 60
num                  : 61
prog                 : 2 0
stmt                 : 8 13 14 16 17 18 19 20 21
str                  : 62
type                 : 3 4 25 30 31

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (70) empty -> .
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice

    $end            reduce using rule 70 (empty -> .)
    DEF             shift and go to state 4

    prog                           shift and go to state 1
    empty                          shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> empty .

    $end            reduce using rule 1 (prog -> empty .)


state 3

    (2) prog -> func . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (70) empty -> .
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice

    $end            reduce using rule 70 (empty -> .)
    DEF             shift and go to state 4

    func                           shift and go to state 3
    prog                           shift and go to state 5
    empty                          shift and go to state 2

state 4

    (3) func -> DEF . type iden LPAREN flist RPAREN func_choice
    (4) func -> DEF . type iden LPAREN error RPAREN func_choice
    (63) type -> . INT_TYPE
    (64) type -> . VECTOR_TYPE
    (65) type -> . STR_TYPE
    (66) type -> . NULL_TYPE

    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 6

state 5

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 6

    (3) func -> DEF type . iden LPAREN flist RPAREN func_choice
    (4) func -> DEF type . iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 12

    iden                           shift and go to state 11

state 7

    (63) type -> INT_TYPE .

    IDENTIFIER      reduce using rule 63 (type -> INT_TYPE .)


state 8

    (64) type -> VECTOR_TYPE .

    IDENTIFIER      reduce using rule 64 (type -> VECTOR_TYPE .)


state 9

    (65) type -> STR_TYPE .

    IDENTIFIER      reduce using rule 65 (type -> STR_TYPE .)


state 10

    (66) type -> NULL_TYPE .

    IDENTIFIER      reduce using rule 66 (type -> NULL_TYPE .)


state 11

    (3) func -> DEF type iden . LPAREN flist RPAREN func_choice
    (4) func -> DEF type iden . LPAREN error RPAREN func_choice

    LPAREN          shift and go to state 13


state 12

    (67) iden -> IDENTIFIER .

    LPAREN          reduce using rule 67 (iden -> IDENTIFIER .)
    COMMA           reduce using rule 67 (iden -> IDENTIFIER .)
    RPAREN          reduce using rule 67 (iden -> IDENTIFIER .)
    SEMICOLON       reduce using rule 67 (iden -> IDENTIFIER .)
    LBRACKET        reduce using rule 67 (iden -> IDENTIFIER .)
    QUESTIONMARK    reduce using rule 67 (iden -> IDENTIFIER .)
    ASSIGN          reduce using rule 67 (iden -> IDENTIFIER .)
    PLUS            reduce using rule 67 (iden -> IDENTIFIER .)
    MINUS           reduce using rule 67 (iden -> IDENTIFIER .)
    TIMES           reduce using rule 67 (iden -> IDENTIFIER .)
    DIVIDE          reduce using rule 67 (iden -> IDENTIFIER .)
    MOD             reduce using rule 67 (iden -> IDENTIFIER .)
    GT              reduce using rule 67 (iden -> IDENTIFIER .)
    LT              reduce using rule 67 (iden -> IDENTIFIER .)
    EQUAL           reduce using rule 67 (iden -> IDENTIFIER .)
    GTE             reduce using rule 67 (iden -> IDENTIFIER .)
    LTE             reduce using rule 67 (iden -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 67 (iden -> IDENTIFIER .)
    OR              reduce using rule 67 (iden -> IDENTIFIER .)
    AND             reduce using rule 67 (iden -> IDENTIFIER .)
    RBRACKET        reduce using rule 67 (iden -> IDENTIFIER .)
    COLON           reduce using rule 67 (iden -> IDENTIFIER .)
    error           reduce using rule 67 (iden -> IDENTIFIER .)
    TO              reduce using rule 67 (iden -> IDENTIFIER .)


state 13

    (3) func -> DEF type iden LPAREN . flist RPAREN func_choice
    (4) func -> DEF type iden LPAREN . error RPAREN func_choice
    (29) flist -> . empty
    (30) flist -> . type iden
    (31) flist -> . type iden COMMA flist
    (70) empty -> .
    (63) type -> . INT_TYPE
    (64) type -> . VECTOR_TYPE
    (65) type -> . STR_TYPE
    (66) type -> . NULL_TYPE

    error           shift and go to state 16
    RPAREN          reduce using rule 70 (empty -> .)
    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 14
    flist                          shift and go to state 15
    empty                          shift and go to state 17

state 14

    (30) flist -> type . iden
    (31) flist -> type . iden COMMA flist
    (67) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 12

    iden                           shift and go to state 18

state 15

    (3) func -> DEF type iden LPAREN flist . RPAREN func_choice

    RPAREN          shift and go to state 19


state 16

    (4) func -> DEF type iden LPAREN error . RPAREN func_choice

    RPAREN          shift and go to state 20


state 17

    (29) flist -> empty .

    RPAREN          reduce using rule 29 (flist -> empty .)


state 18

    (30) flist -> type iden .
    (31) flist -> type iden . COMMA flist

    RPAREN          reduce using rule 30 (flist -> type iden .)
    COMMA           shift and go to state 21


state 19

    (3) func -> DEF type iden LPAREN flist RPAREN . func_choice
    (5) func_choice -> . LBRACE body RBRACE
    (6) func_choice -> . RETURN expr SEMICOLON

    LBRACE          shift and go to state 23
    RETURN          shift and go to state 24

    func_choice                    shift and go to state 22

state 20

    (4) func -> DEF type iden LPAREN error RPAREN . func_choice
    (5) func_choice -> . LBRACE body RBRACE
    (6) func_choice -> . RETURN expr SEMICOLON

    LBRACE          shift and go to state 23
    RETURN          shift and go to state 24

    func_choice                    shift and go to state 25

state 21

    (31) flist -> type iden COMMA . flist
    (29) flist -> . empty
    (30) flist -> . type iden
    (31) flist -> . type iden COMMA flist
    (70) empty -> .
    (63) type -> . INT_TYPE
    (64) type -> . VECTOR_TYPE
    (65) type -> . STR_TYPE
    (66) type -> . NULL_TYPE

    RPAREN          reduce using rule 70 (empty -> .)
    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 14
    flist                          shift and go to state 26
    empty                          shift and go to state 17

state 22

    (3) func -> DEF type iden LPAREN flist RPAREN func_choice .

    DEF             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    $end            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    error           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    IF              reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    WHILE           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    FOR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    RETURN          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    LBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    LBRACKET        reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    NOT             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    PLUS            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    MINUS           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    VAR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    IDENTIFIER      reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    NUMBER          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    STRING          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    RBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    ELSE            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)


state 23

    (5) func_choice -> LBRACE . body RBRACE
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (70) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 31
    RBRACE          reduce using rule 70 (empty -> .)
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    body                           shift and go to state 28
    empty                          shift and go to state 29
    stmt                           shift and go to state 30
    expr                           shift and go to state 32
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 24

    (6) func_choice -> RETURN . expr SEMICOLON
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 49
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 25

    (4) func -> DEF type iden LPAREN error RPAREN func_choice .

    DEF             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    $end            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    error           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    IF              reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    WHILE           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    FOR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    RETURN          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    LBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    LBRACKET        reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    NOT             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    PLUS            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    MINUS           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    VAR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    IDENTIFIER      reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    NUMBER          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    STRING          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    RBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    ELSE            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)


state 26

    (31) flist -> type iden COMMA flist .

    RPAREN          reduce using rule 31 (flist -> type iden COMMA flist .)


state 27

    (23) stmt -> LBRACE . body RBRACE
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (70) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 31
    RBRACE          reduce using rule 70 (empty -> .)
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    body                           shift and go to state 50
    empty                          shift and go to state 29
    stmt                           shift and go to state 30
    expr                           shift and go to state 32
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 28

    (5) func_choice -> LBRACE body . RBRACE

    RBRACE          shift and go to state 51


state 29

    (7) body -> empty .

    RBRACE          reduce using rule 7 (body -> empty .)


state 30

    (8) body -> stmt . body
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (70) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 31
    RBRACE          reduce using rule 70 (empty -> .)
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    stmt                           shift and go to state 30
    body                           shift and go to state 52
    empty                          shift and go to state 29
    expr                           shift and go to state 32
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 31

    (9) body -> error . body
    (11) stmt -> error . SEMICOLON
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (70) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    SEMICOLON       shift and go to state 54
    error           shift and go to state 31
    RBRACE          reduce using rule 70 (empty -> .)
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    body                           shift and go to state 53
    empty                          shift and go to state 29
    stmt                           shift and go to state 30
    expr                           shift and go to state 32
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 32

    (10) stmt -> expr . SEMICOLON
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       shift and go to state 55
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 33

    (12) stmt -> defvar . SEMICOLON

    SEMICOLON       shift and go to state 72


state 34

    (13) stmt -> IF . LPAREN expr RPAREN stmt else_choice
    (14) stmt -> IF . LPAREN error RPAREN stmt else_choice

    LPAREN          shift and go to state 73


state 35

    (17) stmt -> WHILE . LPAREN expr RPAREN stmt
    (18) stmt -> WHILE . LPAREN error RPAREN stmt

    LPAREN          shift and go to state 74


state 36

    (19) stmt -> FOR . LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> FOR . LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> FOR . LPAREN iden ASSIGN expr TO error RPAREN stmt

    LPAREN          shift and go to state 75


state 37

    (58) expr -> iden .
    (59) expr -> iden . LPAREN clist RPAREN
    (60) expr -> iden . LPAREN error RPAREN

    SEMICOLON       reduce using rule 58 (expr -> iden .)
    LBRACKET        reduce using rule 58 (expr -> iden .)
    QUESTIONMARK    reduce using rule 58 (expr -> iden .)
    ASSIGN          reduce using rule 58 (expr -> iden .)
    PLUS            reduce using rule 58 (expr -> iden .)
    MINUS           reduce using rule 58 (expr -> iden .)
    TIMES           reduce using rule 58 (expr -> iden .)
    DIVIDE          reduce using rule 58 (expr -> iden .)
    MOD             reduce using rule 58 (expr -> iden .)
    GT              reduce using rule 58 (expr -> iden .)
    LT              reduce using rule 58 (expr -> iden .)
    EQUAL           reduce using rule 58 (expr -> iden .)
    GTE             reduce using rule 58 (expr -> iden .)
    LTE             reduce using rule 58 (expr -> iden .)
    NOT_EQUAL       reduce using rule 58 (expr -> iden .)
    OR              reduce using rule 58 (expr -> iden .)
    AND             reduce using rule 58 (expr -> iden .)
    COMMA           reduce using rule 58 (expr -> iden .)
    RBRACKET        reduce using rule 58 (expr -> iden .)
    COLON           reduce using rule 58 (expr -> iden .)
    error           reduce using rule 58 (expr -> iden .)
    RPAREN          reduce using rule 58 (expr -> iden .)
    TO              reduce using rule 58 (expr -> iden .)
    LPAREN          shift and go to state 76


state 38

    (22) stmt -> RETURN . expr SEMICOLON
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 77
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 39

    (24) stmt -> func .

    error           reduce using rule 24 (stmt -> func .)
    IF              reduce using rule 24 (stmt -> func .)
    WHILE           reduce using rule 24 (stmt -> func .)
    FOR             reduce using rule 24 (stmt -> func .)
    RETURN          reduce using rule 24 (stmt -> func .)
    LBRACE          reduce using rule 24 (stmt -> func .)
    LBRACKET        reduce using rule 24 (stmt -> func .)
    NOT             reduce using rule 24 (stmt -> func .)
    PLUS            reduce using rule 24 (stmt -> func .)
    MINUS           reduce using rule 24 (stmt -> func .)
    VAR             reduce using rule 24 (stmt -> func .)
    DEF             reduce using rule 24 (stmt -> func .)
    IDENTIFIER      reduce using rule 24 (stmt -> func .)
    NUMBER          reduce using rule 24 (stmt -> func .)
    STRING          reduce using rule 24 (stmt -> func .)
    RBRACE          reduce using rule 24 (stmt -> func .)
    ELSE            reduce using rule 24 (stmt -> func .)


state 40

    (37) expr -> LBRACKET . clist RBRACKET
    (38) expr -> LBRACKET . error RBRACKET
    (32) clist -> . empty
    (33) clist -> . expr
    (34) clist -> . expr COMMA clist
    (70) empty -> .
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 79
    RBRACKET        reduce using rule 70 (empty -> .)
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    clist                          shift and go to state 78
    empty                          shift and go to state 80
    expr                           shift and go to state 81
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 41

    (56) expr -> PLUS . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 82
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 42

    (57) expr -> MINUS . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 83
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 43

    (55) expr -> NOT . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 84
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 44

    (61) expr -> num .

    SEMICOLON       reduce using rule 61 (expr -> num .)
    LBRACKET        reduce using rule 61 (expr -> num .)
    QUESTIONMARK    reduce using rule 61 (expr -> num .)
    ASSIGN          reduce using rule 61 (expr -> num .)
    PLUS            reduce using rule 61 (expr -> num .)
    MINUS           reduce using rule 61 (expr -> num .)
    TIMES           reduce using rule 61 (expr -> num .)
    DIVIDE          reduce using rule 61 (expr -> num .)
    MOD             reduce using rule 61 (expr -> num .)
    GT              reduce using rule 61 (expr -> num .)
    LT              reduce using rule 61 (expr -> num .)
    EQUAL           reduce using rule 61 (expr -> num .)
    GTE             reduce using rule 61 (expr -> num .)
    LTE             reduce using rule 61 (expr -> num .)
    NOT_EQUAL       reduce using rule 61 (expr -> num .)
    OR              reduce using rule 61 (expr -> num .)
    AND             reduce using rule 61 (expr -> num .)
    COMMA           reduce using rule 61 (expr -> num .)
    RBRACKET        reduce using rule 61 (expr -> num .)
    COLON           reduce using rule 61 (expr -> num .)
    error           reduce using rule 61 (expr -> num .)
    RPAREN          reduce using rule 61 (expr -> num .)
    TO              reduce using rule 61 (expr -> num .)


state 45

    (62) expr -> str .

    SEMICOLON       reduce using rule 62 (expr -> str .)
    LBRACKET        reduce using rule 62 (expr -> str .)
    QUESTIONMARK    reduce using rule 62 (expr -> str .)
    ASSIGN          reduce using rule 62 (expr -> str .)
    PLUS            reduce using rule 62 (expr -> str .)
    MINUS           reduce using rule 62 (expr -> str .)
    TIMES           reduce using rule 62 (expr -> str .)
    DIVIDE          reduce using rule 62 (expr -> str .)
    MOD             reduce using rule 62 (expr -> str .)
    GT              reduce using rule 62 (expr -> str .)
    LT              reduce using rule 62 (expr -> str .)
    EQUAL           reduce using rule 62 (expr -> str .)
    GTE             reduce using rule 62 (expr -> str .)
    LTE             reduce using rule 62 (expr -> str .)
    NOT_EQUAL       reduce using rule 62 (expr -> str .)
    OR              reduce using rule 62 (expr -> str .)
    AND             reduce using rule 62 (expr -> str .)
    COMMA           reduce using rule 62 (expr -> str .)
    RBRACKET        reduce using rule 62 (expr -> str .)
    COLON           reduce using rule 62 (expr -> str .)
    error           reduce using rule 62 (expr -> str .)
    RPAREN          reduce using rule 62 (expr -> str .)
    TO              reduce using rule 62 (expr -> str .)


state 46

    (25) defvar -> VAR . type iden defvar_choice
    (26) defvar -> VAR . error iden defvar_choice
    (63) type -> . INT_TYPE
    (64) type -> . VECTOR_TYPE
    (65) type -> . STR_TYPE
    (66) type -> . NULL_TYPE

    error           shift and go to state 86
    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 85

state 47

    (69) num -> NUMBER .

    SEMICOLON       reduce using rule 69 (num -> NUMBER .)
    LBRACKET        reduce using rule 69 (num -> NUMBER .)
    QUESTIONMARK    reduce using rule 69 (num -> NUMBER .)
    ASSIGN          reduce using rule 69 (num -> NUMBER .)
    PLUS            reduce using rule 69 (num -> NUMBER .)
    MINUS           reduce using rule 69 (num -> NUMBER .)
    TIMES           reduce using rule 69 (num -> NUMBER .)
    DIVIDE          reduce using rule 69 (num -> NUMBER .)
    MOD             reduce using rule 69 (num -> NUMBER .)
    GT              reduce using rule 69 (num -> NUMBER .)
    LT              reduce using rule 69 (num -> NUMBER .)
    EQUAL           reduce using rule 69 (num -> NUMBER .)
    GTE             reduce using rule 69 (num -> NUMBER .)
    LTE             reduce using rule 69 (num -> NUMBER .)
    NOT_EQUAL       reduce using rule 69 (num -> NUMBER .)
    OR              reduce using rule 69 (num -> NUMBER .)
    AND             reduce using rule 69 (num -> NUMBER .)
    COMMA           reduce using rule 69 (num -> NUMBER .)
    RBRACKET        reduce using rule 69 (num -> NUMBER .)
    COLON           reduce using rule 69 (num -> NUMBER .)
    error           reduce using rule 69 (num -> NUMBER .)
    RPAREN          reduce using rule 69 (num -> NUMBER .)
    TO              reduce using rule 69 (num -> NUMBER .)


state 48

    (68) str -> STRING .

    SEMICOLON       reduce using rule 68 (str -> STRING .)
    LBRACKET        reduce using rule 68 (str -> STRING .)
    QUESTIONMARK    reduce using rule 68 (str -> STRING .)
    ASSIGN          reduce using rule 68 (str -> STRING .)
    PLUS            reduce using rule 68 (str -> STRING .)
    MINUS           reduce using rule 68 (str -> STRING .)
    TIMES           reduce using rule 68 (str -> STRING .)
    DIVIDE          reduce using rule 68 (str -> STRING .)
    MOD             reduce using rule 68 (str -> STRING .)
    GT              reduce using rule 68 (str -> STRING .)
    LT              reduce using rule 68 (str -> STRING .)
    EQUAL           reduce using rule 68 (str -> STRING .)
    GTE             reduce using rule 68 (str -> STRING .)
    LTE             reduce using rule 68 (str -> STRING .)
    NOT_EQUAL       reduce using rule 68 (str -> STRING .)
    OR              reduce using rule 68 (str -> STRING .)
    AND             reduce using rule 68 (str -> STRING .)
    COMMA           reduce using rule 68 (str -> STRING .)
    RBRACKET        reduce using rule 68 (str -> STRING .)
    COLON           reduce using rule 68 (str -> STRING .)
    error           reduce using rule 68 (str -> STRING .)
    RPAREN          reduce using rule 68 (str -> STRING .)
    TO              reduce using rule 68 (str -> STRING .)


state 49

    (6) func_choice -> RETURN expr . SEMICOLON
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       shift and go to state 87
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 50

    (23) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 88


state 51

    (5) func_choice -> LBRACE body RBRACE .

    DEF             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    $end            reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    error           reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    IF              reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    WHILE           reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    FOR             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    RETURN          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    LBRACKET        reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    NOT             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    PLUS            reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    MINUS           reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    VAR             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    IDENTIFIER      reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    NUMBER          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    STRING          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    ELSE            reduce using rule 5 (func_choice -> LBRACE body RBRACE .)


state 52

    (8) body -> stmt body .

    RBRACE          reduce using rule 8 (body -> stmt body .)


state 53

    (9) body -> error body .

    RBRACE          reduce using rule 9 (body -> error body .)


state 54

    (11) stmt -> error SEMICOLON .

    error           reduce using rule 11 (stmt -> error SEMICOLON .)
    IF              reduce using rule 11 (stmt -> error SEMICOLON .)
    WHILE           reduce using rule 11 (stmt -> error SEMICOLON .)
    FOR             reduce using rule 11 (stmt -> error SEMICOLON .)
    RETURN          reduce using rule 11 (stmt -> error SEMICOLON .)
    LBRACE          reduce using rule 11 (stmt -> error SEMICOLON .)
    LBRACKET        reduce using rule 11 (stmt -> error SEMICOLON .)
    NOT             reduce using rule 11 (stmt -> error SEMICOLON .)
    PLUS            reduce using rule 11 (stmt -> error SEMICOLON .)
    MINUS           reduce using rule 11 (stmt -> error SEMICOLON .)
    VAR             reduce using rule 11 (stmt -> error SEMICOLON .)
    DEF             reduce using rule 11 (stmt -> error SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (stmt -> error SEMICOLON .)
    NUMBER          reduce using rule 11 (stmt -> error SEMICOLON .)
    STRING          reduce using rule 11 (stmt -> error SEMICOLON .)
    RBRACE          reduce using rule 11 (stmt -> error SEMICOLON .)
    ELSE            reduce using rule 11 (stmt -> error SEMICOLON .)


state 55

    (10) stmt -> expr SEMICOLON .

    error           reduce using rule 10 (stmt -> expr SEMICOLON .)
    IF              reduce using rule 10 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 10 (stmt -> expr SEMICOLON .)
    FOR             reduce using rule 10 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 10 (stmt -> expr SEMICOLON .)
    LBRACE          reduce using rule 10 (stmt -> expr SEMICOLON .)
    LBRACKET        reduce using rule 10 (stmt -> expr SEMICOLON .)
    NOT             reduce using rule 10 (stmt -> expr SEMICOLON .)
    PLUS            reduce using rule 10 (stmt -> expr SEMICOLON .)
    MINUS           reduce using rule 10 (stmt -> expr SEMICOLON .)
    VAR             reduce using rule 10 (stmt -> expr SEMICOLON .)
    DEF             reduce using rule 10 (stmt -> expr SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 10 (stmt -> expr SEMICOLON .)
    STRING          reduce using rule 10 (stmt -> expr SEMICOLON .)
    RBRACE          reduce using rule 10 (stmt -> expr SEMICOLON .)
    ELSE            reduce using rule 10 (stmt -> expr SEMICOLON .)


state 56

    (35) expr -> expr LBRACKET . expr RBRACKET
    (36) expr -> expr LBRACKET . error RBRACKET
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 90
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 89
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 57

    (39) expr -> expr QUESTIONMARK . expr COLON expr
    (40) expr -> expr QUESTIONMARK . expr error expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 91
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 58

    (41) expr -> expr ASSIGN . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 92
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 59

    (42) expr -> expr PLUS . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 93
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 60

    (43) expr -> expr MINUS . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 94
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 61

    (44) expr -> expr TIMES . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 95
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 62

    (45) expr -> expr DIVIDE . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 96
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 63

    (46) expr -> expr MOD . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 97
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 64

    (47) expr -> expr GT . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 98
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 65

    (48) expr -> expr LT . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 99
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 66

    (49) expr -> expr EQUAL . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 100
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 67

    (50) expr -> expr GTE . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 101
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 68

    (51) expr -> expr LTE . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 102
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 69

    (52) expr -> expr NOT_EQUAL . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 103
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 70

    (53) expr -> expr OR . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 104
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 71

    (54) expr -> expr AND . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 105
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 72

    (12) stmt -> defvar SEMICOLON .

    error           reduce using rule 12 (stmt -> defvar SEMICOLON .)
    IF              reduce using rule 12 (stmt -> defvar SEMICOLON .)
    WHILE           reduce using rule 12 (stmt -> defvar SEMICOLON .)
    FOR             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    RETURN          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    LBRACE          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    LBRACKET        reduce using rule 12 (stmt -> defvar SEMICOLON .)
    NOT             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    PLUS            reduce using rule 12 (stmt -> defvar SEMICOLON .)
    MINUS           reduce using rule 12 (stmt -> defvar SEMICOLON .)
    VAR             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    DEF             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (stmt -> defvar SEMICOLON .)
    NUMBER          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    STRING          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    RBRACE          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    ELSE            reduce using rule 12 (stmt -> defvar SEMICOLON .)


state 73

    (13) stmt -> IF LPAREN . expr RPAREN stmt else_choice
    (14) stmt -> IF LPAREN . error RPAREN stmt else_choice
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 107
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 106
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 74

    (17) stmt -> WHILE LPAREN . expr RPAREN stmt
    (18) stmt -> WHILE LPAREN . error RPAREN stmt
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 109
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 108
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 75

    (19) stmt -> FOR LPAREN . iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> FOR LPAREN . iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN . iden ASSIGN expr TO error RPAREN stmt
    (67) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 12

    iden                           shift and go to state 110

state 76

    (59) expr -> iden LPAREN . clist RPAREN
    (60) expr -> iden LPAREN . error RPAREN
    (32) clist -> . empty
    (33) clist -> . expr
    (34) clist -> . expr COMMA clist
    (70) empty -> .
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 112
    RPAREN          reduce using rule 70 (empty -> .)
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    iden                           shift and go to state 37
    clist                          shift and go to state 111
    empty                          shift and go to state 80
    expr                           shift and go to state 81
    num                            shift and go to state 44
    str                            shift and go to state 45

state 77

    (22) stmt -> RETURN expr . SEMICOLON
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       shift and go to state 113
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 78

    (37) expr -> LBRACKET clist . RBRACKET

    RBRACKET        shift and go to state 114


state 79

    (38) expr -> LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 115


state 80

    (32) clist -> empty .

    RBRACKET        reduce using rule 32 (clist -> empty .)
    RPAREN          reduce using rule 32 (clist -> empty .)


state 81

    (33) clist -> expr .
    (34) clist -> expr . COMMA clist
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    RBRACKET        reduce using rule 33 (clist -> expr .)
    RPAREN          reduce using rule 33 (clist -> expr .)
    COMMA           shift and go to state 116
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 82

    (56) expr -> PLUS expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 56 (expr -> PLUS expr .)
    QUESTIONMARK    reduce using rule 56 (expr -> PLUS expr .)
    ASSIGN          reduce using rule 56 (expr -> PLUS expr .)
    PLUS            reduce using rule 56 (expr -> PLUS expr .)
    MINUS           reduce using rule 56 (expr -> PLUS expr .)
    GT              reduce using rule 56 (expr -> PLUS expr .)
    LT              reduce using rule 56 (expr -> PLUS expr .)
    EQUAL           reduce using rule 56 (expr -> PLUS expr .)
    GTE             reduce using rule 56 (expr -> PLUS expr .)
    LTE             reduce using rule 56 (expr -> PLUS expr .)
    NOT_EQUAL       reduce using rule 56 (expr -> PLUS expr .)
    OR              reduce using rule 56 (expr -> PLUS expr .)
    AND             reduce using rule 56 (expr -> PLUS expr .)
    COMMA           reduce using rule 56 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 56 (expr -> PLUS expr .)
    COLON           reduce using rule 56 (expr -> PLUS expr .)
    error           reduce using rule 56 (expr -> PLUS expr .)
    RPAREN          reduce using rule 56 (expr -> PLUS expr .)
    TO              reduce using rule 56 (expr -> PLUS expr .)
    LBRACKET        shift and go to state 56
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 56 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 56 (expr -> PLUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 83

    (57) expr -> MINUS expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 57 (expr -> MINUS expr .)
    QUESTIONMARK    reduce using rule 57 (expr -> MINUS expr .)
    ASSIGN          reduce using rule 57 (expr -> MINUS expr .)
    PLUS            reduce using rule 57 (expr -> MINUS expr .)
    MINUS           reduce using rule 57 (expr -> MINUS expr .)
    GT              reduce using rule 57 (expr -> MINUS expr .)
    LT              reduce using rule 57 (expr -> MINUS expr .)
    EQUAL           reduce using rule 57 (expr -> MINUS expr .)
    GTE             reduce using rule 57 (expr -> MINUS expr .)
    LTE             reduce using rule 57 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 57 (expr -> MINUS expr .)
    OR              reduce using rule 57 (expr -> MINUS expr .)
    AND             reduce using rule 57 (expr -> MINUS expr .)
    COMMA           reduce using rule 57 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 57 (expr -> MINUS expr .)
    COLON           reduce using rule 57 (expr -> MINUS expr .)
    error           reduce using rule 57 (expr -> MINUS expr .)
    RPAREN          reduce using rule 57 (expr -> MINUS expr .)
    TO              reduce using rule 57 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 56
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 57 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 57 (expr -> MINUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 84

    (55) expr -> NOT expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 55 (expr -> NOT expr .)
    GT              reduce using rule 55 (expr -> NOT expr .)
    LT              reduce using rule 55 (expr -> NOT expr .)
    EQUAL           reduce using rule 55 (expr -> NOT expr .)
    GTE             reduce using rule 55 (expr -> NOT expr .)
    LTE             reduce using rule 55 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 55 (expr -> NOT expr .)
    OR              reduce using rule 55 (expr -> NOT expr .)
    AND             reduce using rule 55 (expr -> NOT expr .)
    COMMA           reduce using rule 55 (expr -> NOT expr .)
    RBRACKET        reduce using rule 55 (expr -> NOT expr .)
    COLON           reduce using rule 55 (expr -> NOT expr .)
    error           reduce using rule 55 (expr -> NOT expr .)
    RPAREN          reduce using rule 55 (expr -> NOT expr .)
    TO              reduce using rule 55 (expr -> NOT expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 55 (expr -> NOT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 55 (expr -> NOT expr .) ]
  ! ASSIGN          [ reduce using rule 55 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 55 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 55 (expr -> NOT expr .) ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 85

    (25) defvar -> VAR type . iden defvar_choice
    (67) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 12

    iden                           shift and go to state 117

state 86

    (26) defvar -> VAR error . iden defvar_choice
    (67) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 12

    iden                           shift and go to state 118

state 87

    (6) func_choice -> RETURN expr SEMICOLON .

    DEF             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    $end            reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    error           reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    IF              reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    LBRACKET        reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    NOT             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    VAR             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)


state 88

    (23) stmt -> LBRACE body RBRACE .

    error           reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    IF              reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    WHILE           reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    LBRACKET        reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    PLUS            reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    MINUS           reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    VAR             reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    DEF             reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    IDENTIFIER      reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    NUMBER          reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    STRING          reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 23 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 23 (stmt -> LBRACE body RBRACE .)


state 89

    (35) expr -> expr LBRACKET expr . RBRACKET
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    RBRACKET        shift and go to state 119
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 90

    (36) expr -> expr LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 120


state 91

    (39) expr -> expr QUESTIONMARK expr . COLON expr
    (40) expr -> expr QUESTIONMARK expr . error expr
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    COLON           shift and go to state 121
    error           shift and go to state 122
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 92

    (41) expr -> expr ASSIGN expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 41 (expr -> expr ASSIGN expr .)
    QUESTIONMARK    reduce using rule 41 (expr -> expr ASSIGN expr .)
    ASSIGN          reduce using rule 41 (expr -> expr ASSIGN expr .)
    GT              reduce using rule 41 (expr -> expr ASSIGN expr .)
    LT              reduce using rule 41 (expr -> expr ASSIGN expr .)
    EQUAL           reduce using rule 41 (expr -> expr ASSIGN expr .)
    GTE             reduce using rule 41 (expr -> expr ASSIGN expr .)
    LTE             reduce using rule 41 (expr -> expr ASSIGN expr .)
    NOT_EQUAL       reduce using rule 41 (expr -> expr ASSIGN expr .)
    OR              reduce using rule 41 (expr -> expr ASSIGN expr .)
    AND             reduce using rule 41 (expr -> expr ASSIGN expr .)
    COMMA           reduce using rule 41 (expr -> expr ASSIGN expr .)
    RBRACKET        reduce using rule 41 (expr -> expr ASSIGN expr .)
    COLON           reduce using rule 41 (expr -> expr ASSIGN expr .)
    error           reduce using rule 41 (expr -> expr ASSIGN expr .)
    RPAREN          reduce using rule 41 (expr -> expr ASSIGN expr .)
    TO              reduce using rule 41 (expr -> expr ASSIGN expr .)
    LBRACKET        shift and go to state 56
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 41 (expr -> expr ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 41 (expr -> expr ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> expr ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expr -> expr ASSIGN expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr ASSIGN expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 93

    (42) expr -> expr PLUS expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 42 (expr -> expr PLUS expr .)
    QUESTIONMARK    reduce using rule 42 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 42 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 42 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 42 (expr -> expr PLUS expr .)
    GT              reduce using rule 42 (expr -> expr PLUS expr .)
    LT              reduce using rule 42 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 42 (expr -> expr PLUS expr .)
    GTE             reduce using rule 42 (expr -> expr PLUS expr .)
    LTE             reduce using rule 42 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 42 (expr -> expr PLUS expr .)
    OR              reduce using rule 42 (expr -> expr PLUS expr .)
    AND             reduce using rule 42 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 42 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 42 (expr -> expr PLUS expr .)
    COLON           reduce using rule 42 (expr -> expr PLUS expr .)
    error           reduce using rule 42 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 42 (expr -> expr PLUS expr .)
    TO              reduce using rule 42 (expr -> expr PLUS expr .)
    LBRACKET        shift and go to state 56
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 42 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr PLUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 94

    (43) expr -> expr MINUS expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 43 (expr -> expr MINUS expr .)
    QUESTIONMARK    reduce using rule 43 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 43 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 43 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 43 (expr -> expr MINUS expr .)
    GT              reduce using rule 43 (expr -> expr MINUS expr .)
    LT              reduce using rule 43 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 43 (expr -> expr MINUS expr .)
    GTE             reduce using rule 43 (expr -> expr MINUS expr .)
    LTE             reduce using rule 43 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 43 (expr -> expr MINUS expr .)
    OR              reduce using rule 43 (expr -> expr MINUS expr .)
    AND             reduce using rule 43 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 43 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 43 (expr -> expr MINUS expr .)
    COLON           reduce using rule 43 (expr -> expr MINUS expr .)
    error           reduce using rule 43 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 43 (expr -> expr MINUS expr .)
    TO              reduce using rule 43 (expr -> expr MINUS expr .)
    LBRACKET        shift and go to state 56
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 43 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr MINUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 95

    (44) expr -> expr TIMES expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 44 (expr -> expr TIMES expr .)
    QUESTIONMARK    reduce using rule 44 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 44 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 44 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 44 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 44 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 44 (expr -> expr TIMES expr .)
    MOD             reduce using rule 44 (expr -> expr TIMES expr .)
    GT              reduce using rule 44 (expr -> expr TIMES expr .)
    LT              reduce using rule 44 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 44 (expr -> expr TIMES expr .)
    GTE             reduce using rule 44 (expr -> expr TIMES expr .)
    LTE             reduce using rule 44 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 44 (expr -> expr TIMES expr .)
    OR              reduce using rule 44 (expr -> expr TIMES expr .)
    AND             reduce using rule 44 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 44 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 44 (expr -> expr TIMES expr .)
    COLON           reduce using rule 44 (expr -> expr TIMES expr .)
    error           reduce using rule 44 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 44 (expr -> expr TIMES expr .)
    TO              reduce using rule 44 (expr -> expr TIMES expr .)
    LBRACKET        shift and go to state 56

  ! LBRACKET        [ reduce using rule 44 (expr -> expr TIMES expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! MOD             [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 96

    (45) expr -> expr DIVIDE expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 45 (expr -> expr DIVIDE expr .)
    QUESTIONMARK    reduce using rule 45 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 45 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 45 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 45 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 45 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 45 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 45 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 45 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 45 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 45 (expr -> expr DIVIDE expr .)
    GTE             reduce using rule 45 (expr -> expr DIVIDE expr .)
    LTE             reduce using rule 45 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 45 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 45 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 45 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 45 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 45 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 45 (expr -> expr DIVIDE expr .)
    error           reduce using rule 45 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 45 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 45 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 56

  ! LBRACKET        [ reduce using rule 45 (expr -> expr DIVIDE expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! MOD             [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 97

    (46) expr -> expr MOD expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 46 (expr -> expr MOD expr .)
    QUESTIONMARK    reduce using rule 46 (expr -> expr MOD expr .)
    ASSIGN          reduce using rule 46 (expr -> expr MOD expr .)
    PLUS            reduce using rule 46 (expr -> expr MOD expr .)
    MINUS           reduce using rule 46 (expr -> expr MOD expr .)
    TIMES           reduce using rule 46 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 46 (expr -> expr MOD expr .)
    MOD             reduce using rule 46 (expr -> expr MOD expr .)
    GT              reduce using rule 46 (expr -> expr MOD expr .)
    LT              reduce using rule 46 (expr -> expr MOD expr .)
    EQUAL           reduce using rule 46 (expr -> expr MOD expr .)
    GTE             reduce using rule 46 (expr -> expr MOD expr .)
    LTE             reduce using rule 46 (expr -> expr MOD expr .)
    NOT_EQUAL       reduce using rule 46 (expr -> expr MOD expr .)
    OR              reduce using rule 46 (expr -> expr MOD expr .)
    AND             reduce using rule 46 (expr -> expr MOD expr .)
    COMMA           reduce using rule 46 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 46 (expr -> expr MOD expr .)
    COLON           reduce using rule 46 (expr -> expr MOD expr .)
    error           reduce using rule 46 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 46 (expr -> expr MOD expr .)
    TO              reduce using rule 46 (expr -> expr MOD expr .)
    LBRACKET        shift and go to state 56

  ! LBRACKET        [ reduce using rule 46 (expr -> expr MOD expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! MOD             [ shift and go to state 63 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 98

    (47) expr -> expr GT expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 47 (expr -> expr GT expr .)
    GT              reduce using rule 47 (expr -> expr GT expr .)
    LT              reduce using rule 47 (expr -> expr GT expr .)
    EQUAL           reduce using rule 47 (expr -> expr GT expr .)
    GTE             reduce using rule 47 (expr -> expr GT expr .)
    LTE             reduce using rule 47 (expr -> expr GT expr .)
    NOT_EQUAL       reduce using rule 47 (expr -> expr GT expr .)
    OR              reduce using rule 47 (expr -> expr GT expr .)
    AND             reduce using rule 47 (expr -> expr GT expr .)
    COMMA           reduce using rule 47 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 47 (expr -> expr GT expr .)
    COLON           reduce using rule 47 (expr -> expr GT expr .)
    error           reduce using rule 47 (expr -> expr GT expr .)
    RPAREN          reduce using rule 47 (expr -> expr GT expr .)
    TO              reduce using rule 47 (expr -> expr GT expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! ASSIGN          [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 47 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 99

    (48) expr -> expr LT expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 48 (expr -> expr LT expr .)
    GT              reduce using rule 48 (expr -> expr LT expr .)
    LT              reduce using rule 48 (expr -> expr LT expr .)
    EQUAL           reduce using rule 48 (expr -> expr LT expr .)
    GTE             reduce using rule 48 (expr -> expr LT expr .)
    LTE             reduce using rule 48 (expr -> expr LT expr .)
    NOT_EQUAL       reduce using rule 48 (expr -> expr LT expr .)
    OR              reduce using rule 48 (expr -> expr LT expr .)
    AND             reduce using rule 48 (expr -> expr LT expr .)
    COMMA           reduce using rule 48 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 48 (expr -> expr LT expr .)
    COLON           reduce using rule 48 (expr -> expr LT expr .)
    error           reduce using rule 48 (expr -> expr LT expr .)
    RPAREN          reduce using rule 48 (expr -> expr LT expr .)
    TO              reduce using rule 48 (expr -> expr LT expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! ASSIGN          [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 48 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 100

    (49) expr -> expr EQUAL expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 49 (expr -> expr EQUAL expr .)
    GT              reduce using rule 49 (expr -> expr EQUAL expr .)
    LT              reduce using rule 49 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 49 (expr -> expr EQUAL expr .)
    GTE             reduce using rule 49 (expr -> expr EQUAL expr .)
    LTE             reduce using rule 49 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 49 (expr -> expr EQUAL expr .)
    OR              reduce using rule 49 (expr -> expr EQUAL expr .)
    AND             reduce using rule 49 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 49 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 49 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 49 (expr -> expr EQUAL expr .)
    error           reduce using rule 49 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 49 (expr -> expr EQUAL expr .)
    TO              reduce using rule 49 (expr -> expr EQUAL expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! QUESTIONMARK    [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! ASSIGN          [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! MOD             [ reduce using rule 49 (expr -> expr EQUAL expr .) ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 101

    (50) expr -> expr GTE expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 50 (expr -> expr GTE expr .)
    GT              reduce using rule 50 (expr -> expr GTE expr .)
    LT              reduce using rule 50 (expr -> expr GTE expr .)
    EQUAL           reduce using rule 50 (expr -> expr GTE expr .)
    GTE             reduce using rule 50 (expr -> expr GTE expr .)
    LTE             reduce using rule 50 (expr -> expr GTE expr .)
    NOT_EQUAL       reduce using rule 50 (expr -> expr GTE expr .)
    OR              reduce using rule 50 (expr -> expr GTE expr .)
    AND             reduce using rule 50 (expr -> expr GTE expr .)
    COMMA           reduce using rule 50 (expr -> expr GTE expr .)
    RBRACKET        reduce using rule 50 (expr -> expr GTE expr .)
    COLON           reduce using rule 50 (expr -> expr GTE expr .)
    error           reduce using rule 50 (expr -> expr GTE expr .)
    RPAREN          reduce using rule 50 (expr -> expr GTE expr .)
    TO              reduce using rule 50 (expr -> expr GTE expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! QUESTIONMARK    [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! ASSIGN          [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! PLUS            [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! TIMES           [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! DIVIDE          [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 50 (expr -> expr GTE expr .) ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 102

    (51) expr -> expr LTE expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 51 (expr -> expr LTE expr .)
    GT              reduce using rule 51 (expr -> expr LTE expr .)
    LT              reduce using rule 51 (expr -> expr LTE expr .)
    EQUAL           reduce using rule 51 (expr -> expr LTE expr .)
    GTE             reduce using rule 51 (expr -> expr LTE expr .)
    LTE             reduce using rule 51 (expr -> expr LTE expr .)
    NOT_EQUAL       reduce using rule 51 (expr -> expr LTE expr .)
    OR              reduce using rule 51 (expr -> expr LTE expr .)
    AND             reduce using rule 51 (expr -> expr LTE expr .)
    COMMA           reduce using rule 51 (expr -> expr LTE expr .)
    RBRACKET        reduce using rule 51 (expr -> expr LTE expr .)
    COLON           reduce using rule 51 (expr -> expr LTE expr .)
    error           reduce using rule 51 (expr -> expr LTE expr .)
    RPAREN          reduce using rule 51 (expr -> expr LTE expr .)
    TO              reduce using rule 51 (expr -> expr LTE expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! QUESTIONMARK    [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! ASSIGN          [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! PLUS            [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! TIMES           [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 51 (expr -> expr LTE expr .) ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 103

    (52) expr -> expr NOT_EQUAL expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    GT              reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    LT              reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    GTE             reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    LTE             reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    COMMA           reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    error           reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    TO              reduce using rule 52 (expr -> expr NOT_EQUAL expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! QUESTIONMARK    [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! ASSIGN          [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 52 (expr -> expr NOT_EQUAL expr .) ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 104

    (53) expr -> expr OR expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 53 (expr -> expr OR expr .)
    OR              reduce using rule 53 (expr -> expr OR expr .)
    AND             reduce using rule 53 (expr -> expr OR expr .)
    COMMA           reduce using rule 53 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 53 (expr -> expr OR expr .)
    COLON           reduce using rule 53 (expr -> expr OR expr .)
    error           reduce using rule 53 (expr -> expr OR expr .)
    RPAREN          reduce using rule 53 (expr -> expr OR expr .)
    TO              reduce using rule 53 (expr -> expr OR expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69

  ! LBRACKET        [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! QUESTIONMARK    [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! ASSIGN          [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! GTE             [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! LTE             [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 53 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 105

    (54) expr -> expr AND expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 54 (expr -> expr AND expr .)
    OR              reduce using rule 54 (expr -> expr AND expr .)
    AND             reduce using rule 54 (expr -> expr AND expr .)
    COMMA           reduce using rule 54 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 54 (expr -> expr AND expr .)
    COLON           reduce using rule 54 (expr -> expr AND expr .)
    error           reduce using rule 54 (expr -> expr AND expr .)
    RPAREN          reduce using rule 54 (expr -> expr AND expr .)
    TO              reduce using rule 54 (expr -> expr AND expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69

  ! LBRACKET        [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! QUESTIONMARK    [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! ASSIGN          [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! GTE             [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! LTE             [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 54 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 106

    (13) stmt -> IF LPAREN expr . RPAREN stmt else_choice
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    RPAREN          shift and go to state 123
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 107

    (14) stmt -> IF LPAREN error . RPAREN stmt else_choice

    RPAREN          shift and go to state 124


state 108

    (17) stmt -> WHILE LPAREN expr . RPAREN stmt
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    RPAREN          shift and go to state 125
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 109

    (18) stmt -> WHILE LPAREN error . RPAREN stmt

    RPAREN          shift and go to state 126


state 110

    (19) stmt -> FOR LPAREN iden . ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> FOR LPAREN iden . ASSIGN error TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden . ASSIGN expr TO error RPAREN stmt

    ASSIGN          shift and go to state 127


state 111

    (59) expr -> iden LPAREN clist . RPAREN

    RPAREN          shift and go to state 128


state 112

    (60) expr -> iden LPAREN error . RPAREN

    RPAREN          shift and go to state 129


state 113

    (22) stmt -> RETURN expr SEMICOLON .

    error           reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    IF              reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    LBRACKET        reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    NOT             reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    VAR             reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    DEF             reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 22 (stmt -> RETURN expr SEMICOLON .)


state 114

    (37) expr -> LBRACKET clist RBRACKET .

    SEMICOLON       reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    LBRACKET        reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    QUESTIONMARK    reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    ASSIGN          reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    PLUS            reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    MINUS           reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    TIMES           reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    DIVIDE          reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    MOD             reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    GT              reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    LT              reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    EQUAL           reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    GTE             reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    LTE             reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    NOT_EQUAL       reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    OR              reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    AND             reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    COMMA           reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    RBRACKET        reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    COLON           reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    error           reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    RPAREN          reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)
    TO              reduce using rule 37 (expr -> LBRACKET clist RBRACKET .)


state 115

    (38) expr -> LBRACKET error RBRACKET .

    SEMICOLON       reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    LBRACKET        reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    QUESTIONMARK    reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    ASSIGN          reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    PLUS            reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    MINUS           reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    TIMES           reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    DIVIDE          reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    MOD             reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    GT              reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    LT              reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    EQUAL           reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    GTE             reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    LTE             reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    NOT_EQUAL       reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    OR              reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    AND             reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    COMMA           reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    COLON           reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    error           reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    RPAREN          reduce using rule 38 (expr -> LBRACKET error RBRACKET .)
    TO              reduce using rule 38 (expr -> LBRACKET error RBRACKET .)


state 116

    (34) clist -> expr COMMA . clist
    (32) clist -> . empty
    (33) clist -> . expr
    (34) clist -> . expr COMMA clist
    (70) empty -> .
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    RBRACKET        reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 81
    clist                          shift and go to state 130
    empty                          shift and go to state 80
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 117

    (25) defvar -> VAR type iden . defvar_choice
    (27) defvar_choice -> . empty
    (28) defvar_choice -> . ASSIGN expr
    (70) empty -> .

    ASSIGN          shift and go to state 133
    SEMICOLON       reduce using rule 70 (empty -> .)

    defvar_choice                  shift and go to state 131
    empty                          shift and go to state 132

state 118

    (26) defvar -> VAR error iden . defvar_choice
    (27) defvar_choice -> . empty
    (28) defvar_choice -> . ASSIGN expr
    (70) empty -> .

    ASSIGN          shift and go to state 133
    SEMICOLON       reduce using rule 70 (empty -> .)

    defvar_choice                  shift and go to state 134
    empty                          shift and go to state 132

state 119

    (35) expr -> expr LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    QUESTIONMARK    reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    GTE             reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    LTE             reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    error           reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)
    TO              reduce using rule 35 (expr -> expr LBRACKET expr RBRACKET .)


state 120

    (36) expr -> expr LBRACKET error RBRACKET .

    SEMICOLON       reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    LBRACKET        reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    QUESTIONMARK    reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    ASSIGN          reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    PLUS            reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    MINUS           reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    TIMES           reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    DIVIDE          reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    MOD             reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    GT              reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    LT              reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    EQUAL           reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    GTE             reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    LTE             reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    NOT_EQUAL       reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    OR              reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    AND             reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    COMMA           reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    COLON           reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    error           reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    RPAREN          reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)
    TO              reduce using rule 36 (expr -> expr LBRACKET error RBRACKET .)


state 121

    (39) expr -> expr QUESTIONMARK expr COLON . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 135
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 122

    (40) expr -> expr QUESTIONMARK expr error . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 136
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 123

    (13) stmt -> IF LPAREN expr RPAREN . stmt else_choice
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 32
    stmt                           shift and go to state 137
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 124

    (14) stmt -> IF LPAREN error RPAREN . stmt else_choice
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    stmt                           shift and go to state 139
    expr                           shift and go to state 32
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 125

    (17) stmt -> WHILE LPAREN expr RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 32
    stmt                           shift and go to state 140
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 126

    (18) stmt -> WHILE LPAREN error RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    stmt                           shift and go to state 141
    expr                           shift and go to state 32
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 127

    (19) stmt -> FOR LPAREN iden ASSIGN . expr TO expr RPAREN stmt
    (20) stmt -> FOR LPAREN iden ASSIGN . error TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden ASSIGN . expr TO error RPAREN stmt
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 143
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    iden                           shift and go to state 37
    expr                           shift and go to state 142
    num                            shift and go to state 44
    str                            shift and go to state 45

state 128

    (59) expr -> iden LPAREN clist RPAREN .

    SEMICOLON       reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    LBRACKET        reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    QUESTIONMARK    reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    ASSIGN          reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    PLUS            reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    MINUS           reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    TIMES           reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    MOD             reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    GT              reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    LT              reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    EQUAL           reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    GTE             reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    LTE             reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    OR              reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    AND             reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    COMMA           reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    RBRACKET        reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    COLON           reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    error           reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    RPAREN          reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)
    TO              reduce using rule 59 (expr -> iden LPAREN clist RPAREN .)


state 129

    (60) expr -> iden LPAREN error RPAREN .

    SEMICOLON       reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    LBRACKET        reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    QUESTIONMARK    reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    ASSIGN          reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    PLUS            reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    MINUS           reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    TIMES           reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    DIVIDE          reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    MOD             reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    GT              reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    LT              reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    EQUAL           reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    GTE             reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    LTE             reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    NOT_EQUAL       reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    OR              reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    AND             reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    COMMA           reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    RBRACKET        reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    COLON           reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    error           reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    RPAREN          reduce using rule 60 (expr -> iden LPAREN error RPAREN .)
    TO              reduce using rule 60 (expr -> iden LPAREN error RPAREN .)


state 130

    (34) clist -> expr COMMA clist .

    RBRACKET        reduce using rule 34 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 34 (clist -> expr COMMA clist .)


state 131

    (25) defvar -> VAR type iden defvar_choice .

    SEMICOLON       reduce using rule 25 (defvar -> VAR type iden defvar_choice .)


state 132

    (27) defvar_choice -> empty .

    SEMICOLON       reduce using rule 27 (defvar_choice -> empty .)


state 133

    (28) defvar_choice -> ASSIGN . expr
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    expr                           shift and go to state 144
    iden                           shift and go to state 37
    num                            shift and go to state 44
    str                            shift and go to state 45

state 134

    (26) defvar -> VAR error iden defvar_choice .

    SEMICOLON       reduce using rule 26 (defvar -> VAR error iden defvar_choice .)


state 135

    (39) expr -> expr QUESTIONMARK expr COLON expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    QUESTIONMARK    reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    ASSIGN          reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    GT              reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    LT              reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    EQUAL           reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    GTE             reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    LTE             reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    NOT_EQUAL       reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    OR              reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    AND             reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    COMMA           reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    RBRACKET        reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    COLON           reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    error           reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    RPAREN          reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    TO              reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .)
    LBRACKET        shift and go to state 56
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63

  ! LBRACKET        [ reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! QUESTIONMARK    [ shift and go to state 57 ]
  ! ASSIGN          [ shift and go to state 58 ]
  ! GT              [ shift and go to state 64 ]
  ! LT              [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! GTE             [ shift and go to state 67 ]
  ! LTE             [ shift and go to state 68 ]
  ! NOT_EQUAL       [ shift and go to state 69 ]
  ! OR              [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]


state 136

    (40) expr -> expr QUESTIONMARK expr error expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .)
    COMMA           reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .)
    RBRACKET        reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .)
    COLON           reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .)
    error           reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .)
    RPAREN          reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .)
    TO              reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71

  ! LBRACKET        [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! QUESTIONMARK    [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! ASSIGN          [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! PLUS            [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! GT              [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! LT              [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! EQUAL           [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! GTE             [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! LTE             [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! NOT_EQUAL       [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! OR              [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! AND             [ reduce using rule 40 (expr -> expr QUESTIONMARK expr error expr .) ]


state 137

    (13) stmt -> IF LPAREN expr RPAREN stmt . else_choice
    (15) else_choice -> . empty
    (16) else_choice -> . ELSE stmt
    (70) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 147
    error           reduce using rule 70 (empty -> .)
    IF              reduce using rule 70 (empty -> .)
    WHILE           reduce using rule 70 (empty -> .)
    FOR             reduce using rule 70 (empty -> .)
    RETURN          reduce using rule 70 (empty -> .)
    LBRACE          reduce using rule 70 (empty -> .)
    LBRACKET        reduce using rule 70 (empty -> .)
    NOT             reduce using rule 70 (empty -> .)
    PLUS            reduce using rule 70 (empty -> .)
    MINUS           reduce using rule 70 (empty -> .)
    VAR             reduce using rule 70 (empty -> .)
    DEF             reduce using rule 70 (empty -> .)
    IDENTIFIER      reduce using rule 70 (empty -> .)
    NUMBER          reduce using rule 70 (empty -> .)
    STRING          reduce using rule 70 (empty -> .)
    RBRACE          reduce using rule 70 (empty -> .)

  ! ELSE            [ reduce using rule 70 (empty -> .) ]

    else_choice                    shift and go to state 145
    empty                          shift and go to state 146

state 138

    (11) stmt -> error . SEMICOLON

    SEMICOLON       shift and go to state 54


state 139

    (14) stmt -> IF LPAREN error RPAREN stmt . else_choice
    (15) else_choice -> . empty
    (16) else_choice -> . ELSE stmt
    (70) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 147
    error           reduce using rule 70 (empty -> .)
    IF              reduce using rule 70 (empty -> .)
    WHILE           reduce using rule 70 (empty -> .)
    FOR             reduce using rule 70 (empty -> .)
    RETURN          reduce using rule 70 (empty -> .)
    LBRACE          reduce using rule 70 (empty -> .)
    LBRACKET        reduce using rule 70 (empty -> .)
    NOT             reduce using rule 70 (empty -> .)
    PLUS            reduce using rule 70 (empty -> .)
    MINUS           reduce using rule 70 (empty -> .)
    VAR             reduce using rule 70 (empty -> .)
    DEF             reduce using rule 70 (empty -> .)
    IDENTIFIER      reduce using rule 70 (empty -> .)
    NUMBER          reduce using rule 70 (empty -> .)
    STRING          reduce using rule 70 (empty -> .)
    RBRACE          reduce using rule 70 (empty -> .)

  ! ELSE            [ reduce using rule 70 (empty -> .) ]

    else_choice                    shift and go to state 148
    empty                          shift and go to state 146

state 140

    (17) stmt -> WHILE LPAREN expr RPAREN stmt .

    error           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACKET        reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    PLUS            reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DEF             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 141

    (18) stmt -> WHILE LPAREN error RPAREN stmt .

    error           reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    IF              reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    WHILE           reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    FOR             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    RETURN          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    LBRACE          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    LBRACKET        reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    NOT             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    PLUS            reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    MINUS           reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    VAR             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    DEF             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    IDENTIFIER      reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    NUMBER          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    STRING          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    RBRACE          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    ELSE            reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)


state 142

    (19) stmt -> FOR LPAREN iden ASSIGN expr . TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden ASSIGN expr . TO error RPAREN stmt
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    TO              shift and go to state 149
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 143

    (20) stmt -> FOR LPAREN iden ASSIGN error . TO expr RPAREN stmt

    TO              shift and go to state 150


state 144

    (28) defvar_choice -> ASSIGN expr .
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    SEMICOLON       reduce using rule 28 (defvar_choice -> ASSIGN expr .)
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 145

    (13) stmt -> IF LPAREN expr RPAREN stmt else_choice .

    error           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IF              reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    WHILE           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    FOR             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RETURN          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACE          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACKET        reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NOT             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    PLUS            reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    MINUS           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    VAR             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    DEF             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IDENTIFIER      reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NUMBER          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    STRING          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RBRACE          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    ELSE            reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)


state 146

    (15) else_choice -> empty .

    ELSE            reduce using rule 15 (else_choice -> empty .)
    error           reduce using rule 15 (else_choice -> empty .)
    IF              reduce using rule 15 (else_choice -> empty .)
    WHILE           reduce using rule 15 (else_choice -> empty .)
    FOR             reduce using rule 15 (else_choice -> empty .)
    RETURN          reduce using rule 15 (else_choice -> empty .)
    LBRACE          reduce using rule 15 (else_choice -> empty .)
    LBRACKET        reduce using rule 15 (else_choice -> empty .)
    NOT             reduce using rule 15 (else_choice -> empty .)
    PLUS            reduce using rule 15 (else_choice -> empty .)
    MINUS           reduce using rule 15 (else_choice -> empty .)
    VAR             reduce using rule 15 (else_choice -> empty .)
    DEF             reduce using rule 15 (else_choice -> empty .)
    IDENTIFIER      reduce using rule 15 (else_choice -> empty .)
    NUMBER          reduce using rule 15 (else_choice -> empty .)
    STRING          reduce using rule 15 (else_choice -> empty .)
    RBRACE          reduce using rule 15 (else_choice -> empty .)


state 147

    (16) else_choice -> ELSE . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    stmt                           shift and go to state 151
    expr                           shift and go to state 32
    defvar                         shift and go to state 33
    iden                           shift and go to state 37
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 148

    (14) stmt -> IF LPAREN error RPAREN stmt else_choice .

    error           reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IF              reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    WHILE           reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    FOR             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RETURN          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACE          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACKET        reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NOT             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    PLUS            reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    MINUS           reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    VAR             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    DEF             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IDENTIFIER      reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NUMBER          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    STRING          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RBRACE          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    ELSE            reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)


state 149

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO . expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden ASSIGN expr TO . error RPAREN stmt
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 153
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    iden                           shift and go to state 37
    expr                           shift and go to state 152
    num                            shift and go to state 44
    str                            shift and go to state 45

state 150

    (20) stmt -> FOR LPAREN iden ASSIGN error TO . expr RPAREN stmt
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    iden                           shift and go to state 37
    expr                           shift and go to state 154
    num                            shift and go to state 44
    str                            shift and go to state 45

state 151

    (16) else_choice -> ELSE stmt .

    ELSE            reduce using rule 16 (else_choice -> ELSE stmt .)
    error           reduce using rule 16 (else_choice -> ELSE stmt .)
    IF              reduce using rule 16 (else_choice -> ELSE stmt .)
    WHILE           reduce using rule 16 (else_choice -> ELSE stmt .)
    FOR             reduce using rule 16 (else_choice -> ELSE stmt .)
    RETURN          reduce using rule 16 (else_choice -> ELSE stmt .)
    LBRACE          reduce using rule 16 (else_choice -> ELSE stmt .)
    LBRACKET        reduce using rule 16 (else_choice -> ELSE stmt .)
    NOT             reduce using rule 16 (else_choice -> ELSE stmt .)
    PLUS            reduce using rule 16 (else_choice -> ELSE stmt .)
    MINUS           reduce using rule 16 (else_choice -> ELSE stmt .)
    VAR             reduce using rule 16 (else_choice -> ELSE stmt .)
    DEF             reduce using rule 16 (else_choice -> ELSE stmt .)
    IDENTIFIER      reduce using rule 16 (else_choice -> ELSE stmt .)
    NUMBER          reduce using rule 16 (else_choice -> ELSE stmt .)
    STRING          reduce using rule 16 (else_choice -> ELSE stmt .)
    RBRACE          reduce using rule 16 (else_choice -> ELSE stmt .)


state 152

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO expr . RPAREN stmt
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    RPAREN          shift and go to state 155
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 153

    (21) stmt -> FOR LPAREN iden ASSIGN expr TO error . RPAREN stmt

    RPAREN          shift and go to state 156


state 154

    (20) stmt -> FOR LPAREN iden ASSIGN error TO expr . RPAREN stmt
    (35) expr -> expr . LBRACKET expr RBRACKET
    (36) expr -> expr . LBRACKET error RBRACKET
    (39) expr -> expr . QUESTIONMARK expr COLON expr
    (40) expr -> expr . QUESTIONMARK expr error expr
    (41) expr -> expr . ASSIGN expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . TIMES expr
    (45) expr -> expr . DIVIDE expr
    (46) expr -> expr . MOD expr
    (47) expr -> expr . GT expr
    (48) expr -> expr . LT expr
    (49) expr -> expr . EQUAL expr
    (50) expr -> expr . GTE expr
    (51) expr -> expr . LTE expr
    (52) expr -> expr . NOT_EQUAL expr
    (53) expr -> expr . OR expr
    (54) expr -> expr . AND expr

    RPAREN          shift and go to state 157
    LBRACKET        shift and go to state 56
    QUESTIONMARK    shift and go to state 57
    ASSIGN          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MOD             shift and go to state 63
    GT              shift and go to state 64
    LT              shift and go to state 65
    EQUAL           shift and go to state 66
    GTE             shift and go to state 67
    LTE             shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    OR              shift and go to state 70
    AND             shift and go to state 71


state 155

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    iden                           shift and go to state 37
    expr                           shift and go to state 32
    stmt                           shift and go to state 158
    defvar                         shift and go to state 33
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 156

    (21) stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    iden                           shift and go to state 37
    expr                           shift and go to state 32
    stmt                           shift and go to state 159
    defvar                         shift and go to state 33
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 157

    (20) stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . RETURN expr SEMICOLON
    (23) stmt -> . LBRACE body RBRACE
    (24) stmt -> . func
    (35) expr -> . expr LBRACKET expr RBRACKET
    (36) expr -> . expr LBRACKET error RBRACKET
    (37) expr -> . LBRACKET clist RBRACKET
    (38) expr -> . LBRACKET error RBRACKET
    (39) expr -> . expr QUESTIONMARK expr COLON expr
    (40) expr -> . expr QUESTIONMARK expr error expr
    (41) expr -> . expr ASSIGN expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr TIMES expr
    (45) expr -> . expr DIVIDE expr
    (46) expr -> . expr MOD expr
    (47) expr -> . expr GT expr
    (48) expr -> . expr LT expr
    (49) expr -> . expr EQUAL expr
    (50) expr -> . expr GTE expr
    (51) expr -> . expr LTE expr
    (52) expr -> . expr NOT_EQUAL expr
    (53) expr -> . expr OR expr
    (54) expr -> . expr AND expr
    (55) expr -> . NOT expr
    (56) expr -> . PLUS expr
    (57) expr -> . MINUS expr
    (58) expr -> . iden
    (59) expr -> . iden LPAREN clist RPAREN
    (60) expr -> . iden LPAREN error RPAREN
    (61) expr -> . num
    (62) expr -> . str
    (25) defvar -> . VAR type iden defvar_choice
    (26) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (67) iden -> . IDENTIFIER
    (69) num -> . NUMBER
    (68) str -> . STRING

    error           shift and go to state 138
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 38
    LBRACE          shift and go to state 27
    LBRACKET        shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    VAR             shift and go to state 46
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48

    iden                           shift and go to state 37
    expr                           shift and go to state 32
    stmt                           shift and go to state 160
    defvar                         shift and go to state 33
    func                           shift and go to state 39
    num                            shift and go to state 44
    str                            shift and go to state 45

state 158

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .

    error           reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    IF              reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    FOR             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    LBRACE          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    NOT             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    VAR             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    DEF             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    STRING          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    RBRACE          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)


state 159

    (21) stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .

    error           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    IF              reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    WHILE           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    FOR             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    RETURN          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    LBRACE          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    LBRACKET        reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    NOT             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    PLUS            reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    MINUS           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    VAR             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    DEF             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    IDENTIFIER      reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    NUMBER          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    STRING          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    RBRACE          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    ELSE            reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)


state 160

    (20) stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .

    error           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    IF              reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    WHILE           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    FOR             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    RETURN          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    LBRACE          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    NOT             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    PLUS            reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    MINUS           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    VAR             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    DEF             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    NUMBER          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    STRING          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    RBRACE          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    ELSE            reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 137 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 139 resolved as shift
