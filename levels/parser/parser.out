Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> prog
Rule 1     prog -> empty
Rule 2     prog -> func prog
Rule 3     func -> DEF type iden LPAREN flist RPAREN func_choice
Rule 4     func -> DEF type iden LPAREN error RPAREN func_choice
Rule 5     func -> DEF error iden LPAREN flist RPAREN func_choice
Rule 6     func_choice -> LBRACE body RBRACE
Rule 7     func_choice -> RETURN expr SEMICOLON
Rule 8     body -> empty
Rule 9     body -> stmt body
Rule 10    body -> error body
Rule 11    stmt -> expr SEMICOLON
Rule 12    stmt -> error SEMICOLON
Rule 13    stmt -> defvar SEMICOLON
Rule 14    stmt -> IF LPAREN expr RPAREN stmt else_choice
Rule 15    stmt -> IF LPAREN error RPAREN stmt else_choice
Rule 16    else_choice -> empty
Rule 17    else_choice -> ELSE stmt
Rule 18    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 19    stmt -> WHILE LPAREN error RPAREN stmt
Rule 20    stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
Rule 21    stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
Rule 22    stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
Rule 23    stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error
Rule 24    stmt -> RETURN expr SEMICOLON
Rule 25    stmt -> LBRACE body RBRACE
Rule 26    stmt -> func
Rule 27    defvar -> VAR type iden defvar_choice
Rule 28    defvar -> VAR error iden defvar_choice
Rule 29    defvar_choice -> empty
Rule 30    defvar_choice -> ASSIGN expr
Rule 31    flist -> empty
Rule 32    flist -> type iden
Rule 33    flist -> error iden
Rule 34    flist -> type iden COMMA flist
Rule 35    flist -> error iden COMMA flist
Rule 36    clist -> empty
Rule 37    clist -> expr
Rule 38    clist -> expr COMMA clist
Rule 39    expr -> expr LBRACKET expr RBRACKET
Rule 40    expr -> expr LBRACKET error RBRACKET
Rule 41    expr -> LBRACKET clist RBRACKET
Rule 42    expr -> LBRACKET error RBRACKET
Rule 43    expr -> expr QUESTIONMARK expr COLON expr
Rule 44    expr -> expr QUESTIONMARK expr error expr
Rule 45    expr -> expr ASSIGN expr
Rule 46    expr -> expr PLUS expr
Rule 47    expr -> expr MINUS expr
Rule 48    expr -> expr TIMES expr
Rule 49    expr -> expr DIVIDE expr
Rule 50    expr -> expr MOD expr
Rule 51    expr -> expr GT expr
Rule 52    expr -> expr LT expr
Rule 53    expr -> expr EQUAL expr
Rule 54    expr -> expr GTE expr
Rule 55    expr -> expr LTE expr
Rule 56    expr -> expr NOT_EQUAL expr
Rule 57    expr -> expr OR expr
Rule 58    expr -> expr AND expr
Rule 59    expr -> NOT expr
Rule 60    expr -> PLUS expr
Rule 61    expr -> MINUS expr
Rule 62    expr -> iden
Rule 63    expr -> iden LPAREN clist RPAREN
Rule 64    expr -> iden LPAREN error RPAREN
Rule 65    expr -> num
Rule 66    expr -> str
Rule 67    type -> INT_TYPE
Rule 68    type -> STR_TYPE
Rule 69    type -> NULL_TYPE
Rule 70    type -> VECTOR_TYPE LT INT_TYPE GT
Rule 71    type -> VECTOR_TYPE LT STR_TYPE GT
Rule 72    type -> VECTOR_TYPE LT INT_TYPE error
Rule 73    type -> VECTOR_TYPE error INT_TYPE GT
Rule 74    type -> VECTOR_TYPE error INT_TYPE error
Rule 75    type -> VECTOR_TYPE LT STR_TYPE error
Rule 76    type -> VECTOR_TYPE error STR_TYPE GT
Rule 77    type -> VECTOR_TYPE error STR_TYPE error
Rule 78    type -> VECTOR_TYPE LT error GT
Rule 79    iden -> IDENTIFIER
Rule 80    str -> STRING
Rule 81    num -> NUMBER
Rule 82    empty -> <empty>

Terminals, with rules where they appear

AND                  : 58
ASSIGN               : 20 21 22 23 30 45
COLON                : 43
COMMA                : 34 35 38
COMMENT              : 
DEF                  : 3 4 5
DIVIDE               : 49
ELSE                 : 17
EQUAL                : 53
FOR                  : 20 21 22 23
GT                   : 51 70 71 73 76 78
GTE                  : 54
IDENTIFIER           : 79
IF                   : 14 15
INT_TYPE             : 67 70 72 73 74
LBRACE               : 6 25
LBRACKET             : 39 40 41 42
LPAREN               : 3 4 5 14 15 18 19 20 21 22 23 63 64
LT                   : 52 70 71 72 75 78
LTE                  : 55
MINUS                : 47 61
MOD                  : 50
NOT                  : 59
NOT_EQUAL            : 56
NULL_TYPE            : 69
NUMBER               : 81
OR                   : 57
PLUS                 : 46 60
QUESTIONMARK         : 43 44
RBRACE               : 6 25
RBRACKET             : 39 40 41 42
RETURN               : 7 24
RPAREN               : 3 4 5 14 15 18 19 20 21 22 23 63 64
SEMICOLON            : 7 11 12 13 24
STRING               : 80
STR_TYPE             : 68 71 75 76 77
TIMES                : 48
TO                   : 20 21 22 23
VAR                  : 27 28
VECTOR_TYPE          : 70 71 72 73 74 75 76 77 78
WHILE                : 18 19
error                : 4 5 10 12 15 19 21 22 23 28 33 35 40 42 44 64 72 73 74 74 75 76 77 77 78

Nonterminals, with rules where they appear

body                 : 6 9 10 25
clist                : 38 41 63
defvar               : 13
defvar_choice        : 27 28
else_choice          : 14 15
empty                : 1 8 16 29 31 36
expr                 : 7 11 14 18 20 20 21 22 23 23 24 30 37 38 39 39 40 43 43 43 44 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 61
flist                : 3 5 34 35
func                 : 2 26
func_choice          : 3 4 5
iden                 : 3 4 5 20 21 22 23 27 28 32 33 34 35 62 63 64
num                  : 65
prog                 : 2 0
stmt                 : 9 14 15 17 18 19 20 21 22
str                  : 66
type                 : 3 4 27 32 34

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (82) empty -> .
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice

    $end            reduce using rule 82 (empty -> .)
    DEF             shift and go to state 4

    prog                           shift and go to state 1
    empty                          shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> empty .

    $end            reduce using rule 1 (prog -> empty .)


state 3

    (2) prog -> func . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (82) empty -> .
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice

    $end            reduce using rule 82 (empty -> .)
    DEF             shift and go to state 4

    func                           shift and go to state 3
    prog                           shift and go to state 5
    empty                          shift and go to state 2

state 4

    (3) func -> DEF . type iden LPAREN flist RPAREN func_choice
    (4) func -> DEF . type iden LPAREN error RPAREN func_choice
    (5) func -> DEF . error iden LPAREN flist RPAREN func_choice
    (67) type -> . INT_TYPE
    (68) type -> . STR_TYPE
    (69) type -> . NULL_TYPE
    (70) type -> . VECTOR_TYPE LT INT_TYPE GT
    (71) type -> . VECTOR_TYPE LT STR_TYPE GT
    (72) type -> . VECTOR_TYPE LT INT_TYPE error
    (73) type -> . VECTOR_TYPE error INT_TYPE GT
    (74) type -> . VECTOR_TYPE error INT_TYPE error
    (75) type -> . VECTOR_TYPE LT STR_TYPE error
    (76) type -> . VECTOR_TYPE error STR_TYPE GT
    (77) type -> . VECTOR_TYPE error STR_TYPE error
    (78) type -> . VECTOR_TYPE LT error GT

    error           shift and go to state 7
    INT_TYPE        shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10
    VECTOR_TYPE     shift and go to state 11

    type                           shift and go to state 6

state 5

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 6

    (3) func -> DEF type . iden LPAREN flist RPAREN func_choice
    (4) func -> DEF type . iden LPAREN error RPAREN func_choice
    (79) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 12

state 7

    (5) func -> DEF error . iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 14

state 8

    (67) type -> INT_TYPE .

    IDENTIFIER      reduce using rule 67 (type -> INT_TYPE .)


state 9

    (68) type -> STR_TYPE .

    IDENTIFIER      reduce using rule 68 (type -> STR_TYPE .)


state 10

    (69) type -> NULL_TYPE .

    IDENTIFIER      reduce using rule 69 (type -> NULL_TYPE .)


state 11

    (70) type -> VECTOR_TYPE . LT INT_TYPE GT
    (71) type -> VECTOR_TYPE . LT STR_TYPE GT
    (72) type -> VECTOR_TYPE . LT INT_TYPE error
    (73) type -> VECTOR_TYPE . error INT_TYPE GT
    (74) type -> VECTOR_TYPE . error INT_TYPE error
    (75) type -> VECTOR_TYPE . LT STR_TYPE error
    (76) type -> VECTOR_TYPE . error STR_TYPE GT
    (77) type -> VECTOR_TYPE . error STR_TYPE error
    (78) type -> VECTOR_TYPE . LT error GT

    LT              shift and go to state 15
    error           shift and go to state 16


state 12

    (3) func -> DEF type iden . LPAREN flist RPAREN func_choice
    (4) func -> DEF type iden . LPAREN error RPAREN func_choice

    LPAREN          shift and go to state 17


state 13

    (79) iden -> IDENTIFIER .

    LPAREN          reduce using rule 79 (iden -> IDENTIFIER .)
    COMMA           reduce using rule 79 (iden -> IDENTIFIER .)
    RPAREN          reduce using rule 79 (iden -> IDENTIFIER .)
    SEMICOLON       reduce using rule 79 (iden -> IDENTIFIER .)
    LBRACKET        reduce using rule 79 (iden -> IDENTIFIER .)
    QUESTIONMARK    reduce using rule 79 (iden -> IDENTIFIER .)
    ASSIGN          reduce using rule 79 (iden -> IDENTIFIER .)
    PLUS            reduce using rule 79 (iden -> IDENTIFIER .)
    MINUS           reduce using rule 79 (iden -> IDENTIFIER .)
    TIMES           reduce using rule 79 (iden -> IDENTIFIER .)
    DIVIDE          reduce using rule 79 (iden -> IDENTIFIER .)
    MOD             reduce using rule 79 (iden -> IDENTIFIER .)
    GT              reduce using rule 79 (iden -> IDENTIFIER .)
    LT              reduce using rule 79 (iden -> IDENTIFIER .)
    EQUAL           reduce using rule 79 (iden -> IDENTIFIER .)
    GTE             reduce using rule 79 (iden -> IDENTIFIER .)
    LTE             reduce using rule 79 (iden -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 79 (iden -> IDENTIFIER .)
    OR              reduce using rule 79 (iden -> IDENTIFIER .)
    AND             reduce using rule 79 (iden -> IDENTIFIER .)
    RBRACKET        reduce using rule 79 (iden -> IDENTIFIER .)
    COLON           reduce using rule 79 (iden -> IDENTIFIER .)
    error           reduce using rule 79 (iden -> IDENTIFIER .)
    TO              reduce using rule 79 (iden -> IDENTIFIER .)


state 14

    (5) func -> DEF error iden . LPAREN flist RPAREN func_choice

    LPAREN          shift and go to state 18


state 15

    (70) type -> VECTOR_TYPE LT . INT_TYPE GT
    (71) type -> VECTOR_TYPE LT . STR_TYPE GT
    (72) type -> VECTOR_TYPE LT . INT_TYPE error
    (75) type -> VECTOR_TYPE LT . STR_TYPE error
    (78) type -> VECTOR_TYPE LT . error GT

    INT_TYPE        shift and go to state 19
    STR_TYPE        shift and go to state 20
    error           shift and go to state 21


state 16

    (73) type -> VECTOR_TYPE error . INT_TYPE GT
    (74) type -> VECTOR_TYPE error . INT_TYPE error
    (76) type -> VECTOR_TYPE error . STR_TYPE GT
    (77) type -> VECTOR_TYPE error . STR_TYPE error

    INT_TYPE        shift and go to state 22
    STR_TYPE        shift and go to state 23


state 17

    (3) func -> DEF type iden LPAREN . flist RPAREN func_choice
    (4) func -> DEF type iden LPAREN . error RPAREN func_choice
    (31) flist -> . empty
    (32) flist -> . type iden
    (33) flist -> . error iden
    (34) flist -> . type iden COMMA flist
    (35) flist -> . error iden COMMA flist
    (82) empty -> .
    (67) type -> . INT_TYPE
    (68) type -> . STR_TYPE
    (69) type -> . NULL_TYPE
    (70) type -> . VECTOR_TYPE LT INT_TYPE GT
    (71) type -> . VECTOR_TYPE LT STR_TYPE GT
    (72) type -> . VECTOR_TYPE LT INT_TYPE error
    (73) type -> . VECTOR_TYPE error INT_TYPE GT
    (74) type -> . VECTOR_TYPE error INT_TYPE error
    (75) type -> . VECTOR_TYPE LT STR_TYPE error
    (76) type -> . VECTOR_TYPE error STR_TYPE GT
    (77) type -> . VECTOR_TYPE error STR_TYPE error
    (78) type -> . VECTOR_TYPE LT error GT

    error           shift and go to state 26
    RPAREN          reduce using rule 82 (empty -> .)
    INT_TYPE        shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10
    VECTOR_TYPE     shift and go to state 11

    type                           shift and go to state 24
    flist                          shift and go to state 25
    empty                          shift and go to state 27

state 18

    (5) func -> DEF error iden LPAREN . flist RPAREN func_choice
    (31) flist -> . empty
    (32) flist -> . type iden
    (33) flist -> . error iden
    (34) flist -> . type iden COMMA flist
    (35) flist -> . error iden COMMA flist
    (82) empty -> .
    (67) type -> . INT_TYPE
    (68) type -> . STR_TYPE
    (69) type -> . NULL_TYPE
    (70) type -> . VECTOR_TYPE LT INT_TYPE GT
    (71) type -> . VECTOR_TYPE LT STR_TYPE GT
    (72) type -> . VECTOR_TYPE LT INT_TYPE error
    (73) type -> . VECTOR_TYPE error INT_TYPE GT
    (74) type -> . VECTOR_TYPE error INT_TYPE error
    (75) type -> . VECTOR_TYPE LT STR_TYPE error
    (76) type -> . VECTOR_TYPE error STR_TYPE GT
    (77) type -> . VECTOR_TYPE error STR_TYPE error
    (78) type -> . VECTOR_TYPE LT error GT

    error           shift and go to state 28
    RPAREN          reduce using rule 82 (empty -> .)
    INT_TYPE        shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10
    VECTOR_TYPE     shift and go to state 11

    flist                          shift and go to state 29
    empty                          shift and go to state 27
    type                           shift and go to state 24

state 19

    (70) type -> VECTOR_TYPE LT INT_TYPE . GT
    (72) type -> VECTOR_TYPE LT INT_TYPE . error

    GT              shift and go to state 30
    error           shift and go to state 31


state 20

    (71) type -> VECTOR_TYPE LT STR_TYPE . GT
    (75) type -> VECTOR_TYPE LT STR_TYPE . error

    GT              shift and go to state 32
    error           shift and go to state 33


state 21

    (78) type -> VECTOR_TYPE LT error . GT

    GT              shift and go to state 34


state 22

    (73) type -> VECTOR_TYPE error INT_TYPE . GT
    (74) type -> VECTOR_TYPE error INT_TYPE . error

    GT              shift and go to state 36
    error           shift and go to state 35


state 23

    (76) type -> VECTOR_TYPE error STR_TYPE . GT
    (77) type -> VECTOR_TYPE error STR_TYPE . error

    GT              shift and go to state 38
    error           shift and go to state 37


state 24

    (32) flist -> type . iden
    (34) flist -> type . iden COMMA flist
    (79) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 39

state 25

    (3) func -> DEF type iden LPAREN flist . RPAREN func_choice

    RPAREN          shift and go to state 40


state 26

    (4) func -> DEF type iden LPAREN error . RPAREN func_choice
    (33) flist -> error . iden
    (35) flist -> error . iden COMMA flist
    (79) iden -> . IDENTIFIER

    RPAREN          shift and go to state 42
    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 41

state 27

    (31) flist -> empty .

    RPAREN          reduce using rule 31 (flist -> empty .)


state 28

    (33) flist -> error . iden
    (35) flist -> error . iden COMMA flist
    (79) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 41

state 29

    (5) func -> DEF error iden LPAREN flist . RPAREN func_choice

    RPAREN          shift and go to state 43


state 30

    (70) type -> VECTOR_TYPE LT INT_TYPE GT .

    IDENTIFIER      reduce using rule 70 (type -> VECTOR_TYPE LT INT_TYPE GT .)


state 31

    (72) type -> VECTOR_TYPE LT INT_TYPE error .

    IDENTIFIER      reduce using rule 72 (type -> VECTOR_TYPE LT INT_TYPE error .)


state 32

    (71) type -> VECTOR_TYPE LT STR_TYPE GT .

    IDENTIFIER      reduce using rule 71 (type -> VECTOR_TYPE LT STR_TYPE GT .)


state 33

    (75) type -> VECTOR_TYPE LT STR_TYPE error .

    IDENTIFIER      reduce using rule 75 (type -> VECTOR_TYPE LT STR_TYPE error .)


state 34

    (78) type -> VECTOR_TYPE LT error GT .

    IDENTIFIER      reduce using rule 78 (type -> VECTOR_TYPE LT error GT .)


state 35

    (74) type -> VECTOR_TYPE error INT_TYPE error .

    IDENTIFIER      reduce using rule 74 (type -> VECTOR_TYPE error INT_TYPE error .)


state 36

    (73) type -> VECTOR_TYPE error INT_TYPE GT .

    IDENTIFIER      reduce using rule 73 (type -> VECTOR_TYPE error INT_TYPE GT .)


state 37

    (77) type -> VECTOR_TYPE error STR_TYPE error .

    IDENTIFIER      reduce using rule 77 (type -> VECTOR_TYPE error STR_TYPE error .)


state 38

    (76) type -> VECTOR_TYPE error STR_TYPE GT .

    IDENTIFIER      reduce using rule 76 (type -> VECTOR_TYPE error STR_TYPE GT .)


state 39

    (32) flist -> type iden .
    (34) flist -> type iden . COMMA flist

    RPAREN          reduce using rule 32 (flist -> type iden .)
    COMMA           shift and go to state 44


state 40

    (3) func -> DEF type iden LPAREN flist RPAREN . func_choice
    (6) func_choice -> . LBRACE body RBRACE
    (7) func_choice -> . RETURN expr SEMICOLON

    LBRACE          shift and go to state 46
    RETURN          shift and go to state 47

    func_choice                    shift and go to state 45

state 41

    (33) flist -> error iden .
    (35) flist -> error iden . COMMA flist

    RPAREN          reduce using rule 33 (flist -> error iden .)
    COMMA           shift and go to state 48


state 42

    (4) func -> DEF type iden LPAREN error RPAREN . func_choice
    (6) func_choice -> . LBRACE body RBRACE
    (7) func_choice -> . RETURN expr SEMICOLON

    LBRACE          shift and go to state 46
    RETURN          shift and go to state 47

    func_choice                    shift and go to state 49

state 43

    (5) func -> DEF error iden LPAREN flist RPAREN . func_choice
    (6) func_choice -> . LBRACE body RBRACE
    (7) func_choice -> . RETURN expr SEMICOLON

    LBRACE          shift and go to state 46
    RETURN          shift and go to state 47

    func_choice                    shift and go to state 50

state 44

    (34) flist -> type iden COMMA . flist
    (31) flist -> . empty
    (32) flist -> . type iden
    (33) flist -> . error iden
    (34) flist -> . type iden COMMA flist
    (35) flist -> . error iden COMMA flist
    (82) empty -> .
    (67) type -> . INT_TYPE
    (68) type -> . STR_TYPE
    (69) type -> . NULL_TYPE
    (70) type -> . VECTOR_TYPE LT INT_TYPE GT
    (71) type -> . VECTOR_TYPE LT STR_TYPE GT
    (72) type -> . VECTOR_TYPE LT INT_TYPE error
    (73) type -> . VECTOR_TYPE error INT_TYPE GT
    (74) type -> . VECTOR_TYPE error INT_TYPE error
    (75) type -> . VECTOR_TYPE LT STR_TYPE error
    (76) type -> . VECTOR_TYPE error STR_TYPE GT
    (77) type -> . VECTOR_TYPE error STR_TYPE error
    (78) type -> . VECTOR_TYPE LT error GT

    error           shift and go to state 28
    RPAREN          reduce using rule 82 (empty -> .)
    INT_TYPE        shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10
    VECTOR_TYPE     shift and go to state 11

    type                           shift and go to state 24
    flist                          shift and go to state 51
    empty                          shift and go to state 27

state 45

    (3) func -> DEF type iden LPAREN flist RPAREN func_choice .

    DEF             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    $end            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    error           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    IF              reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    WHILE           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    FOR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    RETURN          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    LBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    LBRACKET        reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    NOT             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    PLUS            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    MINUS           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    VAR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    IDENTIFIER      reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    NUMBER          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    STRING          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    RBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)
    ELSE            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN func_choice .)


state 46

    (6) func_choice -> LBRACE . body RBRACE
    (8) body -> . empty
    (9) body -> . stmt body
    (10) body -> . error body
    (82) empty -> .
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 56
    RBRACE          reduce using rule 82 (empty -> .)
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    body                           shift and go to state 53
    empty                          shift and go to state 54
    stmt                           shift and go to state 55
    expr                           shift and go to state 57
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 47

    (7) func_choice -> RETURN . expr SEMICOLON
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 74
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 48

    (35) flist -> error iden COMMA . flist
    (31) flist -> . empty
    (32) flist -> . type iden
    (33) flist -> . error iden
    (34) flist -> . type iden COMMA flist
    (35) flist -> . error iden COMMA flist
    (82) empty -> .
    (67) type -> . INT_TYPE
    (68) type -> . STR_TYPE
    (69) type -> . NULL_TYPE
    (70) type -> . VECTOR_TYPE LT INT_TYPE GT
    (71) type -> . VECTOR_TYPE LT STR_TYPE GT
    (72) type -> . VECTOR_TYPE LT INT_TYPE error
    (73) type -> . VECTOR_TYPE error INT_TYPE GT
    (74) type -> . VECTOR_TYPE error INT_TYPE error
    (75) type -> . VECTOR_TYPE LT STR_TYPE error
    (76) type -> . VECTOR_TYPE error STR_TYPE GT
    (77) type -> . VECTOR_TYPE error STR_TYPE error
    (78) type -> . VECTOR_TYPE LT error GT

    error           shift and go to state 28
    RPAREN          reduce using rule 82 (empty -> .)
    INT_TYPE        shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10
    VECTOR_TYPE     shift and go to state 11

    flist                          shift and go to state 75
    empty                          shift and go to state 27
    type                           shift and go to state 24

state 49

    (4) func -> DEF type iden LPAREN error RPAREN func_choice .

    DEF             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    $end            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    error           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    IF              reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    WHILE           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    FOR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    RETURN          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    LBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    LBRACKET        reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    NOT             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    PLUS            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    MINUS           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    VAR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    IDENTIFIER      reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    NUMBER          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    STRING          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    RBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)
    ELSE            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN func_choice .)


state 50

    (5) func -> DEF error iden LPAREN flist RPAREN func_choice .

    DEF             reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    $end            reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    error           reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    IF              reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    WHILE           reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    FOR             reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    RETURN          reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    LBRACE          reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    LBRACKET        reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    NOT             reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    PLUS            reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    MINUS           reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    VAR             reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    IDENTIFIER      reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    NUMBER          reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    STRING          reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    RBRACE          reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)
    ELSE            reduce using rule 5 (func -> DEF error iden LPAREN flist RPAREN func_choice .)


state 51

    (34) flist -> type iden COMMA flist .

    RPAREN          reduce using rule 34 (flist -> type iden COMMA flist .)


state 52

    (25) stmt -> LBRACE . body RBRACE
    (8) body -> . empty
    (9) body -> . stmt body
    (10) body -> . error body
    (82) empty -> .
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 56
    RBRACE          reduce using rule 82 (empty -> .)
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    body                           shift and go to state 76
    empty                          shift and go to state 54
    stmt                           shift and go to state 55
    expr                           shift and go to state 57
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 53

    (6) func_choice -> LBRACE body . RBRACE

    RBRACE          shift and go to state 77


state 54

    (8) body -> empty .

    RBRACE          reduce using rule 8 (body -> empty .)


state 55

    (9) body -> stmt . body
    (8) body -> . empty
    (9) body -> . stmt body
    (10) body -> . error body
    (82) empty -> .
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 56
    RBRACE          reduce using rule 82 (empty -> .)
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    stmt                           shift and go to state 55
    body                           shift and go to state 78
    empty                          shift and go to state 54
    expr                           shift and go to state 57
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 56

    (10) body -> error . body
    (12) stmt -> error . SEMICOLON
    (8) body -> . empty
    (9) body -> . stmt body
    (10) body -> . error body
    (82) empty -> .
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    SEMICOLON       shift and go to state 80
    error           shift and go to state 56
    RBRACE          reduce using rule 82 (empty -> .)
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    body                           shift and go to state 79
    empty                          shift and go to state 54
    stmt                           shift and go to state 55
    expr                           shift and go to state 57
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 57

    (11) stmt -> expr . SEMICOLON
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       shift and go to state 81
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 58

    (13) stmt -> defvar . SEMICOLON

    SEMICOLON       shift and go to state 98


state 59

    (14) stmt -> IF . LPAREN expr RPAREN stmt else_choice
    (15) stmt -> IF . LPAREN error RPAREN stmt else_choice

    LPAREN          shift and go to state 99


state 60

    (18) stmt -> WHILE . LPAREN expr RPAREN stmt
    (19) stmt -> WHILE . LPAREN error RPAREN stmt

    LPAREN          shift and go to state 100


state 61

    (20) stmt -> FOR . LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> FOR . LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> FOR . LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> FOR . LPAREN iden ASSIGN expr TO expr RPAREN error

    LPAREN          shift and go to state 101


state 62

    (62) expr -> iden .
    (63) expr -> iden . LPAREN clist RPAREN
    (64) expr -> iden . LPAREN error RPAREN

    SEMICOLON       reduce using rule 62 (expr -> iden .)
    LBRACKET        reduce using rule 62 (expr -> iden .)
    QUESTIONMARK    reduce using rule 62 (expr -> iden .)
    ASSIGN          reduce using rule 62 (expr -> iden .)
    PLUS            reduce using rule 62 (expr -> iden .)
    MINUS           reduce using rule 62 (expr -> iden .)
    TIMES           reduce using rule 62 (expr -> iden .)
    DIVIDE          reduce using rule 62 (expr -> iden .)
    MOD             reduce using rule 62 (expr -> iden .)
    GT              reduce using rule 62 (expr -> iden .)
    LT              reduce using rule 62 (expr -> iden .)
    EQUAL           reduce using rule 62 (expr -> iden .)
    GTE             reduce using rule 62 (expr -> iden .)
    LTE             reduce using rule 62 (expr -> iden .)
    NOT_EQUAL       reduce using rule 62 (expr -> iden .)
    OR              reduce using rule 62 (expr -> iden .)
    AND             reduce using rule 62 (expr -> iden .)
    COMMA           reduce using rule 62 (expr -> iden .)
    RBRACKET        reduce using rule 62 (expr -> iden .)
    COLON           reduce using rule 62 (expr -> iden .)
    error           reduce using rule 62 (expr -> iden .)
    RPAREN          reduce using rule 62 (expr -> iden .)
    TO              reduce using rule 62 (expr -> iden .)
    LPAREN          shift and go to state 102


state 63

    (24) stmt -> RETURN . expr SEMICOLON
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 103
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 64

    (26) stmt -> func .

    error           reduce using rule 26 (stmt -> func .)
    IF              reduce using rule 26 (stmt -> func .)
    WHILE           reduce using rule 26 (stmt -> func .)
    FOR             reduce using rule 26 (stmt -> func .)
    RETURN          reduce using rule 26 (stmt -> func .)
    LBRACE          reduce using rule 26 (stmt -> func .)
    LBRACKET        reduce using rule 26 (stmt -> func .)
    NOT             reduce using rule 26 (stmt -> func .)
    PLUS            reduce using rule 26 (stmt -> func .)
    MINUS           reduce using rule 26 (stmt -> func .)
    VAR             reduce using rule 26 (stmt -> func .)
    DEF             reduce using rule 26 (stmt -> func .)
    IDENTIFIER      reduce using rule 26 (stmt -> func .)
    NUMBER          reduce using rule 26 (stmt -> func .)
    STRING          reduce using rule 26 (stmt -> func .)
    RBRACE          reduce using rule 26 (stmt -> func .)
    ELSE            reduce using rule 26 (stmt -> func .)


state 65

    (41) expr -> LBRACKET . clist RBRACKET
    (42) expr -> LBRACKET . error RBRACKET
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (82) empty -> .
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 105
    RBRACKET        reduce using rule 82 (empty -> .)
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    clist                          shift and go to state 104
    empty                          shift and go to state 106
    expr                           shift and go to state 107
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 66

    (60) expr -> PLUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 108
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 67

    (61) expr -> MINUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 109
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 68

    (59) expr -> NOT . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 110
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 69

    (65) expr -> num .

    SEMICOLON       reduce using rule 65 (expr -> num .)
    LBRACKET        reduce using rule 65 (expr -> num .)
    QUESTIONMARK    reduce using rule 65 (expr -> num .)
    ASSIGN          reduce using rule 65 (expr -> num .)
    PLUS            reduce using rule 65 (expr -> num .)
    MINUS           reduce using rule 65 (expr -> num .)
    TIMES           reduce using rule 65 (expr -> num .)
    DIVIDE          reduce using rule 65 (expr -> num .)
    MOD             reduce using rule 65 (expr -> num .)
    GT              reduce using rule 65 (expr -> num .)
    LT              reduce using rule 65 (expr -> num .)
    EQUAL           reduce using rule 65 (expr -> num .)
    GTE             reduce using rule 65 (expr -> num .)
    LTE             reduce using rule 65 (expr -> num .)
    NOT_EQUAL       reduce using rule 65 (expr -> num .)
    OR              reduce using rule 65 (expr -> num .)
    AND             reduce using rule 65 (expr -> num .)
    COMMA           reduce using rule 65 (expr -> num .)
    RBRACKET        reduce using rule 65 (expr -> num .)
    COLON           reduce using rule 65 (expr -> num .)
    error           reduce using rule 65 (expr -> num .)
    RPAREN          reduce using rule 65 (expr -> num .)
    TO              reduce using rule 65 (expr -> num .)


state 70

    (66) expr -> str .

    SEMICOLON       reduce using rule 66 (expr -> str .)
    LBRACKET        reduce using rule 66 (expr -> str .)
    QUESTIONMARK    reduce using rule 66 (expr -> str .)
    ASSIGN          reduce using rule 66 (expr -> str .)
    PLUS            reduce using rule 66 (expr -> str .)
    MINUS           reduce using rule 66 (expr -> str .)
    TIMES           reduce using rule 66 (expr -> str .)
    DIVIDE          reduce using rule 66 (expr -> str .)
    MOD             reduce using rule 66 (expr -> str .)
    GT              reduce using rule 66 (expr -> str .)
    LT              reduce using rule 66 (expr -> str .)
    EQUAL           reduce using rule 66 (expr -> str .)
    GTE             reduce using rule 66 (expr -> str .)
    LTE             reduce using rule 66 (expr -> str .)
    NOT_EQUAL       reduce using rule 66 (expr -> str .)
    OR              reduce using rule 66 (expr -> str .)
    AND             reduce using rule 66 (expr -> str .)
    COMMA           reduce using rule 66 (expr -> str .)
    RBRACKET        reduce using rule 66 (expr -> str .)
    COLON           reduce using rule 66 (expr -> str .)
    error           reduce using rule 66 (expr -> str .)
    RPAREN          reduce using rule 66 (expr -> str .)
    TO              reduce using rule 66 (expr -> str .)


state 71

    (27) defvar -> VAR . type iden defvar_choice
    (28) defvar -> VAR . error iden defvar_choice
    (67) type -> . INT_TYPE
    (68) type -> . STR_TYPE
    (69) type -> . NULL_TYPE
    (70) type -> . VECTOR_TYPE LT INT_TYPE GT
    (71) type -> . VECTOR_TYPE LT STR_TYPE GT
    (72) type -> . VECTOR_TYPE LT INT_TYPE error
    (73) type -> . VECTOR_TYPE error INT_TYPE GT
    (74) type -> . VECTOR_TYPE error INT_TYPE error
    (75) type -> . VECTOR_TYPE LT STR_TYPE error
    (76) type -> . VECTOR_TYPE error STR_TYPE GT
    (77) type -> . VECTOR_TYPE error STR_TYPE error
    (78) type -> . VECTOR_TYPE LT error GT

    error           shift and go to state 112
    INT_TYPE        shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10
    VECTOR_TYPE     shift and go to state 11

    type                           shift and go to state 111

state 72

    (81) num -> NUMBER .

    SEMICOLON       reduce using rule 81 (num -> NUMBER .)
    LBRACKET        reduce using rule 81 (num -> NUMBER .)
    QUESTIONMARK    reduce using rule 81 (num -> NUMBER .)
    ASSIGN          reduce using rule 81 (num -> NUMBER .)
    PLUS            reduce using rule 81 (num -> NUMBER .)
    MINUS           reduce using rule 81 (num -> NUMBER .)
    TIMES           reduce using rule 81 (num -> NUMBER .)
    DIVIDE          reduce using rule 81 (num -> NUMBER .)
    MOD             reduce using rule 81 (num -> NUMBER .)
    GT              reduce using rule 81 (num -> NUMBER .)
    LT              reduce using rule 81 (num -> NUMBER .)
    EQUAL           reduce using rule 81 (num -> NUMBER .)
    GTE             reduce using rule 81 (num -> NUMBER .)
    LTE             reduce using rule 81 (num -> NUMBER .)
    NOT_EQUAL       reduce using rule 81 (num -> NUMBER .)
    OR              reduce using rule 81 (num -> NUMBER .)
    AND             reduce using rule 81 (num -> NUMBER .)
    COMMA           reduce using rule 81 (num -> NUMBER .)
    RBRACKET        reduce using rule 81 (num -> NUMBER .)
    COLON           reduce using rule 81 (num -> NUMBER .)
    error           reduce using rule 81 (num -> NUMBER .)
    RPAREN          reduce using rule 81 (num -> NUMBER .)
    TO              reduce using rule 81 (num -> NUMBER .)


state 73

    (80) str -> STRING .

    SEMICOLON       reduce using rule 80 (str -> STRING .)
    LBRACKET        reduce using rule 80 (str -> STRING .)
    QUESTIONMARK    reduce using rule 80 (str -> STRING .)
    ASSIGN          reduce using rule 80 (str -> STRING .)
    PLUS            reduce using rule 80 (str -> STRING .)
    MINUS           reduce using rule 80 (str -> STRING .)
    TIMES           reduce using rule 80 (str -> STRING .)
    DIVIDE          reduce using rule 80 (str -> STRING .)
    MOD             reduce using rule 80 (str -> STRING .)
    GT              reduce using rule 80 (str -> STRING .)
    LT              reduce using rule 80 (str -> STRING .)
    EQUAL           reduce using rule 80 (str -> STRING .)
    GTE             reduce using rule 80 (str -> STRING .)
    LTE             reduce using rule 80 (str -> STRING .)
    NOT_EQUAL       reduce using rule 80 (str -> STRING .)
    OR              reduce using rule 80 (str -> STRING .)
    AND             reduce using rule 80 (str -> STRING .)
    COMMA           reduce using rule 80 (str -> STRING .)
    RBRACKET        reduce using rule 80 (str -> STRING .)
    COLON           reduce using rule 80 (str -> STRING .)
    error           reduce using rule 80 (str -> STRING .)
    RPAREN          reduce using rule 80 (str -> STRING .)
    TO              reduce using rule 80 (str -> STRING .)


state 74

    (7) func_choice -> RETURN expr . SEMICOLON
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       shift and go to state 113
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 75

    (35) flist -> error iden COMMA flist .

    RPAREN          reduce using rule 35 (flist -> error iden COMMA flist .)


state 76

    (25) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 114


state 77

    (6) func_choice -> LBRACE body RBRACE .

    DEF             reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    $end            reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    error           reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    IF              reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    WHILE           reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    FOR             reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    RETURN          reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    LBRACKET        reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    NOT             reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    PLUS            reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    MINUS           reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    VAR             reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    IDENTIFIER      reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    NUMBER          reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    STRING          reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 6 (func_choice -> LBRACE body RBRACE .)
    ELSE            reduce using rule 6 (func_choice -> LBRACE body RBRACE .)


state 78

    (9) body -> stmt body .

    RBRACE          reduce using rule 9 (body -> stmt body .)


state 79

    (10) body -> error body .

    RBRACE          reduce using rule 10 (body -> error body .)


state 80

    (12) stmt -> error SEMICOLON .

    error           reduce using rule 12 (stmt -> error SEMICOLON .)
    IF              reduce using rule 12 (stmt -> error SEMICOLON .)
    WHILE           reduce using rule 12 (stmt -> error SEMICOLON .)
    FOR             reduce using rule 12 (stmt -> error SEMICOLON .)
    RETURN          reduce using rule 12 (stmt -> error SEMICOLON .)
    LBRACE          reduce using rule 12 (stmt -> error SEMICOLON .)
    LBRACKET        reduce using rule 12 (stmt -> error SEMICOLON .)
    NOT             reduce using rule 12 (stmt -> error SEMICOLON .)
    PLUS            reduce using rule 12 (stmt -> error SEMICOLON .)
    MINUS           reduce using rule 12 (stmt -> error SEMICOLON .)
    VAR             reduce using rule 12 (stmt -> error SEMICOLON .)
    DEF             reduce using rule 12 (stmt -> error SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (stmt -> error SEMICOLON .)
    NUMBER          reduce using rule 12 (stmt -> error SEMICOLON .)
    STRING          reduce using rule 12 (stmt -> error SEMICOLON .)
    RBRACE          reduce using rule 12 (stmt -> error SEMICOLON .)
    ELSE            reduce using rule 12 (stmt -> error SEMICOLON .)


state 81

    (11) stmt -> expr SEMICOLON .

    error           reduce using rule 11 (stmt -> expr SEMICOLON .)
    IF              reduce using rule 11 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 11 (stmt -> expr SEMICOLON .)
    FOR             reduce using rule 11 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 11 (stmt -> expr SEMICOLON .)
    LBRACE          reduce using rule 11 (stmt -> expr SEMICOLON .)
    LBRACKET        reduce using rule 11 (stmt -> expr SEMICOLON .)
    NOT             reduce using rule 11 (stmt -> expr SEMICOLON .)
    PLUS            reduce using rule 11 (stmt -> expr SEMICOLON .)
    MINUS           reduce using rule 11 (stmt -> expr SEMICOLON .)
    VAR             reduce using rule 11 (stmt -> expr SEMICOLON .)
    DEF             reduce using rule 11 (stmt -> expr SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 11 (stmt -> expr SEMICOLON .)
    STRING          reduce using rule 11 (stmt -> expr SEMICOLON .)
    RBRACE          reduce using rule 11 (stmt -> expr SEMICOLON .)
    ELSE            reduce using rule 11 (stmt -> expr SEMICOLON .)


state 82

    (39) expr -> expr LBRACKET . expr RBRACKET
    (40) expr -> expr LBRACKET . error RBRACKET
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 116
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 115
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 83

    (43) expr -> expr QUESTIONMARK . expr COLON expr
    (44) expr -> expr QUESTIONMARK . expr error expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 117
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 84

    (45) expr -> expr ASSIGN . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 118
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 85

    (46) expr -> expr PLUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 119
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 86

    (47) expr -> expr MINUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 120
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 87

    (48) expr -> expr TIMES . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 121
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 88

    (49) expr -> expr DIVIDE . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 122
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 89

    (50) expr -> expr MOD . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 123
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 90

    (51) expr -> expr GT . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 124
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 91

    (52) expr -> expr LT . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 125
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 92

    (53) expr -> expr EQUAL . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 126
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 93

    (54) expr -> expr GTE . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 127
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 94

    (55) expr -> expr LTE . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 128
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 95

    (56) expr -> expr NOT_EQUAL . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 129
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 96

    (57) expr -> expr OR . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 130
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 97

    (58) expr -> expr AND . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 131
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 98

    (13) stmt -> defvar SEMICOLON .

    error           reduce using rule 13 (stmt -> defvar SEMICOLON .)
    IF              reduce using rule 13 (stmt -> defvar SEMICOLON .)
    WHILE           reduce using rule 13 (stmt -> defvar SEMICOLON .)
    FOR             reduce using rule 13 (stmt -> defvar SEMICOLON .)
    RETURN          reduce using rule 13 (stmt -> defvar SEMICOLON .)
    LBRACE          reduce using rule 13 (stmt -> defvar SEMICOLON .)
    LBRACKET        reduce using rule 13 (stmt -> defvar SEMICOLON .)
    NOT             reduce using rule 13 (stmt -> defvar SEMICOLON .)
    PLUS            reduce using rule 13 (stmt -> defvar SEMICOLON .)
    MINUS           reduce using rule 13 (stmt -> defvar SEMICOLON .)
    VAR             reduce using rule 13 (stmt -> defvar SEMICOLON .)
    DEF             reduce using rule 13 (stmt -> defvar SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (stmt -> defvar SEMICOLON .)
    NUMBER          reduce using rule 13 (stmt -> defvar SEMICOLON .)
    STRING          reduce using rule 13 (stmt -> defvar SEMICOLON .)
    RBRACE          reduce using rule 13 (stmt -> defvar SEMICOLON .)
    ELSE            reduce using rule 13 (stmt -> defvar SEMICOLON .)


state 99

    (14) stmt -> IF LPAREN . expr RPAREN stmt else_choice
    (15) stmt -> IF LPAREN . error RPAREN stmt else_choice
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 133
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 132
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 100

    (18) stmt -> WHILE LPAREN . expr RPAREN stmt
    (19) stmt -> WHILE LPAREN . error RPAREN stmt
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 135
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 134
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 101

    (20) stmt -> FOR LPAREN . iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN . iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> FOR LPAREN . iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> FOR LPAREN . iden ASSIGN expr TO expr RPAREN error
    (79) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 136

state 102

    (63) expr -> iden LPAREN . clist RPAREN
    (64) expr -> iden LPAREN . error RPAREN
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (82) empty -> .
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 138
    RPAREN          reduce using rule 82 (empty -> .)
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    iden                           shift and go to state 62
    clist                          shift and go to state 137
    empty                          shift and go to state 106
    expr                           shift and go to state 107
    num                            shift and go to state 69
    str                            shift and go to state 70

state 103

    (24) stmt -> RETURN expr . SEMICOLON
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       shift and go to state 139
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 104

    (41) expr -> LBRACKET clist . RBRACKET

    RBRACKET        shift and go to state 140


state 105

    (42) expr -> LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 141


state 106

    (36) clist -> empty .

    RBRACKET        reduce using rule 36 (clist -> empty .)
    RPAREN          reduce using rule 36 (clist -> empty .)


state 107

    (37) clist -> expr .
    (38) clist -> expr . COMMA clist
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RBRACKET        reduce using rule 37 (clist -> expr .)
    RPAREN          reduce using rule 37 (clist -> expr .)
    COMMA           shift and go to state 142
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 108

    (60) expr -> PLUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 60 (expr -> PLUS expr .)
    QUESTIONMARK    reduce using rule 60 (expr -> PLUS expr .)
    ASSIGN          reduce using rule 60 (expr -> PLUS expr .)
    PLUS            reduce using rule 60 (expr -> PLUS expr .)
    MINUS           reduce using rule 60 (expr -> PLUS expr .)
    GT              reduce using rule 60 (expr -> PLUS expr .)
    LT              reduce using rule 60 (expr -> PLUS expr .)
    EQUAL           reduce using rule 60 (expr -> PLUS expr .)
    GTE             reduce using rule 60 (expr -> PLUS expr .)
    LTE             reduce using rule 60 (expr -> PLUS expr .)
    NOT_EQUAL       reduce using rule 60 (expr -> PLUS expr .)
    OR              reduce using rule 60 (expr -> PLUS expr .)
    AND             reduce using rule 60 (expr -> PLUS expr .)
    COMMA           reduce using rule 60 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 60 (expr -> PLUS expr .)
    COLON           reduce using rule 60 (expr -> PLUS expr .)
    error           reduce using rule 60 (expr -> PLUS expr .)
    RPAREN          reduce using rule 60 (expr -> PLUS expr .)
    TO              reduce using rule 60 (expr -> PLUS expr .)
    LBRACKET        shift and go to state 82
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 109

    (61) expr -> MINUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 61 (expr -> MINUS expr .)
    QUESTIONMARK    reduce using rule 61 (expr -> MINUS expr .)
    ASSIGN          reduce using rule 61 (expr -> MINUS expr .)
    PLUS            reduce using rule 61 (expr -> MINUS expr .)
    MINUS           reduce using rule 61 (expr -> MINUS expr .)
    GT              reduce using rule 61 (expr -> MINUS expr .)
    LT              reduce using rule 61 (expr -> MINUS expr .)
    EQUAL           reduce using rule 61 (expr -> MINUS expr .)
    GTE             reduce using rule 61 (expr -> MINUS expr .)
    LTE             reduce using rule 61 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 61 (expr -> MINUS expr .)
    OR              reduce using rule 61 (expr -> MINUS expr .)
    AND             reduce using rule 61 (expr -> MINUS expr .)
    COMMA           reduce using rule 61 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 61 (expr -> MINUS expr .)
    COLON           reduce using rule 61 (expr -> MINUS expr .)
    error           reduce using rule 61 (expr -> MINUS expr .)
    RPAREN          reduce using rule 61 (expr -> MINUS expr .)
    TO              reduce using rule 61 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 82
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 110

    (59) expr -> NOT expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 59 (expr -> NOT expr .)
    GT              reduce using rule 59 (expr -> NOT expr .)
    LT              reduce using rule 59 (expr -> NOT expr .)
    EQUAL           reduce using rule 59 (expr -> NOT expr .)
    GTE             reduce using rule 59 (expr -> NOT expr .)
    LTE             reduce using rule 59 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 59 (expr -> NOT expr .)
    OR              reduce using rule 59 (expr -> NOT expr .)
    AND             reduce using rule 59 (expr -> NOT expr .)
    COMMA           reduce using rule 59 (expr -> NOT expr .)
    RBRACKET        reduce using rule 59 (expr -> NOT expr .)
    COLON           reduce using rule 59 (expr -> NOT expr .)
    error           reduce using rule 59 (expr -> NOT expr .)
    RPAREN          reduce using rule 59 (expr -> NOT expr .)
    TO              reduce using rule 59 (expr -> NOT expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 59 (expr -> NOT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 59 (expr -> NOT expr .) ]
  ! ASSIGN          [ reduce using rule 59 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 59 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 59 (expr -> NOT expr .) ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 111

    (27) defvar -> VAR type . iden defvar_choice
    (79) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 143

state 112

    (28) defvar -> VAR error . iden defvar_choice
    (79) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    iden                           shift and go to state 144

state 113

    (7) func_choice -> RETURN expr SEMICOLON .

    DEF             reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    $end            reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    error           reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    IF              reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    LBRACKET        reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    NOT             reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    VAR             reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 7 (func_choice -> RETURN expr SEMICOLON .)


state 114

    (25) stmt -> LBRACE body RBRACE .

    error           reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    IF              reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    WHILE           reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    LBRACKET        reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    PLUS            reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    MINUS           reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    VAR             reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    DEF             reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    IDENTIFIER      reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    NUMBER          reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    STRING          reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 25 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 25 (stmt -> LBRACE body RBRACE .)


state 115

    (39) expr -> expr LBRACKET expr . RBRACKET
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RBRACKET        shift and go to state 145
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 116

    (40) expr -> expr LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 146


state 117

    (43) expr -> expr QUESTIONMARK expr . COLON expr
    (44) expr -> expr QUESTIONMARK expr . error expr
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    COLON           shift and go to state 147
    error           shift and go to state 148
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 118

    (45) expr -> expr ASSIGN expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 45 (expr -> expr ASSIGN expr .)
    QUESTIONMARK    reduce using rule 45 (expr -> expr ASSIGN expr .)
    ASSIGN          reduce using rule 45 (expr -> expr ASSIGN expr .)
    GT              reduce using rule 45 (expr -> expr ASSIGN expr .)
    LT              reduce using rule 45 (expr -> expr ASSIGN expr .)
    EQUAL           reduce using rule 45 (expr -> expr ASSIGN expr .)
    GTE             reduce using rule 45 (expr -> expr ASSIGN expr .)
    LTE             reduce using rule 45 (expr -> expr ASSIGN expr .)
    NOT_EQUAL       reduce using rule 45 (expr -> expr ASSIGN expr .)
    OR              reduce using rule 45 (expr -> expr ASSIGN expr .)
    AND             reduce using rule 45 (expr -> expr ASSIGN expr .)
    COMMA           reduce using rule 45 (expr -> expr ASSIGN expr .)
    RBRACKET        reduce using rule 45 (expr -> expr ASSIGN expr .)
    COLON           reduce using rule 45 (expr -> expr ASSIGN expr .)
    error           reduce using rule 45 (expr -> expr ASSIGN expr .)
    RPAREN          reduce using rule 45 (expr -> expr ASSIGN expr .)
    TO              reduce using rule 45 (expr -> expr ASSIGN expr .)
    LBRACKET        shift and go to state 82
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! MOD             [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 119

    (46) expr -> expr PLUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 46 (expr -> expr PLUS expr .)
    QUESTIONMARK    reduce using rule 46 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 46 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 46 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 46 (expr -> expr PLUS expr .)
    GT              reduce using rule 46 (expr -> expr PLUS expr .)
    LT              reduce using rule 46 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 46 (expr -> expr PLUS expr .)
    GTE             reduce using rule 46 (expr -> expr PLUS expr .)
    LTE             reduce using rule 46 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 46 (expr -> expr PLUS expr .)
    OR              reduce using rule 46 (expr -> expr PLUS expr .)
    AND             reduce using rule 46 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 46 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 46 (expr -> expr PLUS expr .)
    COLON           reduce using rule 46 (expr -> expr PLUS expr .)
    error           reduce using rule 46 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 46 (expr -> expr PLUS expr .)
    TO              reduce using rule 46 (expr -> expr PLUS expr .)
    LBRACKET        shift and go to state 82
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 120

    (47) expr -> expr MINUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 47 (expr -> expr MINUS expr .)
    QUESTIONMARK    reduce using rule 47 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 47 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 47 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 47 (expr -> expr MINUS expr .)
    GT              reduce using rule 47 (expr -> expr MINUS expr .)
    LT              reduce using rule 47 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 47 (expr -> expr MINUS expr .)
    GTE             reduce using rule 47 (expr -> expr MINUS expr .)
    LTE             reduce using rule 47 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 47 (expr -> expr MINUS expr .)
    OR              reduce using rule 47 (expr -> expr MINUS expr .)
    AND             reduce using rule 47 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 47 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 47 (expr -> expr MINUS expr .)
    COLON           reduce using rule 47 (expr -> expr MINUS expr .)
    error           reduce using rule 47 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 47 (expr -> expr MINUS expr .)
    TO              reduce using rule 47 (expr -> expr MINUS expr .)
    LBRACKET        shift and go to state 82
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 121

    (48) expr -> expr TIMES expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 48 (expr -> expr TIMES expr .)
    QUESTIONMARK    reduce using rule 48 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 48 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 48 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 48 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 48 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 48 (expr -> expr TIMES expr .)
    MOD             reduce using rule 48 (expr -> expr TIMES expr .)
    GT              reduce using rule 48 (expr -> expr TIMES expr .)
    LT              reduce using rule 48 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 48 (expr -> expr TIMES expr .)
    GTE             reduce using rule 48 (expr -> expr TIMES expr .)
    LTE             reduce using rule 48 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 48 (expr -> expr TIMES expr .)
    OR              reduce using rule 48 (expr -> expr TIMES expr .)
    AND             reduce using rule 48 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 48 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 48 (expr -> expr TIMES expr .)
    COLON           reduce using rule 48 (expr -> expr TIMES expr .)
    error           reduce using rule 48 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 48 (expr -> expr TIMES expr .)
    TO              reduce using rule 48 (expr -> expr TIMES expr .)
    LBRACKET        shift and go to state 82

  ! LBRACKET        [ reduce using rule 48 (expr -> expr TIMES expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! MOD             [ shift and go to state 89 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 122

    (49) expr -> expr DIVIDE expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 49 (expr -> expr DIVIDE expr .)
    QUESTIONMARK    reduce using rule 49 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 49 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 49 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 49 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 49 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 49 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 49 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 49 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 49 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 49 (expr -> expr DIVIDE expr .)
    GTE             reduce using rule 49 (expr -> expr DIVIDE expr .)
    LTE             reduce using rule 49 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 49 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 49 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 49 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 49 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 49 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 49 (expr -> expr DIVIDE expr .)
    error           reduce using rule 49 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 49 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 49 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 82

  ! LBRACKET        [ reduce using rule 49 (expr -> expr DIVIDE expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! MOD             [ shift and go to state 89 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 123

    (50) expr -> expr MOD expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 50 (expr -> expr MOD expr .)
    QUESTIONMARK    reduce using rule 50 (expr -> expr MOD expr .)
    ASSIGN          reduce using rule 50 (expr -> expr MOD expr .)
    PLUS            reduce using rule 50 (expr -> expr MOD expr .)
    MINUS           reduce using rule 50 (expr -> expr MOD expr .)
    TIMES           reduce using rule 50 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 50 (expr -> expr MOD expr .)
    MOD             reduce using rule 50 (expr -> expr MOD expr .)
    GT              reduce using rule 50 (expr -> expr MOD expr .)
    LT              reduce using rule 50 (expr -> expr MOD expr .)
    EQUAL           reduce using rule 50 (expr -> expr MOD expr .)
    GTE             reduce using rule 50 (expr -> expr MOD expr .)
    LTE             reduce using rule 50 (expr -> expr MOD expr .)
    NOT_EQUAL       reduce using rule 50 (expr -> expr MOD expr .)
    OR              reduce using rule 50 (expr -> expr MOD expr .)
    AND             reduce using rule 50 (expr -> expr MOD expr .)
    COMMA           reduce using rule 50 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 50 (expr -> expr MOD expr .)
    COLON           reduce using rule 50 (expr -> expr MOD expr .)
    error           reduce using rule 50 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 50 (expr -> expr MOD expr .)
    TO              reduce using rule 50 (expr -> expr MOD expr .)
    LBRACKET        shift and go to state 82

  ! LBRACKET        [ reduce using rule 50 (expr -> expr MOD expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! MOD             [ shift and go to state 89 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 124

    (51) expr -> expr GT expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 51 (expr -> expr GT expr .)
    GT              reduce using rule 51 (expr -> expr GT expr .)
    LT              reduce using rule 51 (expr -> expr GT expr .)
    EQUAL           reduce using rule 51 (expr -> expr GT expr .)
    GTE             reduce using rule 51 (expr -> expr GT expr .)
    LTE             reduce using rule 51 (expr -> expr GT expr .)
    NOT_EQUAL       reduce using rule 51 (expr -> expr GT expr .)
    OR              reduce using rule 51 (expr -> expr GT expr .)
    AND             reduce using rule 51 (expr -> expr GT expr .)
    COMMA           reduce using rule 51 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 51 (expr -> expr GT expr .)
    COLON           reduce using rule 51 (expr -> expr GT expr .)
    error           reduce using rule 51 (expr -> expr GT expr .)
    RPAREN          reduce using rule 51 (expr -> expr GT expr .)
    TO              reduce using rule 51 (expr -> expr GT expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! ASSIGN          [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 125

    (52) expr -> expr LT expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 52 (expr -> expr LT expr .)
    GT              reduce using rule 52 (expr -> expr LT expr .)
    LT              reduce using rule 52 (expr -> expr LT expr .)
    EQUAL           reduce using rule 52 (expr -> expr LT expr .)
    GTE             reduce using rule 52 (expr -> expr LT expr .)
    LTE             reduce using rule 52 (expr -> expr LT expr .)
    NOT_EQUAL       reduce using rule 52 (expr -> expr LT expr .)
    OR              reduce using rule 52 (expr -> expr LT expr .)
    AND             reduce using rule 52 (expr -> expr LT expr .)
    COMMA           reduce using rule 52 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 52 (expr -> expr LT expr .)
    COLON           reduce using rule 52 (expr -> expr LT expr .)
    error           reduce using rule 52 (expr -> expr LT expr .)
    RPAREN          reduce using rule 52 (expr -> expr LT expr .)
    TO              reduce using rule 52 (expr -> expr LT expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! ASSIGN          [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 126

    (53) expr -> expr EQUAL expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 53 (expr -> expr EQUAL expr .)
    GT              reduce using rule 53 (expr -> expr EQUAL expr .)
    LT              reduce using rule 53 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 53 (expr -> expr EQUAL expr .)
    GTE             reduce using rule 53 (expr -> expr EQUAL expr .)
    LTE             reduce using rule 53 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 53 (expr -> expr EQUAL expr .)
    OR              reduce using rule 53 (expr -> expr EQUAL expr .)
    AND             reduce using rule 53 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 53 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 53 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 53 (expr -> expr EQUAL expr .)
    error           reduce using rule 53 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 53 (expr -> expr EQUAL expr .)
    TO              reduce using rule 53 (expr -> expr EQUAL expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! QUESTIONMARK    [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! ASSIGN          [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! MOD             [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 127

    (54) expr -> expr GTE expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 54 (expr -> expr GTE expr .)
    GT              reduce using rule 54 (expr -> expr GTE expr .)
    LT              reduce using rule 54 (expr -> expr GTE expr .)
    EQUAL           reduce using rule 54 (expr -> expr GTE expr .)
    GTE             reduce using rule 54 (expr -> expr GTE expr .)
    LTE             reduce using rule 54 (expr -> expr GTE expr .)
    NOT_EQUAL       reduce using rule 54 (expr -> expr GTE expr .)
    OR              reduce using rule 54 (expr -> expr GTE expr .)
    AND             reduce using rule 54 (expr -> expr GTE expr .)
    COMMA           reduce using rule 54 (expr -> expr GTE expr .)
    RBRACKET        reduce using rule 54 (expr -> expr GTE expr .)
    COLON           reduce using rule 54 (expr -> expr GTE expr .)
    error           reduce using rule 54 (expr -> expr GTE expr .)
    RPAREN          reduce using rule 54 (expr -> expr GTE expr .)
    TO              reduce using rule 54 (expr -> expr GTE expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! QUESTIONMARK    [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! ASSIGN          [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! PLUS            [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 128

    (55) expr -> expr LTE expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 55 (expr -> expr LTE expr .)
    GT              reduce using rule 55 (expr -> expr LTE expr .)
    LT              reduce using rule 55 (expr -> expr LTE expr .)
    EQUAL           reduce using rule 55 (expr -> expr LTE expr .)
    GTE             reduce using rule 55 (expr -> expr LTE expr .)
    LTE             reduce using rule 55 (expr -> expr LTE expr .)
    NOT_EQUAL       reduce using rule 55 (expr -> expr LTE expr .)
    OR              reduce using rule 55 (expr -> expr LTE expr .)
    AND             reduce using rule 55 (expr -> expr LTE expr .)
    COMMA           reduce using rule 55 (expr -> expr LTE expr .)
    RBRACKET        reduce using rule 55 (expr -> expr LTE expr .)
    COLON           reduce using rule 55 (expr -> expr LTE expr .)
    error           reduce using rule 55 (expr -> expr LTE expr .)
    RPAREN          reduce using rule 55 (expr -> expr LTE expr .)
    TO              reduce using rule 55 (expr -> expr LTE expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! QUESTIONMARK    [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! ASSIGN          [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! PLUS            [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 129

    (56) expr -> expr NOT_EQUAL expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    GT              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    LT              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    GTE             reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    LTE             reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    COMMA           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    error           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    TO              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! QUESTIONMARK    [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! ASSIGN          [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 130

    (57) expr -> expr OR expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 57 (expr -> expr OR expr .)
    OR              reduce using rule 57 (expr -> expr OR expr .)
    AND             reduce using rule 57 (expr -> expr OR expr .)
    COMMA           reduce using rule 57 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 57 (expr -> expr OR expr .)
    COLON           reduce using rule 57 (expr -> expr OR expr .)
    error           reduce using rule 57 (expr -> expr OR expr .)
    RPAREN          reduce using rule 57 (expr -> expr OR expr .)
    TO              reduce using rule 57 (expr -> expr OR expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95

  ! LBRACKET        [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! QUESTIONMARK    [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! ASSIGN          [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! GTE             [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! LTE             [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 131

    (58) expr -> expr AND expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 58 (expr -> expr AND expr .)
    OR              reduce using rule 58 (expr -> expr AND expr .)
    AND             reduce using rule 58 (expr -> expr AND expr .)
    COMMA           reduce using rule 58 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 58 (expr -> expr AND expr .)
    COLON           reduce using rule 58 (expr -> expr AND expr .)
    error           reduce using rule 58 (expr -> expr AND expr .)
    RPAREN          reduce using rule 58 (expr -> expr AND expr .)
    TO              reduce using rule 58 (expr -> expr AND expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95

  ! LBRACKET        [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! QUESTIONMARK    [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! ASSIGN          [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! GTE             [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! LTE             [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 132

    (14) stmt -> IF LPAREN expr . RPAREN stmt else_choice
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 149
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 133

    (15) stmt -> IF LPAREN error . RPAREN stmt else_choice

    RPAREN          shift and go to state 150


state 134

    (18) stmt -> WHILE LPAREN expr . RPAREN stmt
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 151
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 135

    (19) stmt -> WHILE LPAREN error . RPAREN stmt

    RPAREN          shift and go to state 152


state 136

    (20) stmt -> FOR LPAREN iden . ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden . ASSIGN error TO expr RPAREN stmt
    (22) stmt -> FOR LPAREN iden . ASSIGN expr TO error RPAREN stmt
    (23) stmt -> FOR LPAREN iden . ASSIGN expr TO expr RPAREN error

    ASSIGN          shift and go to state 153


state 137

    (63) expr -> iden LPAREN clist . RPAREN

    RPAREN          shift and go to state 154


state 138

    (64) expr -> iden LPAREN error . RPAREN

    RPAREN          shift and go to state 155


state 139

    (24) stmt -> RETURN expr SEMICOLON .

    error           reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    IF              reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    LBRACKET        reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    NOT             reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    VAR             reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    DEF             reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 24 (stmt -> RETURN expr SEMICOLON .)


state 140

    (41) expr -> LBRACKET clist RBRACKET .

    SEMICOLON       reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    LBRACKET        reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    QUESTIONMARK    reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    ASSIGN          reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    PLUS            reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    MINUS           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    TIMES           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    DIVIDE          reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    MOD             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    GT              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    LT              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    EQUAL           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    GTE             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    LTE             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    NOT_EQUAL       reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    OR              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    AND             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    COMMA           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    RBRACKET        reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    COLON           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    error           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    RPAREN          reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    TO              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)


state 141

    (42) expr -> LBRACKET error RBRACKET .

    SEMICOLON       reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    LBRACKET        reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    QUESTIONMARK    reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    ASSIGN          reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    PLUS            reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    MINUS           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    TIMES           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    DIVIDE          reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    MOD             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    GT              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    LT              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    EQUAL           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    GTE             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    LTE             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    NOT_EQUAL       reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    OR              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    AND             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    COMMA           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    COLON           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    error           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    RPAREN          reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    TO              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)


state 142

    (38) clist -> expr COMMA . clist
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (82) empty -> .
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    RBRACKET        reduce using rule 82 (empty -> .)
    RPAREN          reduce using rule 82 (empty -> .)
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 107
    clist                          shift and go to state 156
    empty                          shift and go to state 106
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 143

    (27) defvar -> VAR type iden . defvar_choice
    (29) defvar_choice -> . empty
    (30) defvar_choice -> . ASSIGN expr
    (82) empty -> .

    ASSIGN          shift and go to state 159
    SEMICOLON       reduce using rule 82 (empty -> .)

    defvar_choice                  shift and go to state 157
    empty                          shift and go to state 158

state 144

    (28) defvar -> VAR error iden . defvar_choice
    (29) defvar_choice -> . empty
    (30) defvar_choice -> . ASSIGN expr
    (82) empty -> .

    ASSIGN          shift and go to state 159
    SEMICOLON       reduce using rule 82 (empty -> .)

    defvar_choice                  shift and go to state 160
    empty                          shift and go to state 158

state 145

    (39) expr -> expr LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    QUESTIONMARK    reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    GTE             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    LTE             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    error           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    TO              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)


state 146

    (40) expr -> expr LBRACKET error RBRACKET .

    SEMICOLON       reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    LBRACKET        reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    QUESTIONMARK    reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    ASSIGN          reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    PLUS            reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    MINUS           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    TIMES           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    DIVIDE          reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    MOD             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    GT              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    LT              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    EQUAL           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    GTE             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    LTE             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    NOT_EQUAL       reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    OR              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    AND             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    COMMA           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    COLON           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    error           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    RPAREN          reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    TO              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)


state 147

    (43) expr -> expr QUESTIONMARK expr COLON . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 161
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 148

    (44) expr -> expr QUESTIONMARK expr error . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 162
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 149

    (14) stmt -> IF LPAREN expr RPAREN . stmt else_choice
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 164
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 57
    stmt                           shift and go to state 163
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 150

    (15) stmt -> IF LPAREN error RPAREN . stmt else_choice
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 164
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    stmt                           shift and go to state 165
    expr                           shift and go to state 57
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 151

    (18) stmt -> WHILE LPAREN expr RPAREN . stmt
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 164
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 57
    stmt                           shift and go to state 166
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 152

    (19) stmt -> WHILE LPAREN error RPAREN . stmt
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 164
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    stmt                           shift and go to state 167
    expr                           shift and go to state 57
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 153

    (20) stmt -> FOR LPAREN iden ASSIGN . expr TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden ASSIGN . error TO expr RPAREN stmt
    (22) stmt -> FOR LPAREN iden ASSIGN . expr TO error RPAREN stmt
    (23) stmt -> FOR LPAREN iden ASSIGN . expr TO expr RPAREN error
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 169
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    iden                           shift and go to state 62
    expr                           shift and go to state 168
    num                            shift and go to state 69
    str                            shift and go to state 70

state 154

    (63) expr -> iden LPAREN clist RPAREN .

    SEMICOLON       reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    LBRACKET        reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    QUESTIONMARK    reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    ASSIGN          reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    PLUS            reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    MINUS           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    TIMES           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    MOD             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    GT              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    LT              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    EQUAL           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    GTE             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    LTE             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    OR              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    AND             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    COMMA           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    RBRACKET        reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    COLON           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    error           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    RPAREN          reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    TO              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)


state 155

    (64) expr -> iden LPAREN error RPAREN .

    SEMICOLON       reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    LBRACKET        reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    QUESTIONMARK    reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    ASSIGN          reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    PLUS            reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    MINUS           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    TIMES           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    DIVIDE          reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    MOD             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    GT              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    LT              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    EQUAL           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    GTE             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    LTE             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    NOT_EQUAL       reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    OR              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    AND             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    COMMA           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    RBRACKET        reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    COLON           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    error           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    RPAREN          reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    TO              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)


state 156

    (38) clist -> expr COMMA clist .

    RBRACKET        reduce using rule 38 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 38 (clist -> expr COMMA clist .)


state 157

    (27) defvar -> VAR type iden defvar_choice .

    SEMICOLON       reduce using rule 27 (defvar -> VAR type iden defvar_choice .)


state 158

    (29) defvar_choice -> empty .

    SEMICOLON       reduce using rule 29 (defvar_choice -> empty .)


state 159

    (30) defvar_choice -> ASSIGN . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    expr                           shift and go to state 170
    iden                           shift and go to state 62
    num                            shift and go to state 69
    str                            shift and go to state 70

state 160

    (28) defvar -> VAR error iden defvar_choice .

    SEMICOLON       reduce using rule 28 (defvar -> VAR error iden defvar_choice .)


state 161

    (43) expr -> expr QUESTIONMARK expr COLON expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    QUESTIONMARK    reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    ASSIGN          reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    GT              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    LT              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    EQUAL           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    GTE             reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    LTE             reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    NOT_EQUAL       reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    OR              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    AND             reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    COMMA           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    RBRACKET        reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    COLON           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    error           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    RPAREN          reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    TO              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    LBRACKET        shift and go to state 82
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89

  ! LBRACKET        [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! QUESTIONMARK    [ shift and go to state 83 ]
  ! ASSIGN          [ shift and go to state 84 ]
  ! GT              [ shift and go to state 90 ]
  ! LT              [ shift and go to state 91 ]
  ! EQUAL           [ shift and go to state 92 ]
  ! GTE             [ shift and go to state 93 ]
  ! LTE             [ shift and go to state 94 ]
  ! NOT_EQUAL       [ shift and go to state 95 ]
  ! OR              [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]


state 162

    (44) expr -> expr QUESTIONMARK expr error expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    COMMA           reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    RBRACKET        reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    COLON           reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    error           reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    RPAREN          reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    TO              reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97

  ! LBRACKET        [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! QUESTIONMARK    [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! ASSIGN          [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! PLUS            [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! TIMES           [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! MOD             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! GT              [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! LT              [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! EQUAL           [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! GTE             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! LTE             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! NOT_EQUAL       [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! OR              [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! AND             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]


state 163

    (14) stmt -> IF LPAREN expr RPAREN stmt . else_choice
    (16) else_choice -> . empty
    (17) else_choice -> . ELSE stmt
    (82) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 173
    error           reduce using rule 82 (empty -> .)
    IF              reduce using rule 82 (empty -> .)
    WHILE           reduce using rule 82 (empty -> .)
    FOR             reduce using rule 82 (empty -> .)
    RETURN          reduce using rule 82 (empty -> .)
    LBRACE          reduce using rule 82 (empty -> .)
    LBRACKET        reduce using rule 82 (empty -> .)
    NOT             reduce using rule 82 (empty -> .)
    PLUS            reduce using rule 82 (empty -> .)
    MINUS           reduce using rule 82 (empty -> .)
    VAR             reduce using rule 82 (empty -> .)
    DEF             reduce using rule 82 (empty -> .)
    IDENTIFIER      reduce using rule 82 (empty -> .)
    NUMBER          reduce using rule 82 (empty -> .)
    STRING          reduce using rule 82 (empty -> .)
    RBRACE          reduce using rule 82 (empty -> .)

  ! ELSE            [ reduce using rule 82 (empty -> .) ]

    else_choice                    shift and go to state 171
    empty                          shift and go to state 172

state 164

    (12) stmt -> error . SEMICOLON

    SEMICOLON       shift and go to state 80


state 165

    (15) stmt -> IF LPAREN error RPAREN stmt . else_choice
    (16) else_choice -> . empty
    (17) else_choice -> . ELSE stmt
    (82) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 173
    error           reduce using rule 82 (empty -> .)
    IF              reduce using rule 82 (empty -> .)
    WHILE           reduce using rule 82 (empty -> .)
    FOR             reduce using rule 82 (empty -> .)
    RETURN          reduce using rule 82 (empty -> .)
    LBRACE          reduce using rule 82 (empty -> .)
    LBRACKET        reduce using rule 82 (empty -> .)
    NOT             reduce using rule 82 (empty -> .)
    PLUS            reduce using rule 82 (empty -> .)
    MINUS           reduce using rule 82 (empty -> .)
    VAR             reduce using rule 82 (empty -> .)
    DEF             reduce using rule 82 (empty -> .)
    IDENTIFIER      reduce using rule 82 (empty -> .)
    NUMBER          reduce using rule 82 (empty -> .)
    STRING          reduce using rule 82 (empty -> .)
    RBRACE          reduce using rule 82 (empty -> .)

  ! ELSE            [ reduce using rule 82 (empty -> .) ]

    else_choice                    shift and go to state 174
    empty                          shift and go to state 172

state 166

    (18) stmt -> WHILE LPAREN expr RPAREN stmt .

    error           reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACKET        reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    PLUS            reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DEF             reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 18 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 167

    (19) stmt -> WHILE LPAREN error RPAREN stmt .

    error           reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    IF              reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    WHILE           reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    FOR             reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    RETURN          reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    LBRACE          reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    LBRACKET        reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    NOT             reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    PLUS            reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    MINUS           reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    VAR             reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    DEF             reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    IDENTIFIER      reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    NUMBER          reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    STRING          reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    RBRACE          reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)
    ELSE            reduce using rule 19 (stmt -> WHILE LPAREN error RPAREN stmt .)


state 168

    (20) stmt -> FOR LPAREN iden ASSIGN expr . TO expr RPAREN stmt
    (22) stmt -> FOR LPAREN iden ASSIGN expr . TO error RPAREN stmt
    (23) stmt -> FOR LPAREN iden ASSIGN expr . TO expr RPAREN error
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    TO              shift and go to state 175
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 169

    (21) stmt -> FOR LPAREN iden ASSIGN error . TO expr RPAREN stmt

    TO              shift and go to state 176


state 170

    (30) defvar_choice -> ASSIGN expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 30 (defvar_choice -> ASSIGN expr .)
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 171

    (14) stmt -> IF LPAREN expr RPAREN stmt else_choice .

    error           reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IF              reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    WHILE           reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    FOR             reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RETURN          reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACE          reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACKET        reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NOT             reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    PLUS            reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    MINUS           reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    VAR             reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    DEF             reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IDENTIFIER      reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NUMBER          reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    STRING          reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RBRACE          reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    ELSE            reduce using rule 14 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)


state 172

    (16) else_choice -> empty .

    ELSE            reduce using rule 16 (else_choice -> empty .)
    error           reduce using rule 16 (else_choice -> empty .)
    IF              reduce using rule 16 (else_choice -> empty .)
    WHILE           reduce using rule 16 (else_choice -> empty .)
    FOR             reduce using rule 16 (else_choice -> empty .)
    RETURN          reduce using rule 16 (else_choice -> empty .)
    LBRACE          reduce using rule 16 (else_choice -> empty .)
    LBRACKET        reduce using rule 16 (else_choice -> empty .)
    NOT             reduce using rule 16 (else_choice -> empty .)
    PLUS            reduce using rule 16 (else_choice -> empty .)
    MINUS           reduce using rule 16 (else_choice -> empty .)
    VAR             reduce using rule 16 (else_choice -> empty .)
    DEF             reduce using rule 16 (else_choice -> empty .)
    IDENTIFIER      reduce using rule 16 (else_choice -> empty .)
    NUMBER          reduce using rule 16 (else_choice -> empty .)
    STRING          reduce using rule 16 (else_choice -> empty .)
    RBRACE          reduce using rule 16 (else_choice -> empty .)


state 173

    (17) else_choice -> ELSE . stmt
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 164
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    stmt                           shift and go to state 177
    expr                           shift and go to state 57
    defvar                         shift and go to state 58
    iden                           shift and go to state 62
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 174

    (15) stmt -> IF LPAREN error RPAREN stmt else_choice .

    error           reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IF              reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    WHILE           reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    FOR             reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RETURN          reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACE          reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACKET        reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NOT             reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    PLUS            reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    MINUS           reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    VAR             reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    DEF             reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IDENTIFIER      reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NUMBER          reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    STRING          reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RBRACE          reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    ELSE            reduce using rule 15 (stmt -> IF LPAREN error RPAREN stmt else_choice .)


state 175

    (20) stmt -> FOR LPAREN iden ASSIGN expr TO . expr RPAREN stmt
    (22) stmt -> FOR LPAREN iden ASSIGN expr TO . error RPAREN stmt
    (23) stmt -> FOR LPAREN iden ASSIGN expr TO . expr RPAREN error
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 179
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    iden                           shift and go to state 62
    expr                           shift and go to state 178
    num                            shift and go to state 69
    str                            shift and go to state 70

state 176

    (21) stmt -> FOR LPAREN iden ASSIGN error TO . expr RPAREN stmt
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    iden                           shift and go to state 62
    expr                           shift and go to state 180
    num                            shift and go to state 69
    str                            shift and go to state 70

state 177

    (17) else_choice -> ELSE stmt .

    ELSE            reduce using rule 17 (else_choice -> ELSE stmt .)
    error           reduce using rule 17 (else_choice -> ELSE stmt .)
    IF              reduce using rule 17 (else_choice -> ELSE stmt .)
    WHILE           reduce using rule 17 (else_choice -> ELSE stmt .)
    FOR             reduce using rule 17 (else_choice -> ELSE stmt .)
    RETURN          reduce using rule 17 (else_choice -> ELSE stmt .)
    LBRACE          reduce using rule 17 (else_choice -> ELSE stmt .)
    LBRACKET        reduce using rule 17 (else_choice -> ELSE stmt .)
    NOT             reduce using rule 17 (else_choice -> ELSE stmt .)
    PLUS            reduce using rule 17 (else_choice -> ELSE stmt .)
    MINUS           reduce using rule 17 (else_choice -> ELSE stmt .)
    VAR             reduce using rule 17 (else_choice -> ELSE stmt .)
    DEF             reduce using rule 17 (else_choice -> ELSE stmt .)
    IDENTIFIER      reduce using rule 17 (else_choice -> ELSE stmt .)
    NUMBER          reduce using rule 17 (else_choice -> ELSE stmt .)
    STRING          reduce using rule 17 (else_choice -> ELSE stmt .)
    RBRACE          reduce using rule 17 (else_choice -> ELSE stmt .)


state 178

    (20) stmt -> FOR LPAREN iden ASSIGN expr TO expr . RPAREN stmt
    (23) stmt -> FOR LPAREN iden ASSIGN expr TO expr . RPAREN error
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 181
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 179

    (22) stmt -> FOR LPAREN iden ASSIGN expr TO error . RPAREN stmt

    RPAREN          shift and go to state 182


state 180

    (21) stmt -> FOR LPAREN iden ASSIGN error TO expr . RPAREN stmt
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 183
    LBRACKET        shift and go to state 82
    QUESTIONMARK    shift and go to state 83
    ASSIGN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88
    MOD             shift and go to state 89
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQUAL           shift and go to state 92
    GTE             shift and go to state 93
    LTE             shift and go to state 94
    NOT_EQUAL       shift and go to state 95
    OR              shift and go to state 96
    AND             shift and go to state 97


state 181

    (20) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN . stmt
    (23) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN . error
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 185
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    iden                           shift and go to state 62
    expr                           shift and go to state 57
    stmt                           shift and go to state 184
    defvar                         shift and go to state 58
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 182

    (22) stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN . stmt
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 164
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    iden                           shift and go to state 62
    expr                           shift and go to state 57
    stmt                           shift and go to state 186
    defvar                         shift and go to state 58
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 183

    (21) stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN . stmt
    (11) stmt -> . expr SEMICOLON
    (12) stmt -> . error SEMICOLON
    (13) stmt -> . defvar SEMICOLON
    (14) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (15) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (18) stmt -> . WHILE LPAREN expr RPAREN stmt
    (19) stmt -> . WHILE LPAREN error RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (23) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (24) stmt -> . RETURN expr SEMICOLON
    (25) stmt -> . LBRACE body RBRACE
    (26) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (27) defvar -> . VAR type iden defvar_choice
    (28) defvar -> . VAR error iden defvar_choice
    (3) func -> . DEF type iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type iden LPAREN error RPAREN func_choice
    (5) func -> . DEF error iden LPAREN flist RPAREN func_choice
    (79) iden -> . IDENTIFIER
    (81) num -> . NUMBER
    (80) str -> . STRING

    error           shift and go to state 164
    IF              shift and go to state 59
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 63
    LBRACE          shift and go to state 52
    LBRACKET        shift and go to state 65
    NOT             shift and go to state 68
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    VAR             shift and go to state 71
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 13
    NUMBER          shift and go to state 72
    STRING          shift and go to state 73

    iden                           shift and go to state 62
    expr                           shift and go to state 57
    stmt                           shift and go to state 187
    defvar                         shift and go to state 58
    func                           shift and go to state 64
    num                            shift and go to state 69
    str                            shift and go to state 70

state 184

    (20) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .

    error           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    IF              reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    FOR             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    LBRACE          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    NOT             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    VAR             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    DEF             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    STRING          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    RBRACE          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)


state 185

    (23) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .
    (12) stmt -> error . SEMICOLON

    error           reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    IF              reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    WHILE           reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    FOR             reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    RETURN          reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    LBRACE          reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    LBRACKET        reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    NOT             reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    PLUS            reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    MINUS           reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    VAR             reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    DEF             reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    IDENTIFIER      reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    NUMBER          reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    STRING          reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    RBRACE          reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    ELSE            reduce using rule 23 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    SEMICOLON       shift and go to state 80


state 186

    (22) stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .

    error           reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    IF              reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    WHILE           reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    FOR             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    RETURN          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    LBRACE          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    LBRACKET        reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    NOT             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    PLUS            reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    MINUS           reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    VAR             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    DEF             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    IDENTIFIER      reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    NUMBER          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    STRING          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    RBRACE          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    ELSE            reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)


state 187

    (21) stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .

    error           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    IF              reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    WHILE           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    FOR             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    RETURN          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    LBRACE          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    NOT             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    PLUS            reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    MINUS           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    VAR             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    DEF             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    NUMBER          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    STRING          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    RBRACE          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    ELSE            reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 163 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 165 resolved as shift
