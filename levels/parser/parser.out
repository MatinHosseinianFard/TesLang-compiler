Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> prog
Rule 1     prog -> empty
Rule 2     prog -> func prog
Rule 3     func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
Rule 4     func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice
Rule 5     func_choice -> LBRACE body RBRACE
Rule 6     func_choice -> RETURN expr SEMICOLON
Rule 7     body -> empty
Rule 8     body -> stmt body
Rule 9     body -> error body
Rule 10    stmt -> expr SEMICOLON
Rule 11    stmt -> error SEMICOLON
Rule 12    stmt -> defvar SEMICOLON
Rule 13    stmt -> IF LPAREN expr RPAREN stmt else_choice
Rule 14    stmt -> IF LPAREN error RPAREN stmt else_choice
Rule 15    else_choice -> empty
Rule 16    else_choice -> ELSE stmt
Rule 17    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 18    stmt -> WHILE LPAREN error RPAREN stmt
Rule 19    stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
Rule 20    stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
Rule 21    stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
Rule 22    stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error
Rule 23    stmt -> RETURN expr SEMICOLON
Rule 24    stmt -> LBRACE body RBRACE
Rule 25    stmt -> func
Rule 26    defvar -> VAR type vector_type_choice iden defvar_choice
Rule 27    defvar -> VAR error vector_type_choice iden defvar_choice
Rule 28    vector_type_choice -> empty
Rule 29    vector_type_choice -> LT type GT
Rule 30    vector_type_choice -> LT error GT
Rule 31    defvar_choice -> empty
Rule 32    defvar_choice -> ASSIGN expr
Rule 33    flist -> empty
Rule 34    flist -> type vector_type_choice iden
Rule 35    flist -> type vector_type_choice iden COMMA flist
Rule 36    clist -> empty
Rule 37    clist -> expr
Rule 38    clist -> expr COMMA clist
Rule 39    expr -> expr LBRACKET expr RBRACKET
Rule 40    expr -> expr LBRACKET error RBRACKET
Rule 41    expr -> LBRACKET clist RBRACKET
Rule 42    expr -> LBRACKET error RBRACKET
Rule 43    expr -> expr QUESTIONMARK expr COLON expr
Rule 44    expr -> expr QUESTIONMARK expr error expr
Rule 45    expr -> expr ASSIGN expr
Rule 46    expr -> expr PLUS expr
Rule 47    expr -> expr MINUS expr
Rule 48    expr -> expr TIMES expr
Rule 49    expr -> expr DIVIDE expr
Rule 50    expr -> expr MOD expr
Rule 51    expr -> expr GT expr
Rule 52    expr -> expr LT expr
Rule 53    expr -> expr EQUAL expr
Rule 54    expr -> expr GTE expr
Rule 55    expr -> expr LTE expr
Rule 56    expr -> expr NOT_EQUAL expr
Rule 57    expr -> expr OR expr
Rule 58    expr -> expr AND expr
Rule 59    expr -> NOT expr
Rule 60    expr -> PLUS expr
Rule 61    expr -> MINUS expr
Rule 62    expr -> iden
Rule 63    expr -> iden LPAREN clist RPAREN
Rule 64    expr -> iden LPAREN error RPAREN
Rule 65    expr -> num
Rule 66    expr -> str
Rule 67    type -> INT_TYPE
Rule 68    type -> VECTOR_TYPE
Rule 69    type -> STR_TYPE
Rule 70    type -> NULL_TYPE
Rule 71    iden -> IDENTIFIER
Rule 72    str -> STRING
Rule 73    num -> NUMBER
Rule 74    empty -> <empty>

Terminals, with rules where they appear

AND                  : 58
ASSIGN               : 19 20 21 22 32 45
COLON                : 43
COMMA                : 35 38
COMMENT              : 
DEF                  : 3 4
DIVIDE               : 49
ELSE                 : 16
EQUAL                : 53
FOR                  : 19 20 21 22
GT                   : 29 30 51
GTE                  : 54
IDENTIFIER           : 71
IF                   : 13 14
INT_TYPE             : 67
LBRACE               : 5 24
LBRACKET             : 39 40 41 42
LPAREN               : 3 4 13 14 17 18 19 20 21 22 63 64
LT                   : 29 30 52
LTE                  : 55
MINUS                : 47 61
MOD                  : 50
NOT                  : 59
NOT_EQUAL            : 56
NULL_TYPE            : 70
NUMBER               : 73
OR                   : 57
PLUS                 : 46 60
QUESTIONMARK         : 43 44
RBRACE               : 5 24
RBRACKET             : 39 40 41 42
RETURN               : 6 23
RPAREN               : 3 4 13 14 17 18 19 20 21 22 63 64
SEMICOLON            : 6 10 11 12 23
STRING               : 72
STR_TYPE             : 69
TIMES                : 48
TO                   : 19 20 21 22
VAR                  : 26 27
VECTOR_TYPE          : 68
WHILE                : 17 18
error                : 4 9 11 14 18 20 21 22 27 30 40 42 44 64

Nonterminals, with rules where they appear

body                 : 5 8 9 24
clist                : 38 41 63
defvar               : 12
defvar_choice        : 26 27
else_choice          : 13 14
empty                : 1 7 15 28 31 33 36
expr                 : 6 10 13 17 19 19 20 21 22 22 23 32 37 38 39 39 40 43 43 43 44 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 61
flist                : 3 35
func                 : 2 25
func_choice          : 3 4
iden                 : 3 4 19 20 21 22 26 27 34 35 62 63 64
num                  : 65
prog                 : 2 0
stmt                 : 8 13 14 16 17 18 19 20 21
str                  : 66
type                 : 3 4 26 29 34 35
vector_type_choice   : 3 4 26 27 34 35

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (74) empty -> .
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice

    $end            reduce using rule 74 (empty -> .)
    DEF             shift and go to state 4

    prog                           shift and go to state 1
    empty                          shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> empty .

    $end            reduce using rule 1 (prog -> empty .)


state 3

    (2) prog -> func . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (74) empty -> .
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice

    $end            reduce using rule 74 (empty -> .)
    DEF             shift and go to state 4

    func                           shift and go to state 3
    prog                           shift and go to state 5
    empty                          shift and go to state 2

state 4

    (3) func -> DEF . type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> DEF . type vector_type_choice iden LPAREN error RPAREN func_choice
    (67) type -> . INT_TYPE
    (68) type -> . VECTOR_TYPE
    (69) type -> . STR_TYPE
    (70) type -> . NULL_TYPE

    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 6

state 5

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 6

    (3) func -> DEF type . vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> DEF type . vector_type_choice iden LPAREN error RPAREN func_choice
    (28) vector_type_choice -> . empty
    (29) vector_type_choice -> . LT type GT
    (30) vector_type_choice -> . LT error GT
    (74) empty -> .

    LT              shift and go to state 13
    IDENTIFIER      reduce using rule 74 (empty -> .)

    vector_type_choice             shift and go to state 11
    empty                          shift and go to state 12

state 7

    (67) type -> INT_TYPE .

    LT              reduce using rule 67 (type -> INT_TYPE .)
    IDENTIFIER      reduce using rule 67 (type -> INT_TYPE .)
    GT              reduce using rule 67 (type -> INT_TYPE .)


state 8

    (68) type -> VECTOR_TYPE .

    LT              reduce using rule 68 (type -> VECTOR_TYPE .)
    IDENTIFIER      reduce using rule 68 (type -> VECTOR_TYPE .)
    GT              reduce using rule 68 (type -> VECTOR_TYPE .)


state 9

    (69) type -> STR_TYPE .

    LT              reduce using rule 69 (type -> STR_TYPE .)
    IDENTIFIER      reduce using rule 69 (type -> STR_TYPE .)
    GT              reduce using rule 69 (type -> STR_TYPE .)


state 10

    (70) type -> NULL_TYPE .

    LT              reduce using rule 70 (type -> NULL_TYPE .)
    IDENTIFIER      reduce using rule 70 (type -> NULL_TYPE .)
    GT              reduce using rule 70 (type -> NULL_TYPE .)


state 11

    (3) func -> DEF type vector_type_choice . iden LPAREN flist RPAREN func_choice
    (4) func -> DEF type vector_type_choice . iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    iden                           shift and go to state 14

state 12

    (28) vector_type_choice -> empty .

    IDENTIFIER      reduce using rule 28 (vector_type_choice -> empty .)


state 13

    (29) vector_type_choice -> LT . type GT
    (30) vector_type_choice -> LT . error GT
    (67) type -> . INT_TYPE
    (68) type -> . VECTOR_TYPE
    (69) type -> . STR_TYPE
    (70) type -> . NULL_TYPE

    error           shift and go to state 17
    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 16

state 14

    (3) func -> DEF type vector_type_choice iden . LPAREN flist RPAREN func_choice
    (4) func -> DEF type vector_type_choice iden . LPAREN error RPAREN func_choice

    LPAREN          shift and go to state 18


state 15

    (71) iden -> IDENTIFIER .

    LPAREN          reduce using rule 71 (iden -> IDENTIFIER .)
    COMMA           reduce using rule 71 (iden -> IDENTIFIER .)
    RPAREN          reduce using rule 71 (iden -> IDENTIFIER .)
    SEMICOLON       reduce using rule 71 (iden -> IDENTIFIER .)
    LBRACKET        reduce using rule 71 (iden -> IDENTIFIER .)
    QUESTIONMARK    reduce using rule 71 (iden -> IDENTIFIER .)
    ASSIGN          reduce using rule 71 (iden -> IDENTIFIER .)
    PLUS            reduce using rule 71 (iden -> IDENTIFIER .)
    MINUS           reduce using rule 71 (iden -> IDENTIFIER .)
    TIMES           reduce using rule 71 (iden -> IDENTIFIER .)
    DIVIDE          reduce using rule 71 (iden -> IDENTIFIER .)
    MOD             reduce using rule 71 (iden -> IDENTIFIER .)
    GT              reduce using rule 71 (iden -> IDENTIFIER .)
    LT              reduce using rule 71 (iden -> IDENTIFIER .)
    EQUAL           reduce using rule 71 (iden -> IDENTIFIER .)
    GTE             reduce using rule 71 (iden -> IDENTIFIER .)
    LTE             reduce using rule 71 (iden -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 71 (iden -> IDENTIFIER .)
    OR              reduce using rule 71 (iden -> IDENTIFIER .)
    AND             reduce using rule 71 (iden -> IDENTIFIER .)
    RBRACKET        reduce using rule 71 (iden -> IDENTIFIER .)
    COLON           reduce using rule 71 (iden -> IDENTIFIER .)
    error           reduce using rule 71 (iden -> IDENTIFIER .)
    TO              reduce using rule 71 (iden -> IDENTIFIER .)


state 16

    (29) vector_type_choice -> LT type . GT

    GT              shift and go to state 19


state 17

    (30) vector_type_choice -> LT error . GT

    GT              shift and go to state 20


state 18

    (3) func -> DEF type vector_type_choice iden LPAREN . flist RPAREN func_choice
    (4) func -> DEF type vector_type_choice iden LPAREN . error RPAREN func_choice
    (33) flist -> . empty
    (34) flist -> . type vector_type_choice iden
    (35) flist -> . type vector_type_choice iden COMMA flist
    (74) empty -> .
    (67) type -> . INT_TYPE
    (68) type -> . VECTOR_TYPE
    (69) type -> . STR_TYPE
    (70) type -> . NULL_TYPE

    error           shift and go to state 23
    RPAREN          reduce using rule 74 (empty -> .)
    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 21
    flist                          shift and go to state 22
    empty                          shift and go to state 24

state 19

    (29) vector_type_choice -> LT type GT .

    IDENTIFIER      reduce using rule 29 (vector_type_choice -> LT type GT .)


state 20

    (30) vector_type_choice -> LT error GT .

    IDENTIFIER      reduce using rule 30 (vector_type_choice -> LT error GT .)


state 21

    (34) flist -> type . vector_type_choice iden
    (35) flist -> type . vector_type_choice iden COMMA flist
    (28) vector_type_choice -> . empty
    (29) vector_type_choice -> . LT type GT
    (30) vector_type_choice -> . LT error GT
    (74) empty -> .

    LT              shift and go to state 13
    IDENTIFIER      reduce using rule 74 (empty -> .)

    vector_type_choice             shift and go to state 25
    empty                          shift and go to state 12

state 22

    (3) func -> DEF type vector_type_choice iden LPAREN flist . RPAREN func_choice

    RPAREN          shift and go to state 26


state 23

    (4) func -> DEF type vector_type_choice iden LPAREN error . RPAREN func_choice

    RPAREN          shift and go to state 27


state 24

    (33) flist -> empty .

    RPAREN          reduce using rule 33 (flist -> empty .)


state 25

    (34) flist -> type vector_type_choice . iden
    (35) flist -> type vector_type_choice . iden COMMA flist
    (71) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    iden                           shift and go to state 28

state 26

    (3) func -> DEF type vector_type_choice iden LPAREN flist RPAREN . func_choice
    (5) func_choice -> . LBRACE body RBRACE
    (6) func_choice -> . RETURN expr SEMICOLON

    LBRACE          shift and go to state 30
    RETURN          shift and go to state 31

    func_choice                    shift and go to state 29

state 27

    (4) func -> DEF type vector_type_choice iden LPAREN error RPAREN . func_choice
    (5) func_choice -> . LBRACE body RBRACE
    (6) func_choice -> . RETURN expr SEMICOLON

    LBRACE          shift and go to state 30
    RETURN          shift and go to state 31

    func_choice                    shift and go to state 32

state 28

    (34) flist -> type vector_type_choice iden .
    (35) flist -> type vector_type_choice iden . COMMA flist

    RPAREN          reduce using rule 34 (flist -> type vector_type_choice iden .)
    COMMA           shift and go to state 33


state 29

    (3) func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .

    DEF             reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    $end            reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    error           reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    IF              reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    WHILE           reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    FOR             reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    RETURN          reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    LBRACE          reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    LBRACKET        reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    NOT             reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    PLUS            reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    MINUS           reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    VAR             reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    IDENTIFIER      reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    NUMBER          reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    STRING          reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    RBRACE          reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)
    ELSE            reduce using rule 3 (func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice .)


state 30

    (5) func_choice -> LBRACE . body RBRACE
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (74) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 38
    RBRACE          reduce using rule 74 (empty -> .)
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    body                           shift and go to state 35
    empty                          shift and go to state 36
    stmt                           shift and go to state 37
    expr                           shift and go to state 39
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 31

    (6) func_choice -> RETURN . expr SEMICOLON
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 56
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 32

    (4) func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .

    DEF             reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    $end            reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    error           reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    IF              reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    WHILE           reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    FOR             reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    RETURN          reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    LBRACE          reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    LBRACKET        reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    NOT             reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    PLUS            reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    MINUS           reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    VAR             reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    IDENTIFIER      reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    NUMBER          reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    STRING          reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    RBRACE          reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)
    ELSE            reduce using rule 4 (func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice .)


state 33

    (35) flist -> type vector_type_choice iden COMMA . flist
    (33) flist -> . empty
    (34) flist -> . type vector_type_choice iden
    (35) flist -> . type vector_type_choice iden COMMA flist
    (74) empty -> .
    (67) type -> . INT_TYPE
    (68) type -> . VECTOR_TYPE
    (69) type -> . STR_TYPE
    (70) type -> . NULL_TYPE

    RPAREN          reduce using rule 74 (empty -> .)
    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 21
    flist                          shift and go to state 57
    empty                          shift and go to state 24

state 34

    (24) stmt -> LBRACE . body RBRACE
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (74) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 38
    RBRACE          reduce using rule 74 (empty -> .)
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    body                           shift and go to state 58
    empty                          shift and go to state 36
    stmt                           shift and go to state 37
    expr                           shift and go to state 39
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 35

    (5) func_choice -> LBRACE body . RBRACE

    RBRACE          shift and go to state 59


state 36

    (7) body -> empty .

    RBRACE          reduce using rule 7 (body -> empty .)


state 37

    (8) body -> stmt . body
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (74) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 38
    RBRACE          reduce using rule 74 (empty -> .)
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    stmt                           shift and go to state 37
    body                           shift and go to state 60
    empty                          shift and go to state 36
    expr                           shift and go to state 39
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 38

    (9) body -> error . body
    (11) stmt -> error . SEMICOLON
    (7) body -> . empty
    (8) body -> . stmt body
    (9) body -> . error body
    (74) empty -> .
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    SEMICOLON       shift and go to state 62
    error           shift and go to state 38
    RBRACE          reduce using rule 74 (empty -> .)
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    body                           shift and go to state 61
    empty                          shift and go to state 36
    stmt                           shift and go to state 37
    expr                           shift and go to state 39
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 39

    (10) stmt -> expr . SEMICOLON
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       shift and go to state 63
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 40

    (12) stmt -> defvar . SEMICOLON

    SEMICOLON       shift and go to state 80


state 41

    (13) stmt -> IF . LPAREN expr RPAREN stmt else_choice
    (14) stmt -> IF . LPAREN error RPAREN stmt else_choice

    LPAREN          shift and go to state 81


state 42

    (17) stmt -> WHILE . LPAREN expr RPAREN stmt
    (18) stmt -> WHILE . LPAREN error RPAREN stmt

    LPAREN          shift and go to state 82


state 43

    (19) stmt -> FOR . LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> FOR . LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> FOR . LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> FOR . LPAREN iden ASSIGN expr TO expr RPAREN error

    LPAREN          shift and go to state 83


state 44

    (62) expr -> iden .
    (63) expr -> iden . LPAREN clist RPAREN
    (64) expr -> iden . LPAREN error RPAREN

    SEMICOLON       reduce using rule 62 (expr -> iden .)
    LBRACKET        reduce using rule 62 (expr -> iden .)
    QUESTIONMARK    reduce using rule 62 (expr -> iden .)
    ASSIGN          reduce using rule 62 (expr -> iden .)
    PLUS            reduce using rule 62 (expr -> iden .)
    MINUS           reduce using rule 62 (expr -> iden .)
    TIMES           reduce using rule 62 (expr -> iden .)
    DIVIDE          reduce using rule 62 (expr -> iden .)
    MOD             reduce using rule 62 (expr -> iden .)
    GT              reduce using rule 62 (expr -> iden .)
    LT              reduce using rule 62 (expr -> iden .)
    EQUAL           reduce using rule 62 (expr -> iden .)
    GTE             reduce using rule 62 (expr -> iden .)
    LTE             reduce using rule 62 (expr -> iden .)
    NOT_EQUAL       reduce using rule 62 (expr -> iden .)
    OR              reduce using rule 62 (expr -> iden .)
    AND             reduce using rule 62 (expr -> iden .)
    COMMA           reduce using rule 62 (expr -> iden .)
    RBRACKET        reduce using rule 62 (expr -> iden .)
    COLON           reduce using rule 62 (expr -> iden .)
    error           reduce using rule 62 (expr -> iden .)
    RPAREN          reduce using rule 62 (expr -> iden .)
    TO              reduce using rule 62 (expr -> iden .)
    LPAREN          shift and go to state 84


state 45

    (23) stmt -> RETURN . expr SEMICOLON
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 85
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 46

    (25) stmt -> func .

    error           reduce using rule 25 (stmt -> func .)
    IF              reduce using rule 25 (stmt -> func .)
    WHILE           reduce using rule 25 (stmt -> func .)
    FOR             reduce using rule 25 (stmt -> func .)
    RETURN          reduce using rule 25 (stmt -> func .)
    LBRACE          reduce using rule 25 (stmt -> func .)
    LBRACKET        reduce using rule 25 (stmt -> func .)
    NOT             reduce using rule 25 (stmt -> func .)
    PLUS            reduce using rule 25 (stmt -> func .)
    MINUS           reduce using rule 25 (stmt -> func .)
    VAR             reduce using rule 25 (stmt -> func .)
    DEF             reduce using rule 25 (stmt -> func .)
    IDENTIFIER      reduce using rule 25 (stmt -> func .)
    NUMBER          reduce using rule 25 (stmt -> func .)
    STRING          reduce using rule 25 (stmt -> func .)
    RBRACE          reduce using rule 25 (stmt -> func .)
    ELSE            reduce using rule 25 (stmt -> func .)


state 47

    (41) expr -> LBRACKET . clist RBRACKET
    (42) expr -> LBRACKET . error RBRACKET
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (74) empty -> .
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 87
    RBRACKET        reduce using rule 74 (empty -> .)
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    clist                          shift and go to state 86
    empty                          shift and go to state 88
    expr                           shift and go to state 89
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 48

    (60) expr -> PLUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 90
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 49

    (61) expr -> MINUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 91
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 50

    (59) expr -> NOT . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 92
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 51

    (65) expr -> num .

    SEMICOLON       reduce using rule 65 (expr -> num .)
    LBRACKET        reduce using rule 65 (expr -> num .)
    QUESTIONMARK    reduce using rule 65 (expr -> num .)
    ASSIGN          reduce using rule 65 (expr -> num .)
    PLUS            reduce using rule 65 (expr -> num .)
    MINUS           reduce using rule 65 (expr -> num .)
    TIMES           reduce using rule 65 (expr -> num .)
    DIVIDE          reduce using rule 65 (expr -> num .)
    MOD             reduce using rule 65 (expr -> num .)
    GT              reduce using rule 65 (expr -> num .)
    LT              reduce using rule 65 (expr -> num .)
    EQUAL           reduce using rule 65 (expr -> num .)
    GTE             reduce using rule 65 (expr -> num .)
    LTE             reduce using rule 65 (expr -> num .)
    NOT_EQUAL       reduce using rule 65 (expr -> num .)
    OR              reduce using rule 65 (expr -> num .)
    AND             reduce using rule 65 (expr -> num .)
    COMMA           reduce using rule 65 (expr -> num .)
    RBRACKET        reduce using rule 65 (expr -> num .)
    COLON           reduce using rule 65 (expr -> num .)
    error           reduce using rule 65 (expr -> num .)
    RPAREN          reduce using rule 65 (expr -> num .)
    TO              reduce using rule 65 (expr -> num .)


state 52

    (66) expr -> str .

    SEMICOLON       reduce using rule 66 (expr -> str .)
    LBRACKET        reduce using rule 66 (expr -> str .)
    QUESTIONMARK    reduce using rule 66 (expr -> str .)
    ASSIGN          reduce using rule 66 (expr -> str .)
    PLUS            reduce using rule 66 (expr -> str .)
    MINUS           reduce using rule 66 (expr -> str .)
    TIMES           reduce using rule 66 (expr -> str .)
    DIVIDE          reduce using rule 66 (expr -> str .)
    MOD             reduce using rule 66 (expr -> str .)
    GT              reduce using rule 66 (expr -> str .)
    LT              reduce using rule 66 (expr -> str .)
    EQUAL           reduce using rule 66 (expr -> str .)
    GTE             reduce using rule 66 (expr -> str .)
    LTE             reduce using rule 66 (expr -> str .)
    NOT_EQUAL       reduce using rule 66 (expr -> str .)
    OR              reduce using rule 66 (expr -> str .)
    AND             reduce using rule 66 (expr -> str .)
    COMMA           reduce using rule 66 (expr -> str .)
    RBRACKET        reduce using rule 66 (expr -> str .)
    COLON           reduce using rule 66 (expr -> str .)
    error           reduce using rule 66 (expr -> str .)
    RPAREN          reduce using rule 66 (expr -> str .)
    TO              reduce using rule 66 (expr -> str .)


state 53

    (26) defvar -> VAR . type vector_type_choice iden defvar_choice
    (27) defvar -> VAR . error vector_type_choice iden defvar_choice
    (67) type -> . INT_TYPE
    (68) type -> . VECTOR_TYPE
    (69) type -> . STR_TYPE
    (70) type -> . NULL_TYPE

    error           shift and go to state 94
    INT_TYPE        shift and go to state 7
    VECTOR_TYPE     shift and go to state 8
    STR_TYPE        shift and go to state 9
    NULL_TYPE       shift and go to state 10

    type                           shift and go to state 93

state 54

    (73) num -> NUMBER .

    SEMICOLON       reduce using rule 73 (num -> NUMBER .)
    LBRACKET        reduce using rule 73 (num -> NUMBER .)
    QUESTIONMARK    reduce using rule 73 (num -> NUMBER .)
    ASSIGN          reduce using rule 73 (num -> NUMBER .)
    PLUS            reduce using rule 73 (num -> NUMBER .)
    MINUS           reduce using rule 73 (num -> NUMBER .)
    TIMES           reduce using rule 73 (num -> NUMBER .)
    DIVIDE          reduce using rule 73 (num -> NUMBER .)
    MOD             reduce using rule 73 (num -> NUMBER .)
    GT              reduce using rule 73 (num -> NUMBER .)
    LT              reduce using rule 73 (num -> NUMBER .)
    EQUAL           reduce using rule 73 (num -> NUMBER .)
    GTE             reduce using rule 73 (num -> NUMBER .)
    LTE             reduce using rule 73 (num -> NUMBER .)
    NOT_EQUAL       reduce using rule 73 (num -> NUMBER .)
    OR              reduce using rule 73 (num -> NUMBER .)
    AND             reduce using rule 73 (num -> NUMBER .)
    COMMA           reduce using rule 73 (num -> NUMBER .)
    RBRACKET        reduce using rule 73 (num -> NUMBER .)
    COLON           reduce using rule 73 (num -> NUMBER .)
    error           reduce using rule 73 (num -> NUMBER .)
    RPAREN          reduce using rule 73 (num -> NUMBER .)
    TO              reduce using rule 73 (num -> NUMBER .)


state 55

    (72) str -> STRING .

    SEMICOLON       reduce using rule 72 (str -> STRING .)
    LBRACKET        reduce using rule 72 (str -> STRING .)
    QUESTIONMARK    reduce using rule 72 (str -> STRING .)
    ASSIGN          reduce using rule 72 (str -> STRING .)
    PLUS            reduce using rule 72 (str -> STRING .)
    MINUS           reduce using rule 72 (str -> STRING .)
    TIMES           reduce using rule 72 (str -> STRING .)
    DIVIDE          reduce using rule 72 (str -> STRING .)
    MOD             reduce using rule 72 (str -> STRING .)
    GT              reduce using rule 72 (str -> STRING .)
    LT              reduce using rule 72 (str -> STRING .)
    EQUAL           reduce using rule 72 (str -> STRING .)
    GTE             reduce using rule 72 (str -> STRING .)
    LTE             reduce using rule 72 (str -> STRING .)
    NOT_EQUAL       reduce using rule 72 (str -> STRING .)
    OR              reduce using rule 72 (str -> STRING .)
    AND             reduce using rule 72 (str -> STRING .)
    COMMA           reduce using rule 72 (str -> STRING .)
    RBRACKET        reduce using rule 72 (str -> STRING .)
    COLON           reduce using rule 72 (str -> STRING .)
    error           reduce using rule 72 (str -> STRING .)
    RPAREN          reduce using rule 72 (str -> STRING .)
    TO              reduce using rule 72 (str -> STRING .)


state 56

    (6) func_choice -> RETURN expr . SEMICOLON
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       shift and go to state 95
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 57

    (35) flist -> type vector_type_choice iden COMMA flist .

    RPAREN          reduce using rule 35 (flist -> type vector_type_choice iden COMMA flist .)


state 58

    (24) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 96


state 59

    (5) func_choice -> LBRACE body RBRACE .

    DEF             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    $end            reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    error           reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    IF              reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    WHILE           reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    FOR             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    RETURN          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    LBRACKET        reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    NOT             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    PLUS            reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    MINUS           reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    VAR             reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    IDENTIFIER      reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    NUMBER          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    STRING          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 5 (func_choice -> LBRACE body RBRACE .)
    ELSE            reduce using rule 5 (func_choice -> LBRACE body RBRACE .)


state 60

    (8) body -> stmt body .

    RBRACE          reduce using rule 8 (body -> stmt body .)


state 61

    (9) body -> error body .

    RBRACE          reduce using rule 9 (body -> error body .)


state 62

    (11) stmt -> error SEMICOLON .

    error           reduce using rule 11 (stmt -> error SEMICOLON .)
    IF              reduce using rule 11 (stmt -> error SEMICOLON .)
    WHILE           reduce using rule 11 (stmt -> error SEMICOLON .)
    FOR             reduce using rule 11 (stmt -> error SEMICOLON .)
    RETURN          reduce using rule 11 (stmt -> error SEMICOLON .)
    LBRACE          reduce using rule 11 (stmt -> error SEMICOLON .)
    LBRACKET        reduce using rule 11 (stmt -> error SEMICOLON .)
    NOT             reduce using rule 11 (stmt -> error SEMICOLON .)
    PLUS            reduce using rule 11 (stmt -> error SEMICOLON .)
    MINUS           reduce using rule 11 (stmt -> error SEMICOLON .)
    VAR             reduce using rule 11 (stmt -> error SEMICOLON .)
    DEF             reduce using rule 11 (stmt -> error SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (stmt -> error SEMICOLON .)
    NUMBER          reduce using rule 11 (stmt -> error SEMICOLON .)
    STRING          reduce using rule 11 (stmt -> error SEMICOLON .)
    RBRACE          reduce using rule 11 (stmt -> error SEMICOLON .)
    ELSE            reduce using rule 11 (stmt -> error SEMICOLON .)


state 63

    (10) stmt -> expr SEMICOLON .

    error           reduce using rule 10 (stmt -> expr SEMICOLON .)
    IF              reduce using rule 10 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 10 (stmt -> expr SEMICOLON .)
    FOR             reduce using rule 10 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 10 (stmt -> expr SEMICOLON .)
    LBRACE          reduce using rule 10 (stmt -> expr SEMICOLON .)
    LBRACKET        reduce using rule 10 (stmt -> expr SEMICOLON .)
    NOT             reduce using rule 10 (stmt -> expr SEMICOLON .)
    PLUS            reduce using rule 10 (stmt -> expr SEMICOLON .)
    MINUS           reduce using rule 10 (stmt -> expr SEMICOLON .)
    VAR             reduce using rule 10 (stmt -> expr SEMICOLON .)
    DEF             reduce using rule 10 (stmt -> expr SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 10 (stmt -> expr SEMICOLON .)
    STRING          reduce using rule 10 (stmt -> expr SEMICOLON .)
    RBRACE          reduce using rule 10 (stmt -> expr SEMICOLON .)
    ELSE            reduce using rule 10 (stmt -> expr SEMICOLON .)


state 64

    (39) expr -> expr LBRACKET . expr RBRACKET
    (40) expr -> expr LBRACKET . error RBRACKET
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 98
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 97
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 65

    (43) expr -> expr QUESTIONMARK . expr COLON expr
    (44) expr -> expr QUESTIONMARK . expr error expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 99
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 66

    (45) expr -> expr ASSIGN . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 100
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 67

    (46) expr -> expr PLUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 101
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 68

    (47) expr -> expr MINUS . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 102
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 69

    (48) expr -> expr TIMES . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 103
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 70

    (49) expr -> expr DIVIDE . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 104
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 71

    (50) expr -> expr MOD . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 105
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 72

    (51) expr -> expr GT . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 106
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 73

    (52) expr -> expr LT . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 107
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 74

    (53) expr -> expr EQUAL . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 108
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 75

    (54) expr -> expr GTE . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 109
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 76

    (55) expr -> expr LTE . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 110
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 77

    (56) expr -> expr NOT_EQUAL . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 111
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 78

    (57) expr -> expr OR . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 112
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 79

    (58) expr -> expr AND . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 113
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 80

    (12) stmt -> defvar SEMICOLON .

    error           reduce using rule 12 (stmt -> defvar SEMICOLON .)
    IF              reduce using rule 12 (stmt -> defvar SEMICOLON .)
    WHILE           reduce using rule 12 (stmt -> defvar SEMICOLON .)
    FOR             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    RETURN          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    LBRACE          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    LBRACKET        reduce using rule 12 (stmt -> defvar SEMICOLON .)
    NOT             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    PLUS            reduce using rule 12 (stmt -> defvar SEMICOLON .)
    MINUS           reduce using rule 12 (stmt -> defvar SEMICOLON .)
    VAR             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    DEF             reduce using rule 12 (stmt -> defvar SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (stmt -> defvar SEMICOLON .)
    NUMBER          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    STRING          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    RBRACE          reduce using rule 12 (stmt -> defvar SEMICOLON .)
    ELSE            reduce using rule 12 (stmt -> defvar SEMICOLON .)


state 81

    (13) stmt -> IF LPAREN . expr RPAREN stmt else_choice
    (14) stmt -> IF LPAREN . error RPAREN stmt else_choice
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 115
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 114
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 82

    (17) stmt -> WHILE LPAREN . expr RPAREN stmt
    (18) stmt -> WHILE LPAREN . error RPAREN stmt
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 117
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 116
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 83

    (19) stmt -> FOR LPAREN . iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> FOR LPAREN . iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN . iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> FOR LPAREN . iden ASSIGN expr TO expr RPAREN error
    (71) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    iden                           shift and go to state 118

state 84

    (63) expr -> iden LPAREN . clist RPAREN
    (64) expr -> iden LPAREN . error RPAREN
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (74) empty -> .
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 120
    RPAREN          reduce using rule 74 (empty -> .)
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    iden                           shift and go to state 44
    clist                          shift and go to state 119
    empty                          shift and go to state 88
    expr                           shift and go to state 89
    num                            shift and go to state 51
    str                            shift and go to state 52

state 85

    (23) stmt -> RETURN expr . SEMICOLON
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       shift and go to state 121
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 86

    (41) expr -> LBRACKET clist . RBRACKET

    RBRACKET        shift and go to state 122


state 87

    (42) expr -> LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 123


state 88

    (36) clist -> empty .

    RBRACKET        reduce using rule 36 (clist -> empty .)
    RPAREN          reduce using rule 36 (clist -> empty .)


state 89

    (37) clist -> expr .
    (38) clist -> expr . COMMA clist
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RBRACKET        reduce using rule 37 (clist -> expr .)
    RPAREN          reduce using rule 37 (clist -> expr .)
    COMMA           shift and go to state 124
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 90

    (60) expr -> PLUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 60 (expr -> PLUS expr .)
    QUESTIONMARK    reduce using rule 60 (expr -> PLUS expr .)
    ASSIGN          reduce using rule 60 (expr -> PLUS expr .)
    PLUS            reduce using rule 60 (expr -> PLUS expr .)
    MINUS           reduce using rule 60 (expr -> PLUS expr .)
    GT              reduce using rule 60 (expr -> PLUS expr .)
    LT              reduce using rule 60 (expr -> PLUS expr .)
    EQUAL           reduce using rule 60 (expr -> PLUS expr .)
    GTE             reduce using rule 60 (expr -> PLUS expr .)
    LTE             reduce using rule 60 (expr -> PLUS expr .)
    NOT_EQUAL       reduce using rule 60 (expr -> PLUS expr .)
    OR              reduce using rule 60 (expr -> PLUS expr .)
    AND             reduce using rule 60 (expr -> PLUS expr .)
    COMMA           reduce using rule 60 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 60 (expr -> PLUS expr .)
    COLON           reduce using rule 60 (expr -> PLUS expr .)
    error           reduce using rule 60 (expr -> PLUS expr .)
    RPAREN          reduce using rule 60 (expr -> PLUS expr .)
    TO              reduce using rule 60 (expr -> PLUS expr .)
    LBRACKET        shift and go to state 64
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 60 (expr -> PLUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 91

    (61) expr -> MINUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 61 (expr -> MINUS expr .)
    QUESTIONMARK    reduce using rule 61 (expr -> MINUS expr .)
    ASSIGN          reduce using rule 61 (expr -> MINUS expr .)
    PLUS            reduce using rule 61 (expr -> MINUS expr .)
    MINUS           reduce using rule 61 (expr -> MINUS expr .)
    GT              reduce using rule 61 (expr -> MINUS expr .)
    LT              reduce using rule 61 (expr -> MINUS expr .)
    EQUAL           reduce using rule 61 (expr -> MINUS expr .)
    GTE             reduce using rule 61 (expr -> MINUS expr .)
    LTE             reduce using rule 61 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 61 (expr -> MINUS expr .)
    OR              reduce using rule 61 (expr -> MINUS expr .)
    AND             reduce using rule 61 (expr -> MINUS expr .)
    COMMA           reduce using rule 61 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 61 (expr -> MINUS expr .)
    COLON           reduce using rule 61 (expr -> MINUS expr .)
    error           reduce using rule 61 (expr -> MINUS expr .)
    RPAREN          reduce using rule 61 (expr -> MINUS expr .)
    TO              reduce using rule 61 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 64
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 61 (expr -> MINUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 92

    (59) expr -> NOT expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 59 (expr -> NOT expr .)
    GT              reduce using rule 59 (expr -> NOT expr .)
    LT              reduce using rule 59 (expr -> NOT expr .)
    EQUAL           reduce using rule 59 (expr -> NOT expr .)
    GTE             reduce using rule 59 (expr -> NOT expr .)
    LTE             reduce using rule 59 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 59 (expr -> NOT expr .)
    OR              reduce using rule 59 (expr -> NOT expr .)
    AND             reduce using rule 59 (expr -> NOT expr .)
    COMMA           reduce using rule 59 (expr -> NOT expr .)
    RBRACKET        reduce using rule 59 (expr -> NOT expr .)
    COLON           reduce using rule 59 (expr -> NOT expr .)
    error           reduce using rule 59 (expr -> NOT expr .)
    RPAREN          reduce using rule 59 (expr -> NOT expr .)
    TO              reduce using rule 59 (expr -> NOT expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 59 (expr -> NOT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 59 (expr -> NOT expr .) ]
  ! ASSIGN          [ reduce using rule 59 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 59 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 59 (expr -> NOT expr .) ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 93

    (26) defvar -> VAR type . vector_type_choice iden defvar_choice
    (28) vector_type_choice -> . empty
    (29) vector_type_choice -> . LT type GT
    (30) vector_type_choice -> . LT error GT
    (74) empty -> .

    LT              shift and go to state 13
    IDENTIFIER      reduce using rule 74 (empty -> .)

    vector_type_choice             shift and go to state 125
    empty                          shift and go to state 12

state 94

    (27) defvar -> VAR error . vector_type_choice iden defvar_choice
    (28) vector_type_choice -> . empty
    (29) vector_type_choice -> . LT type GT
    (30) vector_type_choice -> . LT error GT
    (74) empty -> .

    LT              shift and go to state 13
    IDENTIFIER      reduce using rule 74 (empty -> .)

    vector_type_choice             shift and go to state 126
    empty                          shift and go to state 12

state 95

    (6) func_choice -> RETURN expr SEMICOLON .

    DEF             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    $end            reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    error           reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    IF              reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    LBRACKET        reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    NOT             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    VAR             reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 6 (func_choice -> RETURN expr SEMICOLON .)


state 96

    (24) stmt -> LBRACE body RBRACE .

    error           reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    IF              reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    WHILE           reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    LBRACKET        reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    PLUS            reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    MINUS           reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    VAR             reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    DEF             reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    IDENTIFIER      reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    NUMBER          reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    STRING          reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 24 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 24 (stmt -> LBRACE body RBRACE .)


state 97

    (39) expr -> expr LBRACKET expr . RBRACKET
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RBRACKET        shift and go to state 127
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 98

    (40) expr -> expr LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 128


state 99

    (43) expr -> expr QUESTIONMARK expr . COLON expr
    (44) expr -> expr QUESTIONMARK expr . error expr
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    COLON           shift and go to state 129
    error           shift and go to state 130
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 100

    (45) expr -> expr ASSIGN expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 45 (expr -> expr ASSIGN expr .)
    QUESTIONMARK    reduce using rule 45 (expr -> expr ASSIGN expr .)
    ASSIGN          reduce using rule 45 (expr -> expr ASSIGN expr .)
    GT              reduce using rule 45 (expr -> expr ASSIGN expr .)
    LT              reduce using rule 45 (expr -> expr ASSIGN expr .)
    EQUAL           reduce using rule 45 (expr -> expr ASSIGN expr .)
    GTE             reduce using rule 45 (expr -> expr ASSIGN expr .)
    LTE             reduce using rule 45 (expr -> expr ASSIGN expr .)
    NOT_EQUAL       reduce using rule 45 (expr -> expr ASSIGN expr .)
    OR              reduce using rule 45 (expr -> expr ASSIGN expr .)
    AND             reduce using rule 45 (expr -> expr ASSIGN expr .)
    COMMA           reduce using rule 45 (expr -> expr ASSIGN expr .)
    RBRACKET        reduce using rule 45 (expr -> expr ASSIGN expr .)
    COLON           reduce using rule 45 (expr -> expr ASSIGN expr .)
    error           reduce using rule 45 (expr -> expr ASSIGN expr .)
    RPAREN          reduce using rule 45 (expr -> expr ASSIGN expr .)
    TO              reduce using rule 45 (expr -> expr ASSIGN expr .)
    LBRACKET        shift and go to state 64
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! MOD             [ reduce using rule 45 (expr -> expr ASSIGN expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 101

    (46) expr -> expr PLUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 46 (expr -> expr PLUS expr .)
    QUESTIONMARK    reduce using rule 46 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 46 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 46 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 46 (expr -> expr PLUS expr .)
    GT              reduce using rule 46 (expr -> expr PLUS expr .)
    LT              reduce using rule 46 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 46 (expr -> expr PLUS expr .)
    GTE             reduce using rule 46 (expr -> expr PLUS expr .)
    LTE             reduce using rule 46 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 46 (expr -> expr PLUS expr .)
    OR              reduce using rule 46 (expr -> expr PLUS expr .)
    AND             reduce using rule 46 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 46 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 46 (expr -> expr PLUS expr .)
    COLON           reduce using rule 46 (expr -> expr PLUS expr .)
    error           reduce using rule 46 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 46 (expr -> expr PLUS expr .)
    TO              reduce using rule 46 (expr -> expr PLUS expr .)
    LBRACKET        shift and go to state 64
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 46 (expr -> expr PLUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 102

    (47) expr -> expr MINUS expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 47 (expr -> expr MINUS expr .)
    QUESTIONMARK    reduce using rule 47 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 47 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 47 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 47 (expr -> expr MINUS expr .)
    GT              reduce using rule 47 (expr -> expr MINUS expr .)
    LT              reduce using rule 47 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 47 (expr -> expr MINUS expr .)
    GTE             reduce using rule 47 (expr -> expr MINUS expr .)
    LTE             reduce using rule 47 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 47 (expr -> expr MINUS expr .)
    OR              reduce using rule 47 (expr -> expr MINUS expr .)
    AND             reduce using rule 47 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 47 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 47 (expr -> expr MINUS expr .)
    COLON           reduce using rule 47 (expr -> expr MINUS expr .)
    error           reduce using rule 47 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 47 (expr -> expr MINUS expr .)
    TO              reduce using rule 47 (expr -> expr MINUS expr .)
    LBRACKET        shift and go to state 64
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 47 (expr -> expr MINUS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 103

    (48) expr -> expr TIMES expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 48 (expr -> expr TIMES expr .)
    QUESTIONMARK    reduce using rule 48 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 48 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 48 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 48 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 48 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 48 (expr -> expr TIMES expr .)
    MOD             reduce using rule 48 (expr -> expr TIMES expr .)
    GT              reduce using rule 48 (expr -> expr TIMES expr .)
    LT              reduce using rule 48 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 48 (expr -> expr TIMES expr .)
    GTE             reduce using rule 48 (expr -> expr TIMES expr .)
    LTE             reduce using rule 48 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 48 (expr -> expr TIMES expr .)
    OR              reduce using rule 48 (expr -> expr TIMES expr .)
    AND             reduce using rule 48 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 48 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 48 (expr -> expr TIMES expr .)
    COLON           reduce using rule 48 (expr -> expr TIMES expr .)
    error           reduce using rule 48 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 48 (expr -> expr TIMES expr .)
    TO              reduce using rule 48 (expr -> expr TIMES expr .)
    LBRACKET        shift and go to state 64

  ! LBRACKET        [ reduce using rule 48 (expr -> expr TIMES expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! TIMES           [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 104

    (49) expr -> expr DIVIDE expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 49 (expr -> expr DIVIDE expr .)
    QUESTIONMARK    reduce using rule 49 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 49 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 49 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 49 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 49 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 49 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 49 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 49 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 49 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 49 (expr -> expr DIVIDE expr .)
    GTE             reduce using rule 49 (expr -> expr DIVIDE expr .)
    LTE             reduce using rule 49 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 49 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 49 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 49 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 49 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 49 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 49 (expr -> expr DIVIDE expr .)
    error           reduce using rule 49 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 49 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 49 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 64

  ! LBRACKET        [ reduce using rule 49 (expr -> expr DIVIDE expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! TIMES           [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 105

    (50) expr -> expr MOD expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 50 (expr -> expr MOD expr .)
    QUESTIONMARK    reduce using rule 50 (expr -> expr MOD expr .)
    ASSIGN          reduce using rule 50 (expr -> expr MOD expr .)
    PLUS            reduce using rule 50 (expr -> expr MOD expr .)
    MINUS           reduce using rule 50 (expr -> expr MOD expr .)
    TIMES           reduce using rule 50 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 50 (expr -> expr MOD expr .)
    MOD             reduce using rule 50 (expr -> expr MOD expr .)
    GT              reduce using rule 50 (expr -> expr MOD expr .)
    LT              reduce using rule 50 (expr -> expr MOD expr .)
    EQUAL           reduce using rule 50 (expr -> expr MOD expr .)
    GTE             reduce using rule 50 (expr -> expr MOD expr .)
    LTE             reduce using rule 50 (expr -> expr MOD expr .)
    NOT_EQUAL       reduce using rule 50 (expr -> expr MOD expr .)
    OR              reduce using rule 50 (expr -> expr MOD expr .)
    AND             reduce using rule 50 (expr -> expr MOD expr .)
    COMMA           reduce using rule 50 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 50 (expr -> expr MOD expr .)
    COLON           reduce using rule 50 (expr -> expr MOD expr .)
    error           reduce using rule 50 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 50 (expr -> expr MOD expr .)
    TO              reduce using rule 50 (expr -> expr MOD expr .)
    LBRACKET        shift and go to state 64

  ! LBRACKET        [ reduce using rule 50 (expr -> expr MOD expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! TIMES           [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! MOD             [ shift and go to state 71 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 106

    (51) expr -> expr GT expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 51 (expr -> expr GT expr .)
    GT              reduce using rule 51 (expr -> expr GT expr .)
    LT              reduce using rule 51 (expr -> expr GT expr .)
    EQUAL           reduce using rule 51 (expr -> expr GT expr .)
    GTE             reduce using rule 51 (expr -> expr GT expr .)
    LTE             reduce using rule 51 (expr -> expr GT expr .)
    NOT_EQUAL       reduce using rule 51 (expr -> expr GT expr .)
    OR              reduce using rule 51 (expr -> expr GT expr .)
    AND             reduce using rule 51 (expr -> expr GT expr .)
    COMMA           reduce using rule 51 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 51 (expr -> expr GT expr .)
    COLON           reduce using rule 51 (expr -> expr GT expr .)
    error           reduce using rule 51 (expr -> expr GT expr .)
    RPAREN          reduce using rule 51 (expr -> expr GT expr .)
    TO              reduce using rule 51 (expr -> expr GT expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! ASSIGN          [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 51 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 107

    (52) expr -> expr LT expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 52 (expr -> expr LT expr .)
    GT              reduce using rule 52 (expr -> expr LT expr .)
    LT              reduce using rule 52 (expr -> expr LT expr .)
    EQUAL           reduce using rule 52 (expr -> expr LT expr .)
    GTE             reduce using rule 52 (expr -> expr LT expr .)
    LTE             reduce using rule 52 (expr -> expr LT expr .)
    NOT_EQUAL       reduce using rule 52 (expr -> expr LT expr .)
    OR              reduce using rule 52 (expr -> expr LT expr .)
    AND             reduce using rule 52 (expr -> expr LT expr .)
    COMMA           reduce using rule 52 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 52 (expr -> expr LT expr .)
    COLON           reduce using rule 52 (expr -> expr LT expr .)
    error           reduce using rule 52 (expr -> expr LT expr .)
    RPAREN          reduce using rule 52 (expr -> expr LT expr .)
    TO              reduce using rule 52 (expr -> expr LT expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! QUESTIONMARK    [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! ASSIGN          [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 52 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 108

    (53) expr -> expr EQUAL expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 53 (expr -> expr EQUAL expr .)
    GT              reduce using rule 53 (expr -> expr EQUAL expr .)
    LT              reduce using rule 53 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 53 (expr -> expr EQUAL expr .)
    GTE             reduce using rule 53 (expr -> expr EQUAL expr .)
    LTE             reduce using rule 53 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 53 (expr -> expr EQUAL expr .)
    OR              reduce using rule 53 (expr -> expr EQUAL expr .)
    AND             reduce using rule 53 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 53 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 53 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 53 (expr -> expr EQUAL expr .)
    error           reduce using rule 53 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 53 (expr -> expr EQUAL expr .)
    TO              reduce using rule 53 (expr -> expr EQUAL expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! QUESTIONMARK    [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! ASSIGN          [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! MOD             [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 109

    (54) expr -> expr GTE expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 54 (expr -> expr GTE expr .)
    GT              reduce using rule 54 (expr -> expr GTE expr .)
    LT              reduce using rule 54 (expr -> expr GTE expr .)
    EQUAL           reduce using rule 54 (expr -> expr GTE expr .)
    GTE             reduce using rule 54 (expr -> expr GTE expr .)
    LTE             reduce using rule 54 (expr -> expr GTE expr .)
    NOT_EQUAL       reduce using rule 54 (expr -> expr GTE expr .)
    OR              reduce using rule 54 (expr -> expr GTE expr .)
    AND             reduce using rule 54 (expr -> expr GTE expr .)
    COMMA           reduce using rule 54 (expr -> expr GTE expr .)
    RBRACKET        reduce using rule 54 (expr -> expr GTE expr .)
    COLON           reduce using rule 54 (expr -> expr GTE expr .)
    error           reduce using rule 54 (expr -> expr GTE expr .)
    RPAREN          reduce using rule 54 (expr -> expr GTE expr .)
    TO              reduce using rule 54 (expr -> expr GTE expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! QUESTIONMARK    [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! ASSIGN          [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! PLUS            [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 54 (expr -> expr GTE expr .) ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 110

    (55) expr -> expr LTE expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 55 (expr -> expr LTE expr .)
    GT              reduce using rule 55 (expr -> expr LTE expr .)
    LT              reduce using rule 55 (expr -> expr LTE expr .)
    EQUAL           reduce using rule 55 (expr -> expr LTE expr .)
    GTE             reduce using rule 55 (expr -> expr LTE expr .)
    LTE             reduce using rule 55 (expr -> expr LTE expr .)
    NOT_EQUAL       reduce using rule 55 (expr -> expr LTE expr .)
    OR              reduce using rule 55 (expr -> expr LTE expr .)
    AND             reduce using rule 55 (expr -> expr LTE expr .)
    COMMA           reduce using rule 55 (expr -> expr LTE expr .)
    RBRACKET        reduce using rule 55 (expr -> expr LTE expr .)
    COLON           reduce using rule 55 (expr -> expr LTE expr .)
    error           reduce using rule 55 (expr -> expr LTE expr .)
    RPAREN          reduce using rule 55 (expr -> expr LTE expr .)
    TO              reduce using rule 55 (expr -> expr LTE expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! QUESTIONMARK    [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! ASSIGN          [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! PLUS            [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 55 (expr -> expr LTE expr .) ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 111

    (56) expr -> expr NOT_EQUAL expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    GT              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    LT              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    GTE             reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    LTE             reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    COMMA           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    error           reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    TO              reduce using rule 56 (expr -> expr NOT_EQUAL expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! QUESTIONMARK    [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! ASSIGN          [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 56 (expr -> expr NOT_EQUAL expr .) ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 112

    (57) expr -> expr OR expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 57 (expr -> expr OR expr .)
    OR              reduce using rule 57 (expr -> expr OR expr .)
    AND             reduce using rule 57 (expr -> expr OR expr .)
    COMMA           reduce using rule 57 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 57 (expr -> expr OR expr .)
    COLON           reduce using rule 57 (expr -> expr OR expr .)
    error           reduce using rule 57 (expr -> expr OR expr .)
    RPAREN          reduce using rule 57 (expr -> expr OR expr .)
    TO              reduce using rule 57 (expr -> expr OR expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77

  ! LBRACKET        [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! QUESTIONMARK    [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! ASSIGN          [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! GTE             [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! LTE             [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 57 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 113

    (58) expr -> expr AND expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 58 (expr -> expr AND expr .)
    OR              reduce using rule 58 (expr -> expr AND expr .)
    AND             reduce using rule 58 (expr -> expr AND expr .)
    COMMA           reduce using rule 58 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 58 (expr -> expr AND expr .)
    COLON           reduce using rule 58 (expr -> expr AND expr .)
    error           reduce using rule 58 (expr -> expr AND expr .)
    RPAREN          reduce using rule 58 (expr -> expr AND expr .)
    TO              reduce using rule 58 (expr -> expr AND expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77

  ! LBRACKET        [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! QUESTIONMARK    [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! ASSIGN          [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! GTE             [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! LTE             [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 58 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 114

    (13) stmt -> IF LPAREN expr . RPAREN stmt else_choice
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 131
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 115

    (14) stmt -> IF LPAREN error . RPAREN stmt else_choice

    RPAREN          shift and go to state 132


state 116

    (17) stmt -> WHILE LPAREN expr . RPAREN stmt
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 133
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 117

    (18) stmt -> WHILE LPAREN error . RPAREN stmt

    RPAREN          shift and go to state 134


state 118

    (19) stmt -> FOR LPAREN iden . ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> FOR LPAREN iden . ASSIGN error TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden . ASSIGN expr TO error RPAREN stmt
    (22) stmt -> FOR LPAREN iden . ASSIGN expr TO expr RPAREN error

    ASSIGN          shift and go to state 135


state 119

    (63) expr -> iden LPAREN clist . RPAREN

    RPAREN          shift and go to state 136


state 120

    (64) expr -> iden LPAREN error . RPAREN

    RPAREN          shift and go to state 137


state 121

    (23) stmt -> RETURN expr SEMICOLON .

    error           reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    IF              reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    LBRACE          reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    LBRACKET        reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    NOT             reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    VAR             reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    DEF             reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    RBRACE          reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 23 (stmt -> RETURN expr SEMICOLON .)


state 122

    (41) expr -> LBRACKET clist RBRACKET .

    SEMICOLON       reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    LBRACKET        reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    QUESTIONMARK    reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    ASSIGN          reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    PLUS            reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    MINUS           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    TIMES           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    DIVIDE          reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    MOD             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    GT              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    LT              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    EQUAL           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    GTE             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    LTE             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    NOT_EQUAL       reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    OR              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    AND             reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    COMMA           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    RBRACKET        reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    COLON           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    error           reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    RPAREN          reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)
    TO              reduce using rule 41 (expr -> LBRACKET clist RBRACKET .)


state 123

    (42) expr -> LBRACKET error RBRACKET .

    SEMICOLON       reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    LBRACKET        reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    QUESTIONMARK    reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    ASSIGN          reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    PLUS            reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    MINUS           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    TIMES           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    DIVIDE          reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    MOD             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    GT              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    LT              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    EQUAL           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    GTE             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    LTE             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    NOT_EQUAL       reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    OR              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    AND             reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    COMMA           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    COLON           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    error           reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    RPAREN          reduce using rule 42 (expr -> LBRACKET error RBRACKET .)
    TO              reduce using rule 42 (expr -> LBRACKET error RBRACKET .)


state 124

    (38) clist -> expr COMMA . clist
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (74) empty -> .
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    RBRACKET        reduce using rule 74 (empty -> .)
    RPAREN          reduce using rule 74 (empty -> .)
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 89
    clist                          shift and go to state 138
    empty                          shift and go to state 88
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 125

    (26) defvar -> VAR type vector_type_choice . iden defvar_choice
    (71) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    iden                           shift and go to state 139

state 126

    (27) defvar -> VAR error vector_type_choice . iden defvar_choice
    (71) iden -> . IDENTIFIER

    IDENTIFIER      shift and go to state 15

    iden                           shift and go to state 140

state 127

    (39) expr -> expr LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    QUESTIONMARK    reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    GTE             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    LTE             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    error           reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)
    TO              reduce using rule 39 (expr -> expr LBRACKET expr RBRACKET .)


state 128

    (40) expr -> expr LBRACKET error RBRACKET .

    SEMICOLON       reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    LBRACKET        reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    QUESTIONMARK    reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    ASSIGN          reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    PLUS            reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    MINUS           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    TIMES           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    DIVIDE          reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    MOD             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    GT              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    LT              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    EQUAL           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    GTE             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    LTE             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    NOT_EQUAL       reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    OR              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    AND             reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    COMMA           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    COLON           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    error           reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    RPAREN          reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)
    TO              reduce using rule 40 (expr -> expr LBRACKET error RBRACKET .)


state 129

    (43) expr -> expr QUESTIONMARK expr COLON . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 141
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 130

    (44) expr -> expr QUESTIONMARK expr error . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 142
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 131

    (13) stmt -> IF LPAREN expr RPAREN . stmt else_choice
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 144
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 39
    stmt                           shift and go to state 143
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 132

    (14) stmt -> IF LPAREN error RPAREN . stmt else_choice
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 144
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    stmt                           shift and go to state 145
    expr                           shift and go to state 39
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 133

    (17) stmt -> WHILE LPAREN expr RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 144
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 39
    stmt                           shift and go to state 146
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 134

    (18) stmt -> WHILE LPAREN error RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 144
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    stmt                           shift and go to state 147
    expr                           shift and go to state 39
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 135

    (19) stmt -> FOR LPAREN iden ASSIGN . expr TO expr RPAREN stmt
    (20) stmt -> FOR LPAREN iden ASSIGN . error TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden ASSIGN . expr TO error RPAREN stmt
    (22) stmt -> FOR LPAREN iden ASSIGN . expr TO expr RPAREN error
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 149
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    iden                           shift and go to state 44
    expr                           shift and go to state 148
    num                            shift and go to state 51
    str                            shift and go to state 52

state 136

    (63) expr -> iden LPAREN clist RPAREN .

    SEMICOLON       reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    LBRACKET        reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    QUESTIONMARK    reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    ASSIGN          reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    PLUS            reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    MINUS           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    TIMES           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    MOD             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    GT              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    LT              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    EQUAL           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    GTE             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    LTE             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    OR              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    AND             reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    COMMA           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    RBRACKET        reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    COLON           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    error           reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    RPAREN          reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)
    TO              reduce using rule 63 (expr -> iden LPAREN clist RPAREN .)


state 137

    (64) expr -> iden LPAREN error RPAREN .

    SEMICOLON       reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    LBRACKET        reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    QUESTIONMARK    reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    ASSIGN          reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    PLUS            reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    MINUS           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    TIMES           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    DIVIDE          reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    MOD             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    GT              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    LT              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    EQUAL           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    GTE             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    LTE             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    NOT_EQUAL       reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    OR              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    AND             reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    COMMA           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    RBRACKET        reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    COLON           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    error           reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    RPAREN          reduce using rule 64 (expr -> iden LPAREN error RPAREN .)
    TO              reduce using rule 64 (expr -> iden LPAREN error RPAREN .)


state 138

    (38) clist -> expr COMMA clist .

    RBRACKET        reduce using rule 38 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 38 (clist -> expr COMMA clist .)


state 139

    (26) defvar -> VAR type vector_type_choice iden . defvar_choice
    (31) defvar_choice -> . empty
    (32) defvar_choice -> . ASSIGN expr
    (74) empty -> .

    ASSIGN          shift and go to state 152
    SEMICOLON       reduce using rule 74 (empty -> .)

    defvar_choice                  shift and go to state 150
    empty                          shift and go to state 151

state 140

    (27) defvar -> VAR error vector_type_choice iden . defvar_choice
    (31) defvar_choice -> . empty
    (32) defvar_choice -> . ASSIGN expr
    (74) empty -> .

    ASSIGN          shift and go to state 152
    SEMICOLON       reduce using rule 74 (empty -> .)

    defvar_choice                  shift and go to state 153
    empty                          shift and go to state 151

state 141

    (43) expr -> expr QUESTIONMARK expr COLON expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    QUESTIONMARK    reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    ASSIGN          reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    GT              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    LT              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    EQUAL           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    GTE             reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    LTE             reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    NOT_EQUAL       reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    OR              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    AND             reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    COMMA           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    RBRACKET        reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    COLON           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    error           reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    RPAREN          reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    TO              reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .)
    LBRACKET        shift and go to state 64
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71

  ! LBRACKET        [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! QUESTIONMARK    [ shift and go to state 65 ]
  ! ASSIGN          [ shift and go to state 66 ]
  ! GT              [ shift and go to state 72 ]
  ! LT              [ shift and go to state 73 ]
  ! EQUAL           [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! AND             [ shift and go to state 79 ]


state 142

    (44) expr -> expr QUESTIONMARK expr error expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    COMMA           reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    RBRACKET        reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    COLON           reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    error           reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    RPAREN          reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    TO              reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79

  ! LBRACKET        [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! QUESTIONMARK    [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! ASSIGN          [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! PLUS            [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! TIMES           [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! MOD             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! GT              [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! LT              [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! EQUAL           [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! GTE             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! LTE             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! NOT_EQUAL       [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! OR              [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]
  ! AND             [ reduce using rule 44 (expr -> expr QUESTIONMARK expr error expr .) ]


state 143

    (13) stmt -> IF LPAREN expr RPAREN stmt . else_choice
    (15) else_choice -> . empty
    (16) else_choice -> . ELSE stmt
    (74) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 156
    error           reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    RETURN          reduce using rule 74 (empty -> .)
    LBRACE          reduce using rule 74 (empty -> .)
    LBRACKET        reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    VAR             reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    IDENTIFIER      reduce using rule 74 (empty -> .)
    NUMBER          reduce using rule 74 (empty -> .)
    STRING          reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

  ! ELSE            [ reduce using rule 74 (empty -> .) ]

    else_choice                    shift and go to state 154
    empty                          shift and go to state 155

state 144

    (11) stmt -> error . SEMICOLON

    SEMICOLON       shift and go to state 62


state 145

    (14) stmt -> IF LPAREN error RPAREN stmt . else_choice
    (15) else_choice -> . empty
    (16) else_choice -> . ELSE stmt
    (74) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 156
    error           reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    WHILE           reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    RETURN          reduce using rule 74 (empty -> .)
    LBRACE          reduce using rule 74 (empty -> .)
    LBRACKET        reduce using rule 74 (empty -> .)
    NOT             reduce using rule 74 (empty -> .)
    PLUS            reduce using rule 74 (empty -> .)
    MINUS           reduce using rule 74 (empty -> .)
    VAR             reduce using rule 74 (empty -> .)
    DEF             reduce using rule 74 (empty -> .)
    IDENTIFIER      reduce using rule 74 (empty -> .)
    NUMBER          reduce using rule 74 (empty -> .)
    STRING          reduce using rule 74 (empty -> .)
    RBRACE          reduce using rule 74 (empty -> .)

  ! ELSE            [ reduce using rule 74 (empty -> .) ]

    else_choice                    shift and go to state 157
    empty                          shift and go to state 155

state 146

    (17) stmt -> WHILE LPAREN expr RPAREN stmt .

    error           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACKET        reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    PLUS            reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DEF             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 147

    (18) stmt -> WHILE LPAREN error RPAREN stmt .

    error           reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    IF              reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    WHILE           reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    FOR             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    RETURN          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    LBRACE          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    LBRACKET        reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    NOT             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    PLUS            reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    MINUS           reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    VAR             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    DEF             reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    IDENTIFIER      reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    NUMBER          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    STRING          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    RBRACE          reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)
    ELSE            reduce using rule 18 (stmt -> WHILE LPAREN error RPAREN stmt .)


state 148

    (19) stmt -> FOR LPAREN iden ASSIGN expr . TO expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden ASSIGN expr . TO error RPAREN stmt
    (22) stmt -> FOR LPAREN iden ASSIGN expr . TO expr RPAREN error
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    TO              shift and go to state 158
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 149

    (20) stmt -> FOR LPAREN iden ASSIGN error . TO expr RPAREN stmt

    TO              shift and go to state 159


state 150

    (26) defvar -> VAR type vector_type_choice iden defvar_choice .

    SEMICOLON       reduce using rule 26 (defvar -> VAR type vector_type_choice iden defvar_choice .)


state 151

    (31) defvar_choice -> empty .

    SEMICOLON       reduce using rule 31 (defvar_choice -> empty .)


state 152

    (32) defvar_choice -> ASSIGN . expr
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    expr                           shift and go to state 160
    iden                           shift and go to state 44
    num                            shift and go to state 51
    str                            shift and go to state 52

state 153

    (27) defvar -> VAR error vector_type_choice iden defvar_choice .

    SEMICOLON       reduce using rule 27 (defvar -> VAR error vector_type_choice iden defvar_choice .)


state 154

    (13) stmt -> IF LPAREN expr RPAREN stmt else_choice .

    error           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IF              reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    WHILE           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    FOR             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RETURN          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACE          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACKET        reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NOT             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    PLUS            reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    MINUS           reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    VAR             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    DEF             reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IDENTIFIER      reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NUMBER          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    STRING          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RBRACE          reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    ELSE            reduce using rule 13 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)


state 155

    (15) else_choice -> empty .

    ELSE            reduce using rule 15 (else_choice -> empty .)
    error           reduce using rule 15 (else_choice -> empty .)
    IF              reduce using rule 15 (else_choice -> empty .)
    WHILE           reduce using rule 15 (else_choice -> empty .)
    FOR             reduce using rule 15 (else_choice -> empty .)
    RETURN          reduce using rule 15 (else_choice -> empty .)
    LBRACE          reduce using rule 15 (else_choice -> empty .)
    LBRACKET        reduce using rule 15 (else_choice -> empty .)
    NOT             reduce using rule 15 (else_choice -> empty .)
    PLUS            reduce using rule 15 (else_choice -> empty .)
    MINUS           reduce using rule 15 (else_choice -> empty .)
    VAR             reduce using rule 15 (else_choice -> empty .)
    DEF             reduce using rule 15 (else_choice -> empty .)
    IDENTIFIER      reduce using rule 15 (else_choice -> empty .)
    NUMBER          reduce using rule 15 (else_choice -> empty .)
    STRING          reduce using rule 15 (else_choice -> empty .)
    RBRACE          reduce using rule 15 (else_choice -> empty .)


state 156

    (16) else_choice -> ELSE . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 144
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    stmt                           shift and go to state 161
    expr                           shift and go to state 39
    defvar                         shift and go to state 40
    iden                           shift and go to state 44
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 157

    (14) stmt -> IF LPAREN error RPAREN stmt else_choice .

    error           reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IF              reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    WHILE           reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    FOR             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RETURN          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACE          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACKET        reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NOT             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    PLUS            reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    MINUS           reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    VAR             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    DEF             reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IDENTIFIER      reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NUMBER          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    STRING          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RBRACE          reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    ELSE            reduce using rule 14 (stmt -> IF LPAREN error RPAREN stmt else_choice .)


state 158

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO . expr RPAREN stmt
    (21) stmt -> FOR LPAREN iden ASSIGN expr TO . error RPAREN stmt
    (22) stmt -> FOR LPAREN iden ASSIGN expr TO . expr RPAREN error
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 163
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    iden                           shift and go to state 44
    expr                           shift and go to state 162
    num                            shift and go to state 51
    str                            shift and go to state 52

state 159

    (20) stmt -> FOR LPAREN iden ASSIGN error TO . expr RPAREN stmt
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    iden                           shift and go to state 44
    expr                           shift and go to state 164
    num                            shift and go to state 51
    str                            shift and go to state 52

state 160

    (32) defvar_choice -> ASSIGN expr .
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    SEMICOLON       reduce using rule 32 (defvar_choice -> ASSIGN expr .)
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 161

    (16) else_choice -> ELSE stmt .

    ELSE            reduce using rule 16 (else_choice -> ELSE stmt .)
    error           reduce using rule 16 (else_choice -> ELSE stmt .)
    IF              reduce using rule 16 (else_choice -> ELSE stmt .)
    WHILE           reduce using rule 16 (else_choice -> ELSE stmt .)
    FOR             reduce using rule 16 (else_choice -> ELSE stmt .)
    RETURN          reduce using rule 16 (else_choice -> ELSE stmt .)
    LBRACE          reduce using rule 16 (else_choice -> ELSE stmt .)
    LBRACKET        reduce using rule 16 (else_choice -> ELSE stmt .)
    NOT             reduce using rule 16 (else_choice -> ELSE stmt .)
    PLUS            reduce using rule 16 (else_choice -> ELSE stmt .)
    MINUS           reduce using rule 16 (else_choice -> ELSE stmt .)
    VAR             reduce using rule 16 (else_choice -> ELSE stmt .)
    DEF             reduce using rule 16 (else_choice -> ELSE stmt .)
    IDENTIFIER      reduce using rule 16 (else_choice -> ELSE stmt .)
    NUMBER          reduce using rule 16 (else_choice -> ELSE stmt .)
    STRING          reduce using rule 16 (else_choice -> ELSE stmt .)
    RBRACE          reduce using rule 16 (else_choice -> ELSE stmt .)


state 162

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO expr . RPAREN stmt
    (22) stmt -> FOR LPAREN iden ASSIGN expr TO expr . RPAREN error
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 165
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 163

    (21) stmt -> FOR LPAREN iden ASSIGN expr TO error . RPAREN stmt

    RPAREN          shift and go to state 166


state 164

    (20) stmt -> FOR LPAREN iden ASSIGN error TO expr . RPAREN stmt
    (39) expr -> expr . LBRACKET expr RBRACKET
    (40) expr -> expr . LBRACKET error RBRACKET
    (43) expr -> expr . QUESTIONMARK expr COLON expr
    (44) expr -> expr . QUESTIONMARK expr error expr
    (45) expr -> expr . ASSIGN expr
    (46) expr -> expr . PLUS expr
    (47) expr -> expr . MINUS expr
    (48) expr -> expr . TIMES expr
    (49) expr -> expr . DIVIDE expr
    (50) expr -> expr . MOD expr
    (51) expr -> expr . GT expr
    (52) expr -> expr . LT expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . GTE expr
    (55) expr -> expr . LTE expr
    (56) expr -> expr . NOT_EQUAL expr
    (57) expr -> expr . OR expr
    (58) expr -> expr . AND expr

    RPAREN          shift and go to state 167
    LBRACKET        shift and go to state 64
    QUESTIONMARK    shift and go to state 65
    ASSIGN          shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 71
    GT              shift and go to state 72
    LT              shift and go to state 73
    EQUAL           shift and go to state 74
    GTE             shift and go to state 75
    LTE             shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    OR              shift and go to state 78
    AND             shift and go to state 79


state 165

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN . stmt
    (22) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN . error
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 169
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    iden                           shift and go to state 44
    expr                           shift and go to state 39
    stmt                           shift and go to state 168
    defvar                         shift and go to state 40
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 166

    (21) stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 144
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    iden                           shift and go to state 44
    expr                           shift and go to state 39
    stmt                           shift and go to state 170
    defvar                         shift and go to state 40
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 167

    (20) stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN . stmt
    (10) stmt -> . expr SEMICOLON
    (11) stmt -> . error SEMICOLON
    (12) stmt -> . defvar SEMICOLON
    (13) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (14) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) stmt -> . WHILE LPAREN error RPAREN stmt
    (19) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt
    (20) stmt -> . FOR LPAREN iden ASSIGN error TO expr RPAREN stmt
    (21) stmt -> . FOR LPAREN iden ASSIGN expr TO error RPAREN stmt
    (22) stmt -> . FOR LPAREN iden ASSIGN expr TO expr RPAREN error
    (23) stmt -> . RETURN expr SEMICOLON
    (24) stmt -> . LBRACE body RBRACE
    (25) stmt -> . func
    (39) expr -> . expr LBRACKET expr RBRACKET
    (40) expr -> . expr LBRACKET error RBRACKET
    (41) expr -> . LBRACKET clist RBRACKET
    (42) expr -> . LBRACKET error RBRACKET
    (43) expr -> . expr QUESTIONMARK expr COLON expr
    (44) expr -> . expr QUESTIONMARK expr error expr
    (45) expr -> . expr ASSIGN expr
    (46) expr -> . expr PLUS expr
    (47) expr -> . expr MINUS expr
    (48) expr -> . expr TIMES expr
    (49) expr -> . expr DIVIDE expr
    (50) expr -> . expr MOD expr
    (51) expr -> . expr GT expr
    (52) expr -> . expr LT expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr GTE expr
    (55) expr -> . expr LTE expr
    (56) expr -> . expr NOT_EQUAL expr
    (57) expr -> . expr OR expr
    (58) expr -> . expr AND expr
    (59) expr -> . NOT expr
    (60) expr -> . PLUS expr
    (61) expr -> . MINUS expr
    (62) expr -> . iden
    (63) expr -> . iden LPAREN clist RPAREN
    (64) expr -> . iden LPAREN error RPAREN
    (65) expr -> . num
    (66) expr -> . str
    (26) defvar -> . VAR type vector_type_choice iden defvar_choice
    (27) defvar -> . VAR error vector_type_choice iden defvar_choice
    (3) func -> . DEF type vector_type_choice iden LPAREN flist RPAREN func_choice
    (4) func -> . DEF type vector_type_choice iden LPAREN error RPAREN func_choice
    (71) iden -> . IDENTIFIER
    (73) num -> . NUMBER
    (72) str -> . STRING

    error           shift and go to state 144
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    FOR             shift and go to state 43
    RETURN          shift and go to state 45
    LBRACE          shift and go to state 34
    LBRACKET        shift and go to state 47
    NOT             shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    VAR             shift and go to state 53
    DEF             shift and go to state 4
    IDENTIFIER      shift and go to state 15
    NUMBER          shift and go to state 54
    STRING          shift and go to state 55

    iden                           shift and go to state 44
    expr                           shift and go to state 39
    stmt                           shift and go to state 171
    defvar                         shift and go to state 40
    func                           shift and go to state 46
    num                            shift and go to state 51
    str                            shift and go to state 52

state 168

    (19) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .

    error           reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    IF              reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    FOR             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    LBRACE          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    NOT             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    VAR             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    DEF             reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    STRING          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    RBRACE          reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 19 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt .)


state 169

    (22) stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .
    (11) stmt -> error . SEMICOLON

    error           reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    IF              reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    WHILE           reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    FOR             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    RETURN          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    LBRACE          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    LBRACKET        reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    NOT             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    PLUS            reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    MINUS           reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    VAR             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    DEF             reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    IDENTIFIER      reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    NUMBER          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    STRING          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    RBRACE          reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    ELSE            reduce using rule 22 (stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error .)
    SEMICOLON       shift and go to state 62


state 170

    (21) stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .

    error           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    IF              reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    WHILE           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    FOR             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    RETURN          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    LBRACE          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    LBRACKET        reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    NOT             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    PLUS            reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    MINUS           reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    VAR             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    DEF             reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    IDENTIFIER      reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    NUMBER          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    STRING          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    RBRACE          reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)
    ELSE            reduce using rule 21 (stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt .)


state 171

    (20) stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .

    error           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    IF              reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    WHILE           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    FOR             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    RETURN          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    LBRACE          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    NOT             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    PLUS            reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    MINUS           reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    VAR             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    DEF             reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    NUMBER          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    STRING          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    RBRACE          reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)
    ELSE            reduce using rule 20 (stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 143 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
