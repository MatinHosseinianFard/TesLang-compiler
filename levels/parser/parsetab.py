
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'lefterrorleftANDORleftNOTLTEGTENOT_EQUALEQUALLTGTleftASSIGNQUESTIONMARKCOLONleftPLUSMINUSleftTIMESDIVIDEMODleftLPARENRPARENLBRACERBRACELBRACKETRBRACKETAND ASSIGN COLON COMMA COMMENT DEF DIVIDE ELSE EQUAL FOR GT GTE IDENTIFIER IF INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MOD NOT NOT_EQUAL NULL_TYPE NUMBER OR PLUS QUESTIONMARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STR_TYPE TIMES TO VAR VECTOR_TYPE WHILEprog : emptyprog : func progfunc : DEF type iden LPAREN flist RPAREN func_choicefunc : DEF type iden LPAREN error RPAREN func_choicefunc_choice : LBRACE body RBRACEfunc_choice : RETURN expr SEMICOLONbody : emptybody : stmt bodybody : stmt errorstmt : expr SEMICOLONstmt : error SEMICOLONstmt : defvar SEMICOLONstmt : IF LPAREN expr RPAREN stmt else_choicestmt : IF LPAREN error RPAREN stmt else_choiceelse_choice : emptyelse_choice : ELSE stmtstmt : WHILE LPAREN expr RPAREN stmtstmt : WHILE LPAREN error RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN error TO expr RPAREN stmtstmt : RETURN expr SEMICOLONstmt : LBRACE body RBRACEstmt : funcdefvar : VAR type iden defvar_choicedefvar_choice : emptydefvar_choice : ASSIGN exprflist : emptyflist : type idenflist : type iden COMMA flistclist : emptyclist : exprclist : expr COMMA clisttype : INT_TYPE\n                | VECTOR_TYPE\n                | STR_TYPE\n                | NULL_TYPEexpr : expr LBRACKET expr RBRACKETexpr : expr LBRACKET error RBRACKETexpr : LBRACKET clist RBRACKETexpr : LBRACKET error RBRACKETexpr : expr QUESTIONMARK expr COLON exprexpr : expr QUESTIONMARK expr error exprexpr : expr ASSIGN expr\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr MOD expr\n                | expr GT expr\n                | expr LT expr\n                | expr EQUAL expr\n                | expr GTE expr\n                | expr LTE expr\n                | expr NOT_EQUAL expr\n                | expr OR expr\n                | expr AND exprexpr : NOT expr\n                | PLUS expr\n                | MINUS exprexpr : idenexpr : iden LPAREN clist RPARENexpr : iden LPAREN error RPARENexpr : numexpr : striden : IDENTIFIERstr : STRINGnum : NUMBERempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,22,25,51,86,],[-68,0,-1,-68,-2,-3,-4,-5,-6,]),'DEF':([0,3,22,23,25,27,30,39,51,54,55,72,86,87,112,121,122,123,124,134,135,136,137,141,142,143,144,147,150,151,152,153,],[4,4,-3,4,-4,4,4,-23,-5,-11,-10,-12,-6,-22,-21,4,4,4,4,-68,-68,-17,-18,-13,-15,4,-14,-16,4,4,-19,-20,]),'INT_TYPE':([4,13,21,46,],[7,7,7,7,]),'VECTOR_TYPE':([4,13,21,46,],[8,8,8,8,]),'STR_TYPE':([4,13,21,46,],[9,9,9,9,]),'NULL_TYPE':([4,13,21,46,],[10,10,10,10,]),'IDENTIFIER':([6,7,8,9,10,14,22,23,24,25,27,30,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,85,86,87,112,115,119,120,121,122,123,124,125,131,134,135,136,137,141,142,143,144,145,146,147,150,151,152,153,],[12,-33,-34,-35,-36,12,-3,12,12,-4,12,12,12,-23,12,12,12,12,-5,-11,-10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-12,12,12,12,12,12,-6,-22,-21,12,12,12,12,12,12,12,12,12,-68,-68,-17,-18,-13,-15,12,-14,12,12,-16,12,12,-19,-20,]),'LPAREN':([11,12,34,35,36,37,],[13,-65,73,74,75,76,]),'COMMA':([12,18,37,44,45,47,48,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,113,114,117,118,126,127,132,133,],[-65,21,-60,-63,-64,-67,-66,115,-58,-59,-57,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-39,-40,-37,-38,-61,-62,-41,-42,]),'RPAREN':([12,13,15,16,17,18,21,26,37,44,45,47,48,76,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,114,115,117,118,126,127,128,132,133,148,149,],[-65,-68,19,20,-27,-28,-68,-29,-60,-63,-64,-67,-66,-68,-30,-31,-58,-59,-57,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,121,122,123,124,126,127,-39,-40,-68,-37,-38,-61,-62,-32,-41,-42,150,151,]),'SEMICOLON':([12,31,32,33,37,44,45,47,48,49,53,77,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,113,114,116,117,118,126,127,129,130,132,133,140,],[-65,54,55,72,-60,-63,-64,-67,-66,86,54,112,-58,-59,-57,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-39,-40,-68,-37,-38,-61,-62,-24,-25,-41,-42,-26,]),'LBRACKET':([12,22,23,24,25,27,30,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,131,132,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,],[-65,-3,40,40,-4,40,40,56,-60,40,-23,40,40,40,40,-63,-64,-67,-66,56,-5,-11,-10,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-12,40,40,40,56,56,56,56,56,-6,-22,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-21,-39,-40,40,-37,-38,40,40,40,40,40,40,40,-61,-62,40,56,56,-68,-68,-17,-18,56,56,-13,-15,40,-14,40,40,-16,56,56,40,40,-19,-20,]),'QUESTIONMARK':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,57,-60,-63,-64,-67,-66,57,57,57,-58,-59,57,57,57,-43,-44,-45,-46,-47,-48,57,57,57,57,57,57,57,57,57,57,-39,-40,-37,-38,-61,-62,-41,57,57,57,57,57,]),'ASSIGN':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,113,114,116,117,118,126,127,132,133,138,140,148,149,],[-65,58,-60,-63,-64,-67,-66,58,58,58,-58,-59,58,58,58,-43,-44,-45,-46,-47,-48,58,58,58,58,58,58,58,58,58,58,125,-39,-40,131,-37,-38,-61,-62,-41,58,58,58,58,58,]),'PLUS':([12,22,23,24,25,27,30,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,131,132,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,],[-65,-3,41,41,-4,41,41,59,-60,41,-23,41,41,41,41,-63,-64,-67,-66,59,-5,-11,-10,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-12,41,41,41,59,59,-58,-59,59,-6,-22,59,59,59,-44,-45,-46,-47,-48,59,59,59,59,59,59,59,59,59,59,-21,-39,-40,41,-37,-38,41,41,41,41,41,41,41,-61,-62,41,59,59,-68,-68,-17,-18,59,59,-13,-15,41,-14,41,41,-16,59,59,41,41,-19,-20,]),'MINUS':([12,22,23,24,25,27,30,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,131,132,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,],[-65,-3,42,42,-4,42,42,60,-60,42,-23,42,42,42,42,-63,-64,-67,-66,60,-5,-11,-10,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-12,42,42,42,60,60,-58,-59,60,-6,-22,60,60,60,-44,-45,-46,-47,-48,60,60,60,60,60,60,60,60,60,60,-21,-39,-40,42,-37,-38,42,42,42,42,42,42,42,-61,-62,42,60,60,-68,-68,-17,-18,60,60,-13,-15,42,-14,42,42,-16,60,60,42,42,-19,-20,]),'TIMES':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,61,-60,-63,-64,-67,-66,61,61,61,61,61,61,61,61,61,61,61,-46,-47,-48,61,61,61,61,61,61,61,61,61,61,-39,-40,-37,-38,-61,-62,61,61,61,61,61,61,]),'DIVIDE':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,62,-60,-63,-64,-67,-66,62,62,62,62,62,62,62,62,62,62,62,-46,-47,-48,62,62,62,62,62,62,62,62,62,62,-39,-40,-37,-38,-61,-62,62,62,62,62,62,62,]),'MOD':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,63,-60,-63,-64,-67,-66,63,63,63,63,63,63,63,63,63,63,63,-46,-47,-48,63,63,63,63,63,63,63,63,63,63,-39,-40,-37,-38,-61,-62,63,63,63,63,63,63,]),'GT':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,64,-60,-63,-64,-67,-66,64,64,64,-58,-59,-57,64,64,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,64,64,64,64,-39,-40,-37,-38,-61,-62,-41,64,64,64,64,64,]),'LT':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,65,-60,-63,-64,-67,-66,65,65,65,-58,-59,-57,65,65,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,65,65,65,65,-39,-40,-37,-38,-61,-62,-41,65,65,65,65,65,]),'EQUAL':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,66,-60,-63,-64,-67,-66,66,66,66,-58,-59,-57,66,66,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,66,66,66,66,-39,-40,-37,-38,-61,-62,-41,66,66,66,66,66,]),'GTE':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,67,-60,-63,-64,-67,-66,67,67,67,-58,-59,-57,67,67,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,67,67,67,67,-39,-40,-37,-38,-61,-62,-41,67,67,67,67,67,]),'LTE':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,68,-60,-63,-64,-67,-66,68,68,68,-58,-59,-57,68,68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,68,68,68,68,-39,-40,-37,-38,-61,-62,-41,68,68,68,68,68,]),'NOT_EQUAL':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,69,-60,-63,-64,-67,-66,69,69,69,-58,-59,-57,69,69,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,69,69,69,69,-39,-40,-37,-38,-61,-62,-41,69,69,69,69,69,]),'OR':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,70,-60,-63,-64,-67,-66,70,70,70,-58,-59,-57,70,70,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,70,70,-39,-40,-37,-38,-61,-62,-41,70,70,70,70,70,]),'AND':([12,32,37,44,45,47,48,49,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,114,117,118,126,127,132,133,138,140,148,149,],[-65,71,-60,-63,-64,-67,-66,71,71,71,-58,-59,-57,71,71,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,71,71,-39,-40,-37,-38,-61,-62,-41,71,71,71,71,71,]),'RBRACKET':([12,37,40,44,45,47,48,78,79,80,81,82,83,84,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,113,114,115,117,118,126,127,128,132,133,],[-65,-60,-68,-63,-64,-67,-66,113,114,-30,-31,-58,-59,-57,117,118,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-39,-40,-68,-37,-38,-61,-62,-32,-41,-42,]),'COLON':([12,37,44,45,47,48,82,83,84,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,113,114,117,118,126,127,132,133,],[-65,-60,-63,-64,-67,-66,-58,-59,-57,119,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-39,-40,-37,-38,-61,-62,-41,-42,]),'error':([12,13,22,23,25,27,30,37,39,40,44,45,47,48,51,54,55,56,72,73,74,76,82,83,84,86,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,112,113,114,117,118,121,122,123,124,125,126,127,132,133,134,135,136,137,141,142,143,144,147,150,151,152,153,],[-65,16,-3,31,-4,31,53,-60,-23,79,-63,-64,-67,-66,-5,-11,-10,89,-12,106,108,111,-58,-59,-57,-6,-22,120,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-21,-39,-40,-37,-38,31,31,31,31,139,-61,-62,-41,-42,-68,-68,-17,-18,-13,-15,31,-14,-16,31,31,-19,-20,]),'TO':([12,37,44,45,47,48,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,113,114,117,118,126,127,132,133,138,139,],[-65,-60,-63,-64,-67,-66,-58,-59,-57,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-39,-40,-37,-38,-61,-62,-41,-42,145,146,]),'LBRACE':([19,20,22,23,25,27,30,39,51,54,55,72,86,87,112,121,122,123,124,134,135,136,137,141,142,143,144,147,150,151,152,153,],[23,23,-3,27,-4,27,27,-23,-5,-11,-10,-12,-6,-22,-21,27,27,27,27,-68,-68,-17,-18,-13,-15,27,-14,-16,27,27,-19,-20,]),'RETURN':([19,20,22,23,25,27,30,39,51,54,55,72,86,87,112,121,122,123,124,134,135,136,137,141,142,143,144,147,150,151,152,153,],[24,24,-3,38,-4,38,38,-23,-5,-11,-10,-12,-6,-22,-21,38,38,38,38,-68,-68,-17,-18,-13,-15,38,-14,-16,38,38,-19,-20,]),'IF':([22,23,25,27,30,39,51,54,55,72,86,87,112,121,122,123,124,134,135,136,137,141,142,143,144,147,150,151,152,153,],[-3,34,-4,34,34,-23,-5,-11,-10,-12,-6,-22,-21,34,34,34,34,-68,-68,-17,-18,-13,-15,34,-14,-16,34,34,-19,-20,]),'WHILE':([22,23,25,27,30,39,51,54,55,72,86,87,112,121,122,123,124,134,135,136,137,141,142,143,144,147,150,151,152,153,],[-3,35,-4,35,35,-23,-5,-11,-10,-12,-6,-22,-21,35,35,35,35,-68,-68,-17,-18,-13,-15,35,-14,-16,35,35,-19,-20,]),'FOR':([22,23,25,27,30,39,51,54,55,72,86,87,112,121,122,123,124,134,135,136,137,141,142,143,144,147,150,151,152,153,],[-3,36,-4,36,36,-23,-5,-11,-10,-12,-6,-22,-21,36,36,36,36,-68,-68,-17,-18,-13,-15,36,-14,-16,36,36,-19,-20,]),'NOT':([22,23,24,25,27,30,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,86,87,112,115,119,120,121,122,123,124,125,131,134,135,136,137,141,142,143,144,145,146,147,150,151,152,153,],[-3,43,43,-4,43,43,43,-23,43,43,43,43,-5,-11,-10,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-12,43,43,43,-6,-22,-21,43,43,43,43,43,43,43,43,43,-68,-68,-17,-18,-13,-15,43,-14,43,43,-16,43,43,-19,-20,]),'VAR':([22,23,25,27,30,39,51,54,55,72,86,87,112,121,122,123,124,134,135,136,137,141,142,143,144,147,150,151,152,153,],[-3,46,-4,46,46,-23,-5,-11,-10,-12,-6,-22,-21,46,46,46,46,-68,-68,-17,-18,-13,-15,46,-14,-16,46,46,-19,-20,]),'NUMBER':([22,23,24,25,27,30,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,86,87,112,115,119,120,121,122,123,124,125,131,134,135,136,137,141,142,143,144,145,146,147,150,151,152,153,],[-3,47,47,-4,47,47,47,-23,47,47,47,47,-5,-11,-10,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-12,47,47,47,-6,-22,-21,47,47,47,47,47,47,47,47,47,-68,-68,-17,-18,-13,-15,47,-14,47,47,-16,47,47,-19,-20,]),'STRING':([22,23,24,25,27,30,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,86,87,112,115,119,120,121,122,123,124,125,131,134,135,136,137,141,142,143,144,145,146,147,150,151,152,153,],[-3,48,48,-4,48,48,48,-23,48,48,48,48,-5,-11,-10,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-12,48,48,48,-6,-22,-21,48,48,48,48,48,48,48,48,48,-68,-68,-17,-18,-13,-15,48,-14,48,48,-16,48,48,-19,-20,]),'RBRACE':([22,23,25,27,28,29,30,39,50,51,52,53,54,55,72,86,87,112,134,135,136,137,141,142,144,147,152,153,],[-3,-68,-4,-68,51,-7,-68,-23,87,-5,-8,-9,-11,-10,-12,-6,-22,-21,-68,-68,-17,-18,-13,-15,-14,-16,-19,-20,]),'ELSE':([22,25,39,51,54,55,72,86,87,112,134,135,136,137,141,142,144,147,152,153,],[-3,-4,-23,-5,-11,-10,-12,-6,-22,-21,143,143,-17,-18,-13,-15,-14,-16,-19,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,13,21,23,27,30,40,76,115,116,134,135,],[2,2,17,17,29,29,29,80,80,80,130,142,142,]),'func':([0,3,23,27,30,121,122,123,124,143,150,151,],[3,3,39,39,39,39,39,39,39,39,39,39,]),'type':([4,13,21,46,],[6,14,14,85,]),'iden':([6,14,23,24,27,30,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,85,115,119,120,121,122,123,124,125,131,143,145,146,150,151,],[11,18,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,109,37,116,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'flist':([13,21,],[15,26,]),'func_choice':([19,20,],[22,25,]),'body':([23,27,30,],[28,50,52,]),'stmt':([23,27,30,121,122,123,124,143,150,151,],[30,30,30,134,135,136,137,147,152,153,]),'expr':([23,24,27,30,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,115,119,120,121,122,123,124,125,131,143,145,146,150,151,],[32,49,32,32,77,81,82,83,84,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,81,81,132,133,32,32,32,32,138,140,32,148,149,32,32,]),'defvar':([23,27,30,121,122,123,124,143,150,151,],[33,33,33,33,33,33,33,33,33,33,]),'num':([23,24,27,30,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,115,119,120,121,122,123,124,125,131,143,145,146,150,151,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'str':([23,24,27,30,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,115,119,120,121,122,123,124,125,131,143,145,146,150,151,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'clist':([40,76,115,],[78,110,128,]),'defvar_choice':([116,],[129,]),'else_choice':([134,135,],[141,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog1','grammer.py',15),
  ('prog -> func prog','prog',2,'p_prog2','grammer.py',18),
  ('func -> DEF type iden LPAREN flist RPAREN func_choice','func',7,'p_func','grammer.py',22),
  ('func -> DEF type iden LPAREN error RPAREN func_choice','func',7,'p_func_error','grammer.py',27),
  ('func_choice -> LBRACE body RBRACE','func_choice',3,'p_func_choice1','grammer.py',33),
  ('func_choice -> RETURN expr SEMICOLON','func_choice',3,'p_func_choice2','grammer.py',36),
  ('body -> empty','body',1,'p_body1','grammer.py',39),
  ('body -> stmt body','body',2,'p_body2','grammer.py',42),
  ('body -> stmt error','body',2,'p_body2_error','grammer.py',45),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt1','grammer.py',51),
  ('stmt -> error SEMICOLON','stmt',2,'p_stmt1_error','grammer.py',54),
  ('stmt -> defvar SEMICOLON','stmt',2,'p_stmt2','grammer.py',60),
  ('stmt -> IF LPAREN expr RPAREN stmt else_choice','stmt',6,'p_stmt3','grammer.py',63),
  ('stmt -> IF LPAREN error RPAREN stmt else_choice','stmt',6,'p_stmt3_error','grammer.py',66),
  ('else_choice -> empty','else_choice',1,'p_else_choice1','grammer.py',71),
  ('else_choice -> ELSE stmt','else_choice',2,'p_else_choice2','grammer.py',74),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt4','grammer.py',77),
  ('stmt -> WHILE LPAREN error RPAREN stmt','stmt',5,'p_stmt4_error','grammer.py',80),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt','stmt',9,'p_stmt5','grammer.py',85),
  ('stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt','stmt',9,'p_stmt5_error','grammer.py',88),
  ('stmt -> RETURN expr SEMICOLON','stmt',3,'p_stmt6','grammer.py',93),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt7','grammer.py',96),
  ('stmt -> func','stmt',1,'p_stmt8','grammer.py',99),
  ('defvar -> VAR type iden defvar_choice','defvar',4,'p_defvar','grammer.py',102),
  ('defvar_choice -> empty','defvar_choice',1,'p_defvar_choice1','grammer.py',105),
  ('defvar_choice -> ASSIGN expr','defvar_choice',2,'p_defvar_choice2','grammer.py',108),
  ('flist -> empty','flist',1,'p_flist1','grammer.py',111),
  ('flist -> type iden','flist',2,'p_flist2','grammer.py',114),
  ('flist -> type iden COMMA flist','flist',4,'p_flist3','grammer.py',117),
  ('clist -> empty','clist',1,'p_clist1','grammer.py',120),
  ('clist -> expr','clist',1,'p_clist2','grammer.py',123),
  ('clist -> expr COMMA clist','clist',3,'p_clist3','grammer.py',126),
  ('type -> INT_TYPE','type',1,'p_type','grammer.py',129),
  ('type -> VECTOR_TYPE','type',1,'p_type','grammer.py',130),
  ('type -> STR_TYPE','type',1,'p_type','grammer.py',131),
  ('type -> NULL_TYPE','type',1,'p_type','grammer.py',132),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_expr1','grammer.py',135),
  ('expr -> expr LBRACKET error RBRACKET','expr',4,'p_expr1_error','grammer.py',138),
  ('expr -> LBRACKET clist RBRACKET','expr',3,'p_expr2','grammer.py',143),
  ('expr -> LBRACKET error RBRACKET','expr',3,'p_expr2_error','grammer.py',146),
  ('expr -> expr QUESTIONMARK expr COLON expr','expr',5,'p_expr3','grammer.py',151),
  ('expr -> expr QUESTIONMARK expr error expr','expr',5,'p_expr3_error','grammer.py',155),
  ('expr -> expr ASSIGN expr','expr',3,'p_expr4','grammer.py',160),
  ('expr -> expr PLUS expr','expr',3,'p_expr4','grammer.py',161),
  ('expr -> expr MINUS expr','expr',3,'p_expr4','grammer.py',162),
  ('expr -> expr TIMES expr','expr',3,'p_expr4','grammer.py',163),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr4','grammer.py',164),
  ('expr -> expr MOD expr','expr',3,'p_expr4','grammer.py',165),
  ('expr -> expr GT expr','expr',3,'p_expr4','grammer.py',166),
  ('expr -> expr LT expr','expr',3,'p_expr4','grammer.py',167),
  ('expr -> expr EQUAL expr','expr',3,'p_expr4','grammer.py',168),
  ('expr -> expr GTE expr','expr',3,'p_expr4','grammer.py',169),
  ('expr -> expr LTE expr','expr',3,'p_expr4','grammer.py',170),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr4','grammer.py',171),
  ('expr -> expr OR expr','expr',3,'p_expr4','grammer.py',172),
  ('expr -> expr AND expr','expr',3,'p_expr4','grammer.py',173),
  ('expr -> NOT expr','expr',2,'p_expr5','grammer.py',181),
  ('expr -> PLUS expr','expr',2,'p_expr5','grammer.py',182),
  ('expr -> MINUS expr','expr',2,'p_expr5','grammer.py',183),
  ('expr -> iden','expr',1,'p_expr6','grammer.py',186),
  ('expr -> iden LPAREN clist RPAREN','expr',4,'p_expr7','grammer.py',189),
  ('expr -> iden LPAREN error RPAREN','expr',4,'p_expr7_error','grammer.py',192),
  ('expr -> num','expr',1,'p_expr8','grammer.py',197),
  ('expr -> str','expr',1,'p_expr9','grammer.py',200),
  ('iden -> IDENTIFIER','iden',1,'p_iden','grammer.py',203),
  ('str -> STRING','str',1,'p_str','grammer.py',206),
  ('num -> NUMBER','num',1,'p_num','grammer.py',209),
  ('empty -> <empty>','empty',0,'p_empty','grammer.py',212),
]
