
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'lefterrorleftANDORleftNOTLTEGTENOT_EQUALEQUALLTGTleftASSIGNQUESTIONMARKCOLONleftPLUSMINUSleftTIMESDIVIDEMODleftLPARENRPARENLBRACERBRACELBRACKETRBRACKETAND ASSIGN COLON COMMA COMMENT DEF DIVIDE ELSE EQUAL FOR GT GTE IDENTIFIER IF INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MOD NOT NOT_EQUAL NULL_TYPE NUMBER OR PLUS QUESTIONMARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STR_TYPE TIMES TO VAR VECTOR_TYPE WHILEprog : emptyprog : func progfunc : DEF type vector_type_choice iden LPAREN flist RPAREN func_choicefunc : DEF type vector_type_choice iden LPAREN error RPAREN func_choicefunc_choice : LBRACE body RBRACEfunc_choice : RETURN expr SEMICOLONbody : emptybody : stmt bodybody : error bodystmt : expr SEMICOLONstmt : error SEMICOLONstmt : defvar SEMICOLONstmt : IF LPAREN expr RPAREN stmt else_choicestmt : IF LPAREN error RPAREN stmt else_choiceelse_choice : emptyelse_choice : ELSE stmtstmt : WHILE LPAREN expr RPAREN stmtstmt : WHILE LPAREN error RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN error TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO error RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO expr RPAREN errorstmt : RETURN expr SEMICOLONstmt : LBRACE body RBRACEstmt : funcdefvar : VAR type vector_type_choice iden defvar_choicedefvar : VAR error vector_type_choice iden defvar_choicevector_type_choice : emptyvector_type_choice : LT type GTvector_type_choice : LT error GTdefvar_choice : emptydefvar_choice : ASSIGN exprflist : emptyflist : type vector_type_choice idenflist : type vector_type_choice iden COMMA flistclist : emptyclist : exprclist : expr COMMA clistexpr : expr LBRACKET expr RBRACKETexpr : expr LBRACKET error RBRACKETexpr : LBRACKET clist RBRACKETexpr : LBRACKET error RBRACKETexpr : expr QUESTIONMARK expr COLON exprexpr : expr QUESTIONMARK expr error exprexpr : expr ASSIGN expr\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr MOD expr\n                | expr GT expr\n                | expr LT expr\n                | expr EQUAL expr\n                | expr GTE expr\n                | expr LTE expr\n                | expr NOT_EQUAL expr\n                | expr OR expr\n                | expr AND exprexpr : NOT expr\n                | PLUS expr\n                | MINUS exprexpr : idenexpr : iden LPAREN clist RPARENexpr : iden LPAREN error RPARENexpr : numexpr : strtype : INT_TYPE\n                | VECTOR_TYPE\n                | STR_TYPE\n                | NULL_TYPEiden : IDENTIFIERstr : STRINGnum : NUMBERempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,29,32,59,95,],[-74,0,-1,-74,-2,-3,-4,-5,-6,]),'DEF':([0,3,29,30,32,34,37,38,46,59,62,63,80,95,96,121,131,132,133,134,143,145,146,147,154,155,156,157,161,165,166,167,168,169,170,171,],[4,4,-3,4,-4,4,4,4,-25,-5,-11,-10,-12,-6,-24,-23,4,4,4,4,-74,-74,-17,-18,-13,-15,4,-14,-16,4,4,4,-19,-22,-21,-20,]),'INT_TYPE':([4,13,18,33,53,],[7,7,7,7,7,]),'VECTOR_TYPE':([4,13,18,33,53,],[8,8,8,8,8,]),'STR_TYPE':([4,13,18,33,53,],[9,9,9,9,9,]),'NULL_TYPE':([4,13,18,33,53,],[10,10,10,10,10,]),'LT':([6,7,8,9,10,15,21,39,44,51,52,54,55,56,85,89,90,91,92,93,94,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[13,-67,-68,-69,-70,-71,13,73,-62,-65,-66,-73,-72,73,73,73,-60,-61,-59,13,13,73,73,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,73,73,73,73,-41,-42,-39,-40,-63,-64,-43,73,73,73,73,73,]),'IDENTIFIER':([6,7,8,9,10,11,12,19,20,21,25,29,30,31,32,34,37,38,45,46,47,48,49,50,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,93,94,95,96,121,124,125,126,129,130,131,132,133,134,135,143,145,146,147,152,154,155,156,157,158,159,161,165,166,167,168,169,170,171,],[-74,-67,-68,-69,-70,15,-28,-29,-30,-74,15,-3,15,15,-4,15,15,15,15,-25,15,15,15,15,-5,-11,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-12,15,15,15,15,-74,-74,-6,-24,-23,15,15,15,15,15,15,15,15,15,15,-74,-74,-17,-18,15,-13,-15,15,-14,15,15,-16,15,15,15,-19,-22,-21,-20,]),'GT':([7,8,9,10,15,16,17,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-67,-68,-69,-70,-71,19,20,72,-62,-65,-66,-73,-72,72,72,72,-60,-61,-59,72,72,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,72,72,72,72,-41,-42,-39,-40,-63,-64,-43,72,72,72,72,72,]),'error':([13,15,18,29,30,32,34,37,38,44,46,47,51,52,53,54,55,59,62,63,64,80,81,82,84,90,91,92,95,96,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,121,122,123,127,128,131,132,133,134,135,136,137,141,142,143,145,146,147,154,155,156,157,158,161,165,166,167,168,169,170,171,],[17,-71,23,-3,38,-4,38,38,38,-62,-25,87,-65,-66,94,-73,-72,-5,-11,-10,98,-12,115,117,120,-60,-61,-59,-6,-24,130,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-23,-41,-42,-39,-40,144,144,144,144,149,-63,-64,-43,-44,-74,-74,-17,-18,-13,-15,144,-14,163,-16,169,144,144,-19,-22,-21,-20,]),'LPAREN':([14,15,41,42,43,44,],[18,-71,81,82,83,84,]),'COMMA':([15,28,44,51,52,54,55,89,90,91,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,123,127,128,136,137,141,142,],[-71,33,-62,-65,-66,-73,-72,124,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-39,-40,-63,-64,-43,-44,]),'RPAREN':([15,18,22,23,24,28,33,44,51,52,54,55,57,84,88,89,90,91,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,122,123,124,127,128,136,137,138,141,142,162,163,164,],[-71,-74,26,27,-33,-34,-74,-62,-65,-66,-73,-72,-35,-74,-36,-37,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,131,132,133,134,136,137,-41,-42,-74,-39,-40,-63,-64,-38,-43,-44,165,166,167,]),'SEMICOLON':([15,38,39,40,44,51,52,54,55,56,85,90,91,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,123,127,128,136,137,139,140,141,142,144,150,151,153,160,169,],[-71,62,63,80,-62,-65,-66,-73,-72,95,121,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-39,-40,-63,-64,-74,-74,-43,-44,62,-26,-31,-27,-32,62,]),'LBRACKET':([15,29,30,31,32,34,37,38,39,44,45,46,47,48,49,50,51,52,54,55,56,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,89,90,91,92,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,141,142,143,145,146,147,148,152,154,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,],[-71,-3,47,47,-4,47,47,47,64,-62,47,-25,47,47,47,47,-65,-66,-73,-72,64,-5,-11,-10,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-12,47,47,47,64,64,64,64,64,-6,-24,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-23,-41,-42,47,-39,-40,47,47,47,47,47,47,47,-63,-64,64,64,-74,-74,-17,-18,64,47,-13,-15,47,-14,47,47,64,-16,64,64,47,47,47,-19,-22,-21,-20,]),'QUESTIONMARK':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,65,-62,-65,-66,-73,-72,65,65,65,-60,-61,65,65,65,-45,-46,-47,-48,-49,-50,65,65,65,65,65,65,65,65,65,65,-41,-42,-39,-40,-63,-64,-43,65,65,65,65,65,]),'ASSIGN':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,118,122,123,127,128,136,137,139,140,141,142,148,160,162,164,],[-71,66,-62,-65,-66,-73,-72,66,66,66,-60,-61,66,66,66,-45,-46,-47,-48,-49,-50,66,66,66,66,66,66,66,66,66,66,135,-41,-42,-39,-40,-63,-64,152,152,-43,66,66,66,66,66,]),'PLUS':([15,29,30,31,32,34,37,38,39,44,45,46,47,48,49,50,51,52,54,55,56,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,89,90,91,92,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,141,142,143,145,146,147,148,152,154,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,],[-71,-3,48,48,-4,48,48,48,67,-62,48,-25,48,48,48,48,-65,-66,-73,-72,67,-5,-11,-10,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-12,48,48,48,67,67,-60,-61,67,-6,-24,67,67,67,-46,-47,-48,-49,-50,67,67,67,67,67,67,67,67,67,67,-23,-41,-42,48,-39,-40,48,48,48,48,48,48,48,-63,-64,67,67,-74,-74,-17,-18,67,48,-13,-15,48,-14,48,48,67,-16,67,67,48,48,48,-19,-22,-21,-20,]),'MINUS':([15,29,30,31,32,34,37,38,39,44,45,46,47,48,49,50,51,52,54,55,56,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,89,90,91,92,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,141,142,143,145,146,147,148,152,154,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,],[-71,-3,49,49,-4,49,49,49,68,-62,49,-25,49,49,49,49,-65,-66,-73,-72,68,-5,-11,-10,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-12,49,49,49,68,68,-60,-61,68,-6,-24,68,68,68,-46,-47,-48,-49,-50,68,68,68,68,68,68,68,68,68,68,-23,-41,-42,49,-39,-40,49,49,49,49,49,49,49,-63,-64,68,68,-74,-74,-17,-18,68,49,-13,-15,49,-14,49,49,68,-16,68,68,49,49,49,-19,-22,-21,-20,]),'TIMES':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,69,-62,-65,-66,-73,-72,69,69,69,69,69,69,69,69,69,69,69,-48,-49,-50,69,69,69,69,69,69,69,69,69,69,-41,-42,-39,-40,-63,-64,69,69,69,69,69,69,]),'DIVIDE':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,70,-62,-65,-66,-73,-72,70,70,70,70,70,70,70,70,70,70,70,-48,-49,-50,70,70,70,70,70,70,70,70,70,70,-41,-42,-39,-40,-63,-64,70,70,70,70,70,70,]),'MOD':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,71,-62,-65,-66,-73,-72,71,71,71,71,71,71,71,71,71,71,71,-48,-49,-50,71,71,71,71,71,71,71,71,71,71,-41,-42,-39,-40,-63,-64,71,71,71,71,71,71,]),'EQUAL':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,74,-62,-65,-66,-73,-72,74,74,74,-60,-61,-59,74,74,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,74,74,74,74,-41,-42,-39,-40,-63,-64,-43,74,74,74,74,74,]),'GTE':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,75,-62,-65,-66,-73,-72,75,75,75,-60,-61,-59,75,75,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,75,75,75,75,-41,-42,-39,-40,-63,-64,-43,75,75,75,75,75,]),'LTE':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,76,-62,-65,-66,-73,-72,76,76,76,-60,-61,-59,76,76,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,76,76,76,76,-41,-42,-39,-40,-63,-64,-43,76,76,76,76,76,]),'NOT_EQUAL':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,77,-62,-65,-66,-73,-72,77,77,77,-60,-61,-59,77,77,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,77,77,77,77,-41,-42,-39,-40,-63,-64,-43,77,77,77,77,77,]),'OR':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,78,-62,-65,-66,-73,-72,78,78,78,-60,-61,-59,78,78,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,78,78,-41,-42,-39,-40,-63,-64,-43,78,78,78,78,78,]),'AND':([15,39,44,51,52,54,55,56,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,127,128,136,137,141,142,148,160,162,164,],[-71,79,-62,-65,-66,-73,-72,79,79,79,-60,-61,-59,79,79,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,79,79,-41,-42,-39,-40,-63,-64,-43,79,79,79,79,79,]),'RBRACKET':([15,44,47,51,52,54,55,86,87,88,89,90,91,92,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,123,124,127,128,136,137,138,141,142,],[-71,-62,-74,-65,-66,-73,-72,122,123,-36,-37,-60,-61,-59,127,128,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-74,-39,-40,-63,-64,-38,-43,-44,]),'COLON':([15,44,51,52,54,55,90,91,92,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,123,127,128,136,137,141,142,],[-71,-62,-65,-66,-73,-72,-60,-61,-59,129,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-39,-40,-63,-64,-43,-44,]),'TO':([15,44,51,52,54,55,90,91,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,123,127,128,136,137,141,142,148,149,],[-71,-62,-65,-66,-73,-72,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-39,-40,-63,-64,-43,-44,158,159,]),'LBRACE':([26,27,29,30,32,34,37,38,46,59,62,63,80,95,96,121,131,132,133,134,143,145,146,147,154,155,156,157,161,165,166,167,168,169,170,171,],[30,30,-3,34,-4,34,34,34,-25,-5,-11,-10,-12,-6,-24,-23,34,34,34,34,-74,-74,-17,-18,-13,-15,34,-14,-16,34,34,34,-19,-22,-21,-20,]),'RETURN':([26,27,29,30,32,34,37,38,46,59,62,63,80,95,96,121,131,132,133,134,143,145,146,147,154,155,156,157,161,165,166,167,168,169,170,171,],[31,31,-3,45,-4,45,45,45,-25,-5,-11,-10,-12,-6,-24,-23,45,45,45,45,-74,-74,-17,-18,-13,-15,45,-14,-16,45,45,45,-19,-22,-21,-20,]),'IF':([29,30,32,34,37,38,46,59,62,63,80,95,96,121,131,132,133,134,143,145,146,147,154,155,156,157,161,165,166,167,168,169,170,171,],[-3,41,-4,41,41,41,-25,-5,-11,-10,-12,-6,-24,-23,41,41,41,41,-74,-74,-17,-18,-13,-15,41,-14,-16,41,41,41,-19,-22,-21,-20,]),'WHILE':([29,30,32,34,37,38,46,59,62,63,80,95,96,121,131,132,133,134,143,145,146,147,154,155,156,157,161,165,166,167,168,169,170,171,],[-3,42,-4,42,42,42,-25,-5,-11,-10,-12,-6,-24,-23,42,42,42,42,-74,-74,-17,-18,-13,-15,42,-14,-16,42,42,42,-19,-22,-21,-20,]),'FOR':([29,30,32,34,37,38,46,59,62,63,80,95,96,121,131,132,133,134,143,145,146,147,154,155,156,157,161,165,166,167,168,169,170,171,],[-3,43,-4,43,43,43,-25,-5,-11,-10,-12,-6,-24,-23,43,43,43,43,-74,-74,-17,-18,-13,-15,43,-14,-16,43,43,43,-19,-22,-21,-20,]),'NOT':([29,30,31,32,34,37,38,45,46,47,48,49,50,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,95,96,121,124,129,130,131,132,133,134,135,143,145,146,147,152,154,155,156,157,158,159,161,165,166,167,168,169,170,171,],[-3,50,50,-4,50,50,50,50,-25,50,50,50,50,-5,-11,-10,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-12,50,50,50,-6,-24,-23,50,50,50,50,50,50,50,50,-74,-74,-17,-18,50,-13,-15,50,-14,50,50,-16,50,50,50,-19,-22,-21,-20,]),'VAR':([29,30,32,34,37,38,46,59,62,63,80,95,96,121,131,132,133,134,143,145,146,147,154,155,156,157,161,165,166,167,168,169,170,171,],[-3,53,-4,53,53,53,-25,-5,-11,-10,-12,-6,-24,-23,53,53,53,53,-74,-74,-17,-18,-13,-15,53,-14,-16,53,53,53,-19,-22,-21,-20,]),'NUMBER':([29,30,31,32,34,37,38,45,46,47,48,49,50,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,95,96,121,124,129,130,131,132,133,134,135,143,145,146,147,152,154,155,156,157,158,159,161,165,166,167,168,169,170,171,],[-3,54,54,-4,54,54,54,54,-25,54,54,54,54,-5,-11,-10,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-12,54,54,54,-6,-24,-23,54,54,54,54,54,54,54,54,-74,-74,-17,-18,54,-13,-15,54,-14,54,54,-16,54,54,54,-19,-22,-21,-20,]),'STRING':([29,30,31,32,34,37,38,45,46,47,48,49,50,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,95,96,121,124,129,130,131,132,133,134,135,143,145,146,147,152,154,155,156,157,158,159,161,165,166,167,168,169,170,171,],[-3,55,55,-4,55,55,55,55,-25,55,55,55,55,-5,-11,-10,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-12,55,55,55,-6,-24,-23,55,55,55,55,55,55,55,55,-74,-74,-17,-18,55,-13,-15,55,-14,55,55,-16,55,55,55,-19,-22,-21,-20,]),'RBRACE':([29,30,32,34,35,36,37,38,46,58,59,60,61,62,63,80,95,96,121,143,145,146,147,154,155,157,161,168,169,170,171,],[-3,-74,-4,-74,59,-7,-74,-74,-25,96,-5,-8,-9,-11,-10,-12,-6,-24,-23,-74,-74,-17,-18,-13,-15,-14,-16,-19,-22,-21,-20,]),'ELSE':([29,32,46,59,62,63,80,95,96,121,143,145,146,147,154,155,157,161,168,169,170,171,],[-3,-4,-25,-5,-11,-10,-12,-6,-24,-23,156,156,-17,-18,-13,-15,-14,-16,-19,-22,-21,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,6,18,21,30,33,34,37,38,47,84,93,94,124,139,140,143,145,],[2,2,12,24,12,36,24,36,36,36,88,88,12,12,88,151,151,155,155,]),'func':([0,3,30,34,37,38,131,132,133,134,156,165,166,167,],[3,3,46,46,46,46,46,46,46,46,46,46,46,46,]),'type':([4,13,18,33,53,],[6,16,21,21,93,]),'vector_type_choice':([6,21,93,94,],[11,25,125,126,]),'iden':([11,25,30,31,34,37,38,45,47,48,49,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,124,125,126,129,130,131,132,133,134,135,152,156,158,159,165,166,167,],[14,28,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,118,44,44,139,140,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'flist':([18,33,],[22,57,]),'func_choice':([26,27,],[29,32,]),'body':([30,34,37,38,],[35,58,60,61,]),'stmt':([30,34,37,38,131,132,133,134,156,165,166,167,],[37,37,37,37,143,145,146,147,161,168,170,171,]),'expr':([30,31,34,37,38,45,47,48,49,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,84,124,129,130,131,132,133,134,135,152,156,158,159,165,166,167,],[39,56,39,39,39,85,89,90,91,92,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,89,89,141,142,39,39,39,39,148,160,39,162,164,39,39,39,]),'defvar':([30,34,37,38,131,132,133,134,156,165,166,167,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'num':([30,31,34,37,38,45,47,48,49,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,84,124,129,130,131,132,133,134,135,152,156,158,159,165,166,167,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'str':([30,31,34,37,38,45,47,48,49,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,84,124,129,130,131,132,133,134,135,152,156,158,159,165,166,167,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'clist':([47,84,124,],[86,119,138,]),'defvar_choice':([139,140,],[150,153,]),'else_choice':([143,145,],[154,157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog1','grammer.py',16),
  ('prog -> func prog','prog',2,'p_prog2','grammer.py',26),
  ('func -> DEF type vector_type_choice iden LPAREN flist RPAREN func_choice','func',8,'p_func','grammer.py',37),
  ('func -> DEF type vector_type_choice iden LPAREN error RPAREN func_choice','func',8,'p_func_error','grammer.py',46),
  ('func_choice -> LBRACE body RBRACE','func_choice',3,'p_func_choice1','grammer.py',58),
  ('func_choice -> RETURN expr SEMICOLON','func_choice',3,'p_func_choice2','grammer.py',67),
  ('body -> empty','body',1,'p_body1','grammer.py',76),
  ('body -> stmt body','body',2,'p_body2','grammer.py',85),
  ('body -> error body','body',2,'p_body2_error','grammer.py',97),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt1','grammer.py',111),
  ('stmt -> error SEMICOLON','stmt',2,'p_stmt1_error','grammer.py',120),
  ('stmt -> defvar SEMICOLON','stmt',2,'p_stmt2','grammer.py',132),
  ('stmt -> IF LPAREN expr RPAREN stmt else_choice','stmt',6,'p_stmt3','grammer.py',141),
  ('stmt -> IF LPAREN error RPAREN stmt else_choice','stmt',6,'p_stmt3_error','grammer.py',150),
  ('else_choice -> empty','else_choice',1,'p_else_choice1','grammer.py',162),
  ('else_choice -> ELSE stmt','else_choice',2,'p_else_choice2','grammer.py',171),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt4','grammer.py',180),
  ('stmt -> WHILE LPAREN error RPAREN stmt','stmt',5,'p_stmt4_error','grammer.py',189),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt','stmt',9,'p_stmt5','grammer.py',201),
  ('stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt','stmt',9,'p_stmt5_error1','grammer.py',210),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt','stmt',9,'p_stmt5_error2','grammer.py',222),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error','stmt',9,'p_stmt5_error3','grammer.py',234),
  ('stmt -> RETURN expr SEMICOLON','stmt',3,'p_stmt6','grammer.py',246),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt7','grammer.py',255),
  ('stmt -> func','stmt',1,'p_stmt8','grammer.py',264),
  ('defvar -> VAR type vector_type_choice iden defvar_choice','defvar',5,'p_defvar','grammer.py',273),
  ('defvar -> VAR error vector_type_choice iden defvar_choice','defvar',5,'p_defvar_error','grammer.py',282),
  ('vector_type_choice -> empty','vector_type_choice',1,'p_vector_type_choice1','grammer.py',295),
  ('vector_type_choice -> LT type GT','vector_type_choice',3,'p_vector_type_choice2','grammer.py',305),
  ('vector_type_choice -> LT error GT','vector_type_choice',3,'p_vector_type_choice2_error','grammer.py',314),
  ('defvar_choice -> empty','defvar_choice',1,'p_defvar_choice1','grammer.py',325),
  ('defvar_choice -> ASSIGN expr','defvar_choice',2,'p_defvar_choice2','grammer.py',334),
  ('flist -> empty','flist',1,'p_flist1','grammer.py',343),
  ('flist -> type vector_type_choice iden','flist',3,'p_flist2','grammer.py',352),
  ('flist -> type vector_type_choice iden COMMA flist','flist',5,'p_flist3','grammer.py',361),
  ('clist -> empty','clist',1,'p_clist1','grammer.py',370),
  ('clist -> expr','clist',1,'p_clist2','grammer.py',379),
  ('clist -> expr COMMA clist','clist',3,'p_clist3','grammer.py',388),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_expr1','grammer.py',397),
  ('expr -> expr LBRACKET error RBRACKET','expr',4,'p_expr1_error','grammer.py',406),
  ('expr -> LBRACKET clist RBRACKET','expr',3,'p_expr2','grammer.py',418),
  ('expr -> LBRACKET error RBRACKET','expr',3,'p_expr2_error','grammer.py',427),
  ('expr -> expr QUESTIONMARK expr COLON expr','expr',5,'p_expr3','grammer.py',439),
  ('expr -> expr QUESTIONMARK expr error expr','expr',5,'p_expr3_error','grammer.py',448),
  ('expr -> expr ASSIGN expr','expr',3,'p_expr4','grammer.py',460),
  ('expr -> expr PLUS expr','expr',3,'p_expr4','grammer.py',461),
  ('expr -> expr MINUS expr','expr',3,'p_expr4','grammer.py',462),
  ('expr -> expr TIMES expr','expr',3,'p_expr4','grammer.py',463),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr4','grammer.py',464),
  ('expr -> expr MOD expr','expr',3,'p_expr4','grammer.py',465),
  ('expr -> expr GT expr','expr',3,'p_expr4','grammer.py',466),
  ('expr -> expr LT expr','expr',3,'p_expr4','grammer.py',467),
  ('expr -> expr EQUAL expr','expr',3,'p_expr4','grammer.py',468),
  ('expr -> expr GTE expr','expr',3,'p_expr4','grammer.py',469),
  ('expr -> expr LTE expr','expr',3,'p_expr4','grammer.py',470),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr4','grammer.py',471),
  ('expr -> expr OR expr','expr',3,'p_expr4','grammer.py',472),
  ('expr -> expr AND expr','expr',3,'p_expr4','grammer.py',473),
  ('expr -> NOT expr','expr',2,'p_expr5','grammer.py',484),
  ('expr -> PLUS expr','expr',2,'p_expr5','grammer.py',485),
  ('expr -> MINUS expr','expr',2,'p_expr5','grammer.py',486),
  ('expr -> iden','expr',1,'p_expr6','grammer.py',495),
  ('expr -> iden LPAREN clist RPAREN','expr',4,'p_expr7','grammer.py',504),
  ('expr -> iden LPAREN error RPAREN','expr',4,'p_expr7_error','grammer.py',513),
  ('expr -> num','expr',1,'p_expr8','grammer.py',525),
  ('expr -> str','expr',1,'p_expr9','grammer.py',534),
  ('type -> INT_TYPE','type',1,'p_type','grammer.py',543),
  ('type -> VECTOR_TYPE','type',1,'p_type','grammer.py',544),
  ('type -> STR_TYPE','type',1,'p_type','grammer.py',545),
  ('type -> NULL_TYPE','type',1,'p_type','grammer.py',546),
  ('iden -> IDENTIFIER','iden',1,'p_iden','grammer.py',555),
  ('str -> STRING','str',1,'p_str','grammer.py',564),
  ('num -> NUMBER','num',1,'p_num','grammer.py',573),
  ('empty -> <empty>','empty',0,'p_empty','grammer.py',582),
]
