
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'lefterrorleftANDORleftNOTLTEGTENOT_EQUALEQUALLTGTleftASSIGNQUESTIONMARKCOLONleftPLUSMINUSleftTIMESDIVIDEMODleftLPARENRPARENLBRACERBRACELBRACKETRBRACKETAND ASSIGN COLON COMMA COMMENT DEF DIVIDE ELSE EQUAL FOR GT GTE IDENTIFIER IF INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MOD NOT NOT_EQUAL NULL_TYPE NUMBER OR PLUS QUESTIONMARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STR_TYPE TIMES TO VAR VECTOR_TYPE WHILEprog : emptyprog : func progfunc : DEF type iden LPAREN flist RPAREN func_choicefunc : DEF type iden LPAREN error RPAREN func_choicefunc_choice : LBRACE body RBRACEfunc_choice : RETURN expr SEMICOLONbody : emptybody : stmt bodybody : error bodystmt : expr SEMICOLONstmt : error SEMICOLONstmt : defvar SEMICOLONstmt : IF LPAREN expr RPAREN stmt else_choicestmt : IF LPAREN error RPAREN stmt else_choiceelse_choice : emptyelse_choice : ELSE stmtstmt : WHILE LPAREN expr RPAREN stmtstmt : WHILE LPAREN error RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN error TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO error RPAREN stmtstmt : RETURN expr SEMICOLONstmt : LBRACE body RBRACEstmt : funcdefvar : VAR type iden defvar_choicedefvar : VAR error iden defvar_choicedefvar_choice : emptydefvar_choice : ASSIGN exprflist : emptyflist : type idenflist : type iden COMMA flistclist : emptyclist : exprclist : expr COMMA clistexpr : expr LBRACKET expr RBRACKETexpr : expr LBRACKET error RBRACKETexpr : LBRACKET clist RBRACKETexpr : LBRACKET error RBRACKETexpr : expr QUESTIONMARK expr COLON exprexpr : expr QUESTIONMARK expr error exprexpr : expr ASSIGN expr\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr MOD expr\n                | expr GT expr\n                | expr LT expr\n                | expr EQUAL expr\n                | expr GTE expr\n                | expr LTE expr\n                | expr NOT_EQUAL expr\n                | expr OR expr\n                | expr AND exprexpr : NOT expr\n                | PLUS expr\n                | MINUS exprexpr : idenexpr : iden LPAREN clist RPARENexpr : iden LPAREN error RPARENexpr : numexpr : strtype : INT_TYPE\n                | VECTOR_TYPE\n                | STR_TYPE\n                | NULL_TYPEiden : IDENTIFIERstr : STRINGnum : NUMBERempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,22,25,51,87,],[-70,0,-1,-70,-2,-3,-4,-5,-6,]),'DEF':([0,3,22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,155,156,157,158,159,160,],[4,4,-3,4,-4,4,4,4,-24,-5,-11,-10,-12,-6,-23,-22,4,4,4,4,-70,-70,-17,-18,-13,-15,4,-14,-16,4,4,4,-19,-21,-20,]),'INT_TYPE':([4,13,21,46,],[7,7,7,7,]),'VECTOR_TYPE':([4,13,21,46,],[8,8,8,8,]),'STR_TYPE':([4,13,21,46,],[9,9,9,9,]),'NULL_TYPE':([4,13,21,46,],[10,10,10,10,]),'IDENTIFIER':([6,7,8,9,10,14,22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,85,86,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,155,156,157,158,159,160,],[12,-63,-64,-65,-66,12,-3,12,12,-4,12,12,12,12,-24,12,12,12,12,-5,-11,-10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-12,12,12,12,12,12,12,-6,-23,-22,12,12,12,12,12,12,12,12,12,-70,-70,-17,-18,-13,-15,12,-14,12,12,-16,12,12,12,-19,-21,-20,]),'LPAREN':([11,12,34,35,36,37,],[13,-67,73,74,75,76,]),'COMMA':([12,18,37,44,45,47,48,81,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,119,120,128,129,135,136,],[-67,21,-58,-61,-62,-69,-68,116,-56,-57,-55,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-37,-38,-35,-36,-59,-60,-39,-40,]),'RPAREN':([12,13,15,16,17,18,21,26,37,44,45,47,48,76,80,81,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,116,119,120,128,129,130,135,136,152,153,154,],[-67,-70,19,20,-29,-30,-70,-31,-58,-61,-62,-69,-68,-70,-32,-33,-56,-57,-55,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,123,124,125,126,128,129,-37,-38,-70,-35,-36,-59,-60,-34,-39,-40,155,156,157,]),'SEMICOLON':([12,31,32,33,37,44,45,47,48,49,77,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,117,118,119,120,128,129,131,132,134,135,136,138,144,],[-67,54,55,72,-58,-61,-62,-69,-68,87,113,-56,-57,-55,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-37,-38,-70,-70,-35,-36,-59,-60,-25,-27,-26,-39,-40,54,-28,]),'LBRACKET':([12,22,23,24,25,27,30,31,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,133,135,136,137,139,140,141,142,144,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,],[-67,-3,40,40,-4,40,40,40,56,-58,40,-24,40,40,40,40,-61,-62,-69,-68,56,-5,-11,-10,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-12,40,40,40,56,56,56,56,56,-6,-23,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-22,-37,-38,40,-35,-36,40,40,40,40,40,40,40,-59,-60,40,56,56,-70,-70,-17,-18,56,56,-13,-15,40,-14,40,40,-16,56,56,40,40,40,-19,-21,-20,]),'QUESTIONMARK':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,57,-58,-61,-62,-69,-68,57,57,57,-56,-57,57,57,57,-41,-42,-43,-44,-45,-46,57,57,57,57,57,57,57,57,57,57,-37,-38,-35,-36,-59,-60,-39,57,57,57,57,57,]),'ASSIGN':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,110,114,115,117,118,119,120,128,129,135,136,142,144,152,154,],[-67,58,-58,-61,-62,-69,-68,58,58,58,-56,-57,58,58,58,-41,-42,-43,-44,-45,-46,58,58,58,58,58,58,58,58,58,58,127,-37,-38,133,133,-35,-36,-59,-60,-39,58,58,58,58,58,]),'PLUS':([12,22,23,24,25,27,30,31,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,133,135,136,137,139,140,141,142,144,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,],[-67,-3,41,41,-4,41,41,41,59,-58,41,-24,41,41,41,41,-61,-62,-69,-68,59,-5,-11,-10,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-12,41,41,41,59,59,-56,-57,59,-6,-23,59,59,59,-42,-43,-44,-45,-46,59,59,59,59,59,59,59,59,59,59,-22,-37,-38,41,-35,-36,41,41,41,41,41,41,41,-59,-60,41,59,59,-70,-70,-17,-18,59,59,-13,-15,41,-14,41,41,-16,59,59,41,41,41,-19,-21,-20,]),'MINUS':([12,22,23,24,25,27,30,31,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,133,135,136,137,139,140,141,142,144,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,],[-67,-3,42,42,-4,42,42,42,60,-58,42,-24,42,42,42,42,-61,-62,-69,-68,60,-5,-11,-10,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-12,42,42,42,60,60,-56,-57,60,-6,-23,60,60,60,-42,-43,-44,-45,-46,60,60,60,60,60,60,60,60,60,60,-22,-37,-38,42,-35,-36,42,42,42,42,42,42,42,-59,-60,42,60,60,-70,-70,-17,-18,60,60,-13,-15,42,-14,42,42,-16,60,60,42,42,42,-19,-21,-20,]),'TIMES':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,61,-58,-61,-62,-69,-68,61,61,61,61,61,61,61,61,61,61,61,-44,-45,-46,61,61,61,61,61,61,61,61,61,61,-37,-38,-35,-36,-59,-60,61,61,61,61,61,61,]),'DIVIDE':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,62,-58,-61,-62,-69,-68,62,62,62,62,62,62,62,62,62,62,62,-44,-45,-46,62,62,62,62,62,62,62,62,62,62,-37,-38,-35,-36,-59,-60,62,62,62,62,62,62,]),'MOD':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,63,-58,-61,-62,-69,-68,63,63,63,63,63,63,63,63,63,63,63,-44,-45,-46,63,63,63,63,63,63,63,63,63,63,-37,-38,-35,-36,-59,-60,63,63,63,63,63,63,]),'GT':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,64,-58,-61,-62,-69,-68,64,64,64,-56,-57,-55,64,64,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,64,64,64,64,-37,-38,-35,-36,-59,-60,-39,64,64,64,64,64,]),'LT':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,65,-58,-61,-62,-69,-68,65,65,65,-56,-57,-55,65,65,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,65,65,65,65,-37,-38,-35,-36,-59,-60,-39,65,65,65,65,65,]),'EQUAL':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,66,-58,-61,-62,-69,-68,66,66,66,-56,-57,-55,66,66,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,66,66,66,66,-37,-38,-35,-36,-59,-60,-39,66,66,66,66,66,]),'GTE':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,67,-58,-61,-62,-69,-68,67,67,67,-56,-57,-55,67,67,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,67,67,67,67,-37,-38,-35,-36,-59,-60,-39,67,67,67,67,67,]),'LTE':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,68,-58,-61,-62,-69,-68,68,68,68,-56,-57,-55,68,68,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,68,68,68,68,-37,-38,-35,-36,-59,-60,-39,68,68,68,68,68,]),'NOT_EQUAL':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,69,-58,-61,-62,-69,-68,69,69,69,-56,-57,-55,69,69,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,69,69,69,69,-37,-38,-35,-36,-59,-60,-39,69,69,69,69,69,]),'OR':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,70,-58,-61,-62,-69,-68,70,70,70,-56,-57,-55,70,70,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,70,70,-37,-38,-35,-36,-59,-60,-39,70,70,70,70,70,]),'AND':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,154,],[-67,71,-58,-61,-62,-69,-68,71,71,71,-56,-57,-55,71,71,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,71,71,-37,-38,-35,-36,-59,-60,-39,71,71,71,71,71,]),'RBRACKET':([12,37,40,44,45,47,48,78,79,80,81,82,83,84,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,116,119,120,128,129,130,135,136,],[-67,-58,-70,-61,-62,-69,-68,114,115,-32,-33,-56,-57,-55,119,120,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-37,-38,-70,-35,-36,-59,-60,-34,-39,-40,]),'COLON':([12,37,44,45,47,48,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,119,120,128,129,135,136,],[-67,-58,-61,-62,-69,-68,-56,-57,-55,121,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-37,-38,-35,-36,-59,-60,-39,-40,]),'error':([12,13,22,23,25,27,30,31,37,39,40,44,45,46,47,48,51,54,55,56,72,73,74,76,82,83,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,113,114,115,119,120,123,124,125,126,127,128,129,135,136,137,139,140,141,145,146,147,148,149,151,155,156,157,158,159,160,],[-67,16,-3,31,-4,31,31,31,-58,-24,79,-61,-62,86,-69,-68,-5,-11,-10,90,-12,107,109,112,-56,-57,-55,-6,-23,122,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-22,-37,-38,-35,-36,138,138,138,138,143,-59,-60,-39,-40,-70,-70,-17,-18,-13,-15,138,-14,153,-16,138,138,138,-19,-21,-20,]),'TO':([12,37,44,45,47,48,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,119,120,128,129,135,136,142,143,],[-67,-58,-61,-62,-69,-68,-56,-57,-55,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-37,-38,-35,-36,-59,-60,-39,-40,149,150,]),'LBRACE':([19,20,22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,155,156,157,158,159,160,],[23,23,-3,27,-4,27,27,27,-24,-5,-11,-10,-12,-6,-23,-22,27,27,27,27,-70,-70,-17,-18,-13,-15,27,-14,-16,27,27,27,-19,-21,-20,]),'RETURN':([19,20,22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,155,156,157,158,159,160,],[24,24,-3,38,-4,38,38,38,-24,-5,-11,-10,-12,-6,-23,-22,38,38,38,38,-70,-70,-17,-18,-13,-15,38,-14,-16,38,38,38,-19,-21,-20,]),'IF':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,155,156,157,158,159,160,],[-3,34,-4,34,34,34,-24,-5,-11,-10,-12,-6,-23,-22,34,34,34,34,-70,-70,-17,-18,-13,-15,34,-14,-16,34,34,34,-19,-21,-20,]),'WHILE':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,155,156,157,158,159,160,],[-3,35,-4,35,35,35,-24,-5,-11,-10,-12,-6,-23,-22,35,35,35,35,-70,-70,-17,-18,-13,-15,35,-14,-16,35,35,35,-19,-21,-20,]),'FOR':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,155,156,157,158,159,160,],[-3,36,-4,36,36,36,-24,-5,-11,-10,-12,-6,-23,-22,36,36,36,36,-70,-70,-17,-18,-13,-15,36,-14,-16,36,36,36,-19,-21,-20,]),'NOT':([22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,155,156,157,158,159,160,],[-3,43,43,-4,43,43,43,43,-24,43,43,43,43,-5,-11,-10,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-12,43,43,43,-6,-23,-22,43,43,43,43,43,43,43,43,43,-70,-70,-17,-18,-13,-15,43,-14,43,43,-16,43,43,43,-19,-21,-20,]),'VAR':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,155,156,157,158,159,160,],[-3,46,-4,46,46,46,-24,-5,-11,-10,-12,-6,-23,-22,46,46,46,46,-70,-70,-17,-18,-13,-15,46,-14,-16,46,46,46,-19,-21,-20,]),'NUMBER':([22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,155,156,157,158,159,160,],[-3,47,47,-4,47,47,47,47,-24,47,47,47,47,-5,-11,-10,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-12,47,47,47,-6,-23,-22,47,47,47,47,47,47,47,47,47,-70,-70,-17,-18,-13,-15,47,-14,47,47,-16,47,47,47,-19,-21,-20,]),'STRING':([22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,155,156,157,158,159,160,],[-3,48,48,-4,48,48,48,48,-24,48,48,48,48,-5,-11,-10,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-12,48,48,48,-6,-23,-22,48,48,48,48,48,48,48,48,48,-70,-70,-17,-18,-13,-15,48,-14,48,48,-16,48,48,48,-19,-21,-20,]),'RBRACE':([22,23,25,27,28,29,30,31,39,50,51,52,53,54,55,72,87,88,113,137,139,140,141,145,146,148,151,158,159,160,],[-3,-70,-4,-70,51,-7,-70,-70,-24,88,-5,-8,-9,-11,-10,-12,-6,-23,-22,-70,-70,-17,-18,-13,-15,-14,-16,-19,-21,-20,]),'ELSE':([22,25,39,51,54,55,72,87,88,113,137,139,140,141,145,146,148,151,158,159,160,],[-3,-4,-24,-5,-11,-10,-12,-6,-23,-22,147,147,-17,-18,-13,-15,-14,-16,-19,-21,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,13,21,23,27,30,31,40,76,116,117,118,137,139,],[2,2,17,17,29,29,29,29,80,80,80,132,132,146,146,]),'func':([0,3,23,27,30,31,123,124,125,126,147,155,156,157,],[3,3,39,39,39,39,39,39,39,39,39,39,39,39,]),'type':([4,13,21,46,],[6,14,14,85,]),'iden':([6,14,23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,85,86,116,121,122,123,124,125,126,127,133,147,149,150,155,156,157,],[11,18,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,110,37,117,118,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'flist':([13,21,],[15,26,]),'func_choice':([19,20,],[22,25,]),'body':([23,27,30,31,],[28,50,52,53,]),'stmt':([23,27,30,31,123,124,125,126,147,155,156,157,],[30,30,30,30,137,139,140,141,151,158,159,160,]),'expr':([23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,116,121,122,123,124,125,126,127,133,147,149,150,155,156,157,],[32,49,32,32,32,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,81,81,135,136,32,32,32,32,142,144,32,152,154,32,32,32,]),'defvar':([23,27,30,31,123,124,125,126,147,155,156,157,],[33,33,33,33,33,33,33,33,33,33,33,33,]),'num':([23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,116,121,122,123,124,125,126,127,133,147,149,150,155,156,157,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'str':([23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,116,121,122,123,124,125,126,127,133,147,149,150,155,156,157,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'clist':([40,76,116,],[78,111,130,]),'defvar_choice':([117,118,],[131,134,]),'else_choice':([137,139,],[145,148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog1','grammer.py',16),
  ('prog -> func prog','prog',2,'p_prog2','grammer.py',26),
  ('func -> DEF type iden LPAREN flist RPAREN func_choice','func',7,'p_func','grammer.py',37),
  ('func -> DEF type iden LPAREN error RPAREN func_choice','func',7,'p_func_error','grammer.py',46),
  ('func_choice -> LBRACE body RBRACE','func_choice',3,'p_func_choice1','grammer.py',60),
  ('func_choice -> RETURN expr SEMICOLON','func_choice',3,'p_func_choice2','grammer.py',69),
  ('body -> empty','body',1,'p_body1','grammer.py',78),
  ('body -> stmt body','body',2,'p_body2','grammer.py',87),
  ('body -> error body','body',2,'p_body2_error','grammer.py',99),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt1','grammer.py',113),
  ('stmt -> error SEMICOLON','stmt',2,'p_stmt1_error','grammer.py',122),
  ('stmt -> defvar SEMICOLON','stmt',2,'p_stmt2','grammer.py',136),
  ('stmt -> IF LPAREN expr RPAREN stmt else_choice','stmt',6,'p_stmt3','grammer.py',145),
  ('stmt -> IF LPAREN error RPAREN stmt else_choice','stmt',6,'p_stmt3_error','grammer.py',154),
  ('else_choice -> empty','else_choice',1,'p_else_choice1','grammer.py',168),
  ('else_choice -> ELSE stmt','else_choice',2,'p_else_choice2','grammer.py',177),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt4','grammer.py',186),
  ('stmt -> WHILE LPAREN error RPAREN stmt','stmt',5,'p_stmt4_error','grammer.py',195),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt','stmt',9,'p_stmt5','grammer.py',209),
  ('stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt','stmt',9,'p_stmt5_error1','grammer.py',218),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt','stmt',9,'p_stmt5_error2','grammer.py',232),
  ('stmt -> RETURN expr SEMICOLON','stmt',3,'p_stmt6','grammer.py',246),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt7','grammer.py',255),
  ('stmt -> func','stmt',1,'p_stmt8','grammer.py',264),
  ('defvar -> VAR type iden defvar_choice','defvar',4,'p_defvar','grammer.py',273),
  ('defvar -> VAR error iden defvar_choice','defvar',4,'p_defvar_error','grammer.py',282),
  ('defvar_choice -> empty','defvar_choice',1,'p_defvar_choice1','grammer.py',296),
  ('defvar_choice -> ASSIGN expr','defvar_choice',2,'p_defvar_choice2','grammer.py',305),
  ('flist -> empty','flist',1,'p_flist1','grammer.py',314),
  ('flist -> type iden','flist',2,'p_flist2','grammer.py',323),
  ('flist -> type iden COMMA flist','flist',4,'p_flist3','grammer.py',332),
  ('clist -> empty','clist',1,'p_clist1','grammer.py',341),
  ('clist -> expr','clist',1,'p_clist2','grammer.py',350),
  ('clist -> expr COMMA clist','clist',3,'p_clist3','grammer.py',359),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_expr1','grammer.py',368),
  ('expr -> expr LBRACKET error RBRACKET','expr',4,'p_expr1_error','grammer.py',377),
  ('expr -> LBRACKET clist RBRACKET','expr',3,'p_expr2','grammer.py',391),
  ('expr -> LBRACKET error RBRACKET','expr',3,'p_expr2_error','grammer.py',400),
  ('expr -> expr QUESTIONMARK expr COLON expr','expr',5,'p_expr3','grammer.py',414),
  ('expr -> expr QUESTIONMARK expr error expr','expr',5,'p_expr3_error','grammer.py',423),
  ('expr -> expr ASSIGN expr','expr',3,'p_expr4','grammer.py',437),
  ('expr -> expr PLUS expr','expr',3,'p_expr4','grammer.py',438),
  ('expr -> expr MINUS expr','expr',3,'p_expr4','grammer.py',439),
  ('expr -> expr TIMES expr','expr',3,'p_expr4','grammer.py',440),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr4','grammer.py',441),
  ('expr -> expr MOD expr','expr',3,'p_expr4','grammer.py',442),
  ('expr -> expr GT expr','expr',3,'p_expr4','grammer.py',443),
  ('expr -> expr LT expr','expr',3,'p_expr4','grammer.py',444),
  ('expr -> expr EQUAL expr','expr',3,'p_expr4','grammer.py',445),
  ('expr -> expr GTE expr','expr',3,'p_expr4','grammer.py',446),
  ('expr -> expr LTE expr','expr',3,'p_expr4','grammer.py',447),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr4','grammer.py',448),
  ('expr -> expr OR expr','expr',3,'p_expr4','grammer.py',449),
  ('expr -> expr AND expr','expr',3,'p_expr4','grammer.py',450),
  ('expr -> NOT expr','expr',2,'p_expr5','grammer.py',463),
  ('expr -> PLUS expr','expr',2,'p_expr5','grammer.py',464),
  ('expr -> MINUS expr','expr',2,'p_expr5','grammer.py',465),
  ('expr -> iden','expr',1,'p_expr6','grammer.py',474),
  ('expr -> iden LPAREN clist RPAREN','expr',4,'p_expr7','grammer.py',483),
  ('expr -> iden LPAREN error RPAREN','expr',4,'p_expr7_error','grammer.py',492),
  ('expr -> num','expr',1,'p_expr8','grammer.py',506),
  ('expr -> str','expr',1,'p_expr9','grammer.py',515),
  ('type -> INT_TYPE','type',1,'p_type','grammer.py',524),
  ('type -> VECTOR_TYPE','type',1,'p_type','grammer.py',525),
  ('type -> STR_TYPE','type',1,'p_type','grammer.py',526),
  ('type -> NULL_TYPE','type',1,'p_type','grammer.py',527),
  ('iden -> IDENTIFIER','iden',1,'p_iden','grammer.py',536),
  ('str -> STRING','str',1,'p_str','grammer.py',545),
  ('num -> NUMBER','num',1,'p_num','grammer.py',554),
  ('empty -> <empty>','empty',0,'p_empty','grammer.py',563),
]
