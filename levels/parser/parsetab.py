
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'lefterrorleftANDORleftNOTLTEGTENOT_EQUALEQUALLTGTleftASSIGNQUESTIONMARKCOLONleftPLUSMINUSleftTIMESDIVIDEMODleftLPARENRPARENLBRACERBRACELBRACKETRBRACKETAND ASSIGN COLON COMMA COMMENT DEF DIVIDE ELSE EQUAL FOR GT GTE IDENTIFIER IF INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MOD NOT NOT_EQUAL NULL_TYPE NUMBER OR PLUS QUESTIONMARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STR_TYPE TIMES TO VAR VECTOR_TYPE WHILEprog : emptyprog : func progfunc : DEF type iden LPAREN flist RPAREN func_choicefunc : DEF type iden LPAREN error RPAREN func_choicefunc : DEF error iden LPAREN flist RPAREN func_choicefunc_choice : LBRACE body RBRACEfunc_choice : RETURN expr SEMICOLONbody : emptybody : stmt bodybody : error bodystmt : expr SEMICOLONstmt : error SEMICOLONstmt : defvar SEMICOLONstmt : IF LPAREN expr RPAREN stmt else_choicestmt : IF LPAREN error RPAREN stmt else_choiceelse_choice : emptyelse_choice : ELSE stmtstmt : WHILE LPAREN expr RPAREN stmtstmt : WHILE LPAREN error RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN error TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO error RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO expr RPAREN errorstmt : RETURN expr SEMICOLONstmt : LBRACE body RBRACEstmt : funcdefvar : VAR type iden defvar_choicedefvar : VAR error iden defvar_choicedefvar_choice : emptydefvar_choice : ASSIGN exprflist : emptyflist : type idenflist : error idenflist : type iden COMMA flistflist : error iden COMMA flistclist : emptyclist : exprclist : expr COMMA clistexpr : expr LBRACKET expr RBRACKETexpr : expr LBRACKET error RBRACKETexpr : LBRACKET clist RBRACKETexpr : LBRACKET error RBRACKETexpr : expr QUESTIONMARK expr COLON exprexpr : expr QUESTIONMARK expr error exprexpr : expr ASSIGN expr\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr MOD expr\n                | expr GT expr\n                | expr LT expr\n                | expr EQUAL expr\n                | expr GTE expr\n                | expr LTE expr\n                | expr NOT_EQUAL expr\n                | expr OR expr\n                | expr AND exprexpr : NOT expr\n                | PLUS expr\n                | MINUS exprexpr : idenexpr : iden LPAREN clist RPARENexpr : iden LPAREN error RPARENexpr : numexpr : strtype : INT_TYPE\n                | STR_TYPE\n                | NULL_TYPEtype : VECTOR_TYPE LT INT_TYPE GT \n                | VECTOR_TYPE LT STR_TYPE GTtype : VECTOR_TYPE LT INT_TYPE error \n                | VECTOR_TYPE error INT_TYPE GT\n                | VECTOR_TYPE error INT_TYPE error\n                | VECTOR_TYPE LT STR_TYPE error\n                | VECTOR_TYPE error STR_TYPE GT\n                | VECTOR_TYPE error STR_TYPE errortype : VECTOR_TYPE LT error GT iden : IDENTIFIERstr : STRINGnum : NUMBERempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,45,49,50,77,113,],[-82,0,-1,-82,-2,-3,-4,-5,-6,-7,]),'DEF':([0,3,45,46,49,50,52,55,56,64,77,80,81,98,113,114,139,149,150,151,152,163,165,166,167,171,172,173,174,177,181,182,183,184,185,186,187,],[4,4,-3,4,-4,-5,4,4,4,-26,-6,-12,-11,-13,-7,-25,-24,4,4,4,4,-82,-82,-18,-19,-14,-16,4,-15,-17,4,4,4,-20,-23,-22,-21,]),'error':([4,11,13,15,17,18,19,20,22,23,44,45,46,48,49,50,52,55,56,62,64,65,69,70,71,72,73,77,80,81,82,98,99,100,102,108,109,110,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,140,141,145,146,149,150,151,152,153,154,155,161,162,163,165,166,167,171,172,173,174,175,177,181,182,183,184,185,186,187,],[7,16,-79,21,26,28,31,33,35,37,28,-3,56,28,-4,-5,56,56,56,-62,-26,105,-65,-66,112,-81,-80,-6,-12,-11,116,-13,133,135,138,-60,-61,-59,-7,-25,148,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-24,-41,-42,-39,-40,164,164,164,164,169,-63,-64,-43,-44,-82,-82,-18,-19,-14,-16,164,-15,179,-17,185,164,164,-20,-23,-22,-21,]),'INT_TYPE':([4,15,16,17,18,44,48,71,],[8,19,22,8,8,8,8,8,]),'STR_TYPE':([4,15,16,17,18,44,48,71,],[9,20,23,9,9,9,9,9,]),'NULL_TYPE':([4,17,18,44,48,71,],[10,10,10,10,10,10,]),'VECTOR_TYPE':([4,17,18,44,48,71,],[11,11,11,11,11,11,]),'IDENTIFIER':([6,7,8,9,10,24,26,28,30,31,32,33,34,35,36,37,38,45,46,47,49,50,52,55,56,63,64,65,66,67,68,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,112,113,114,139,142,147,148,149,150,151,152,153,159,163,165,166,167,171,172,173,174,175,176,177,181,182,183,184,185,186,187,],[13,13,-67,-68,-69,13,13,13,-70,-72,-71,-75,-78,-74,-73,-77,-76,-3,13,13,-4,-5,13,13,13,13,-26,13,13,13,13,-6,-12,-11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-13,13,13,13,13,13,13,-7,-25,-24,13,13,13,13,13,13,13,13,13,-82,-82,-18,-19,-14,-16,13,-15,13,13,-17,13,13,13,-20,-23,-22,-21,]),'LT':([11,13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[15,-79,91,-62,-65,-66,-81,-80,91,91,91,-60,-61,-59,91,91,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,91,91,91,91,-41,-42,-39,-40,-63,-64,-43,91,91,91,91,91,]),'LPAREN':([12,13,14,59,60,61,62,],[17,-79,18,99,100,101,102,]),'COMMA':([13,39,41,62,69,70,72,73,107,108,109,110,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,145,146,154,155,161,162,],[-79,44,48,-62,-65,-66,-81,-80,142,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-39,-40,-63,-64,-43,-44,]),'RPAREN':([13,17,18,25,26,27,29,39,41,44,48,51,62,69,70,72,73,75,102,106,107,108,109,110,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,140,141,142,145,146,154,155,156,161,162,178,179,180,],[-79,-82,-82,40,42,-31,43,-32,-33,-82,-82,-34,-62,-65,-66,-81,-80,-35,-82,-36,-37,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,149,150,151,152,154,155,-41,-42,-82,-39,-40,-63,-64,-38,-43,-44,181,182,183,]),'SEMICOLON':([13,56,57,58,62,69,70,72,73,74,103,108,109,110,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,143,144,145,146,154,155,157,158,160,161,162,164,170,185,],[-79,80,81,98,-62,-65,-66,-81,-80,113,139,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-82,-82,-39,-40,-63,-64,-27,-29,-28,-43,-44,80,-30,80,]),'LBRACKET':([13,45,46,47,49,50,52,55,56,57,62,63,64,65,66,67,68,69,70,72,73,74,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,107,108,109,110,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,139,140,141,142,145,146,147,148,149,150,151,152,153,154,155,159,161,162,163,165,166,167,168,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,],[-79,-3,65,65,-4,-5,65,65,65,82,-62,65,-26,65,65,65,65,-65,-66,-81,-80,82,-6,-12,-11,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-13,65,65,65,82,82,82,82,82,-7,-25,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-24,-41,-42,65,-39,-40,65,65,65,65,65,65,65,-63,-64,65,82,82,-82,-82,-18,-19,82,82,-14,-16,65,-15,65,65,-17,82,82,65,65,65,-20,-23,-22,-21,]),'QUESTIONMARK':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,83,-62,-65,-66,-81,-80,83,83,83,-60,-61,83,83,83,-45,-46,-47,-48,-49,-50,83,83,83,83,83,83,83,83,83,83,-41,-42,-39,-40,-63,-64,-43,83,83,83,83,83,]),'ASSIGN':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,136,140,141,143,144,145,146,154,155,161,162,168,170,178,180,],[-79,84,-62,-65,-66,-81,-80,84,84,84,-60,-61,84,84,84,-45,-46,-47,-48,-49,-50,84,84,84,84,84,84,84,84,84,84,153,-41,-42,159,159,-39,-40,-63,-64,-43,84,84,84,84,84,]),'PLUS':([13,45,46,47,49,50,52,55,56,57,62,63,64,65,66,67,68,69,70,72,73,74,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,107,108,109,110,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,139,140,141,142,145,146,147,148,149,150,151,152,153,154,155,159,161,162,163,165,166,167,168,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,],[-79,-3,66,66,-4,-5,66,66,66,85,-62,66,-26,66,66,66,66,-65,-66,-81,-80,85,-6,-12,-11,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-13,66,66,66,85,85,-60,-61,85,-7,-25,85,85,85,-46,-47,-48,-49,-50,85,85,85,85,85,85,85,85,85,85,-24,-41,-42,66,-39,-40,66,66,66,66,66,66,66,-63,-64,66,85,85,-82,-82,-18,-19,85,85,-14,-16,66,-15,66,66,-17,85,85,66,66,66,-20,-23,-22,-21,]),'MINUS':([13,45,46,47,49,50,52,55,56,57,62,63,64,65,66,67,68,69,70,72,73,74,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,107,108,109,110,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,139,140,141,142,145,146,147,148,149,150,151,152,153,154,155,159,161,162,163,165,166,167,168,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,],[-79,-3,67,67,-4,-5,67,67,67,86,-62,67,-26,67,67,67,67,-65,-66,-81,-80,86,-6,-12,-11,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-13,67,67,67,86,86,-60,-61,86,-7,-25,86,86,86,-46,-47,-48,-49,-50,86,86,86,86,86,86,86,86,86,86,-24,-41,-42,67,-39,-40,67,67,67,67,67,67,67,-63,-64,67,86,86,-82,-82,-18,-19,86,86,-14,-16,67,-15,67,67,-17,86,86,67,67,67,-20,-23,-22,-21,]),'TIMES':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,87,-62,-65,-66,-81,-80,87,87,87,87,87,87,87,87,87,87,87,-48,-49,-50,87,87,87,87,87,87,87,87,87,87,-41,-42,-39,-40,-63,-64,87,87,87,87,87,87,]),'DIVIDE':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,88,-62,-65,-66,-81,-80,88,88,88,88,88,88,88,88,88,88,88,-48,-49,-50,88,88,88,88,88,88,88,88,88,88,-41,-42,-39,-40,-63,-64,88,88,88,88,88,88,]),'MOD':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,89,-62,-65,-66,-81,-80,89,89,89,89,89,89,89,89,89,89,89,-48,-49,-50,89,89,89,89,89,89,89,89,89,89,-41,-42,-39,-40,-63,-64,89,89,89,89,89,89,]),'GT':([13,19,20,21,22,23,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,30,32,34,36,38,90,-62,-65,-66,-81,-80,90,90,90,-60,-61,-59,90,90,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,90,90,90,90,-41,-42,-39,-40,-63,-64,-43,90,90,90,90,90,]),'EQUAL':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,92,-62,-65,-66,-81,-80,92,92,92,-60,-61,-59,92,92,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,92,92,92,92,-41,-42,-39,-40,-63,-64,-43,92,92,92,92,92,]),'GTE':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,93,-62,-65,-66,-81,-80,93,93,93,-60,-61,-59,93,93,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,93,93,93,93,-41,-42,-39,-40,-63,-64,-43,93,93,93,93,93,]),'LTE':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,94,-62,-65,-66,-81,-80,94,94,94,-60,-61,-59,94,94,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,94,94,94,94,-41,-42,-39,-40,-63,-64,-43,94,94,94,94,94,]),'NOT_EQUAL':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,95,-62,-65,-66,-81,-80,95,95,95,-60,-61,-59,95,95,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,95,95,95,95,-41,-42,-39,-40,-63,-64,-43,95,95,95,95,95,]),'OR':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,96,-62,-65,-66,-81,-80,96,96,96,-60,-61,-59,96,96,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,96,96,-41,-42,-39,-40,-63,-64,-43,96,96,96,96,96,]),'AND':([13,57,62,69,70,72,73,74,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,140,141,145,146,154,155,161,162,168,170,178,180,],[-79,97,-62,-65,-66,-81,-80,97,97,97,-60,-61,-59,97,97,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,97,97,-41,-42,-39,-40,-63,-64,-43,97,97,97,97,97,]),'RBRACKET':([13,62,65,69,70,72,73,104,105,106,107,108,109,110,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,142,145,146,154,155,156,161,162,],[-79,-62,-82,-65,-66,-81,-80,140,141,-36,-37,-60,-61,-59,145,146,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-82,-39,-40,-63,-64,-38,-43,-44,]),'COLON':([13,62,69,70,72,73,108,109,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,145,146,154,155,161,162,],[-79,-62,-65,-66,-81,-80,-60,-61,-59,147,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-39,-40,-63,-64,-43,-44,]),'TO':([13,62,69,70,72,73,108,109,110,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,145,146,154,155,161,162,168,169,],[-79,-62,-65,-66,-81,-80,-60,-61,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-41,-42,-39,-40,-63,-64,-43,-44,175,176,]),'LBRACE':([40,42,43,45,46,49,50,52,55,56,64,77,80,81,98,113,114,139,149,150,151,152,163,165,166,167,171,172,173,174,177,181,182,183,184,185,186,187,],[46,46,46,-3,52,-4,-5,52,52,52,-26,-6,-12,-11,-13,-7,-25,-24,52,52,52,52,-82,-82,-18,-19,-14,-16,52,-15,-17,52,52,52,-20,-23,-22,-21,]),'RETURN':([40,42,43,45,46,49,50,52,55,56,64,77,80,81,98,113,114,139,149,150,151,152,163,165,166,167,171,172,173,174,177,181,182,183,184,185,186,187,],[47,47,47,-3,63,-4,-5,63,63,63,-26,-6,-12,-11,-13,-7,-25,-24,63,63,63,63,-82,-82,-18,-19,-14,-16,63,-15,-17,63,63,63,-20,-23,-22,-21,]),'IF':([45,46,49,50,52,55,56,64,77,80,81,98,113,114,139,149,150,151,152,163,165,166,167,171,172,173,174,177,181,182,183,184,185,186,187,],[-3,59,-4,-5,59,59,59,-26,-6,-12,-11,-13,-7,-25,-24,59,59,59,59,-82,-82,-18,-19,-14,-16,59,-15,-17,59,59,59,-20,-23,-22,-21,]),'WHILE':([45,46,49,50,52,55,56,64,77,80,81,98,113,114,139,149,150,151,152,163,165,166,167,171,172,173,174,177,181,182,183,184,185,186,187,],[-3,60,-4,-5,60,60,60,-26,-6,-12,-11,-13,-7,-25,-24,60,60,60,60,-82,-82,-18,-19,-14,-16,60,-15,-17,60,60,60,-20,-23,-22,-21,]),'FOR':([45,46,49,50,52,55,56,64,77,80,81,98,113,114,139,149,150,151,152,163,165,166,167,171,172,173,174,177,181,182,183,184,185,186,187,],[-3,61,-4,-5,61,61,61,-26,-6,-12,-11,-13,-7,-25,-24,61,61,61,61,-82,-82,-18,-19,-14,-16,61,-15,-17,61,61,61,-20,-23,-22,-21,]),'NOT':([45,46,47,49,50,52,55,56,63,64,65,66,67,68,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,113,114,139,142,147,148,149,150,151,152,153,159,163,165,166,167,171,172,173,174,175,176,177,181,182,183,184,185,186,187,],[-3,68,68,-4,-5,68,68,68,68,-26,68,68,68,68,-6,-12,-11,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-13,68,68,68,-7,-25,-24,68,68,68,68,68,68,68,68,68,-82,-82,-18,-19,-14,-16,68,-15,68,68,-17,68,68,68,-20,-23,-22,-21,]),'VAR':([45,46,49,50,52,55,56,64,77,80,81,98,113,114,139,149,150,151,152,163,165,166,167,171,172,173,174,177,181,182,183,184,185,186,187,],[-3,71,-4,-5,71,71,71,-26,-6,-12,-11,-13,-7,-25,-24,71,71,71,71,-82,-82,-18,-19,-14,-16,71,-15,-17,71,71,71,-20,-23,-22,-21,]),'NUMBER':([45,46,47,49,50,52,55,56,63,64,65,66,67,68,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,113,114,139,142,147,148,149,150,151,152,153,159,163,165,166,167,171,172,173,174,175,176,177,181,182,183,184,185,186,187,],[-3,72,72,-4,-5,72,72,72,72,-26,72,72,72,72,-6,-12,-11,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-13,72,72,72,-7,-25,-24,72,72,72,72,72,72,72,72,72,-82,-82,-18,-19,-14,-16,72,-15,72,72,-17,72,72,72,-20,-23,-22,-21,]),'STRING':([45,46,47,49,50,52,55,56,63,64,65,66,67,68,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,113,114,139,142,147,148,149,150,151,152,153,159,163,165,166,167,171,172,173,174,175,176,177,181,182,183,184,185,186,187,],[-3,73,73,-4,-5,73,73,73,73,-26,73,73,73,73,-6,-12,-11,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-13,73,73,73,-7,-25,-24,73,73,73,73,73,73,73,73,73,-82,-82,-18,-19,-14,-16,73,-15,73,73,-17,73,73,73,-20,-23,-22,-21,]),'RBRACE':([45,46,49,50,52,53,54,55,56,64,76,77,78,79,80,81,98,113,114,139,163,165,166,167,171,172,174,177,184,185,186,187,],[-3,-82,-4,-5,-82,77,-8,-82,-82,-26,114,-6,-9,-10,-12,-11,-13,-7,-25,-24,-82,-82,-18,-19,-14,-16,-15,-17,-20,-23,-22,-21,]),'ELSE':([45,49,50,64,77,80,81,98,113,114,139,163,165,166,167,171,172,174,177,184,185,186,187,],[-3,-4,-5,-26,-6,-12,-11,-13,-7,-25,-24,173,173,-18,-19,-14,-16,-15,-17,-20,-23,-22,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,17,18,44,46,48,52,55,56,65,102,142,143,144,163,165,],[2,2,27,27,27,54,27,54,54,54,106,106,106,158,158,172,172,]),'func':([0,3,46,52,55,56,149,150,151,152,173,181,182,183,],[3,3,64,64,64,64,64,64,64,64,64,64,64,64,]),'type':([4,17,18,44,48,71,],[6,24,24,24,24,111,]),'iden':([6,7,24,26,28,46,47,52,55,56,63,65,66,67,68,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,111,112,142,147,148,149,150,151,152,153,159,173,175,176,181,182,183,],[12,14,39,41,41,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,136,62,143,144,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'flist':([17,18,44,48,],[25,29,51,75,]),'func_choice':([40,42,43,],[45,49,50,]),'body':([46,52,55,56,],[53,76,78,79,]),'stmt':([46,52,55,56,149,150,151,152,173,181,182,183,],[55,55,55,55,163,165,166,167,177,184,186,187,]),'expr':([46,47,52,55,56,63,65,66,67,68,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,102,142,147,148,149,150,151,152,153,159,173,175,176,181,182,183,],[57,74,57,57,57,103,107,108,109,110,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,107,107,161,162,57,57,57,57,168,170,57,178,180,57,57,57,]),'defvar':([46,52,55,56,149,150,151,152,173,181,182,183,],[58,58,58,58,58,58,58,58,58,58,58,58,]),'num':([46,47,52,55,56,63,65,66,67,68,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,102,142,147,148,149,150,151,152,153,159,173,175,176,181,182,183,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'str':([46,47,52,55,56,63,65,66,67,68,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,102,142,147,148,149,150,151,152,153,159,173,175,176,181,182,183,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'clist':([65,102,142,],[104,137,156,]),'defvar_choice':([143,144,],[157,160,]),'else_choice':([163,165,],[171,174,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog1','grammer.py',16),
  ('prog -> func prog','prog',2,'p_prog2','grammer.py',26),
  ('func -> DEF type iden LPAREN flist RPAREN func_choice','func',7,'p_func','grammer.py',37),
  ('func -> DEF type iden LPAREN error RPAREN func_choice','func',7,'p_func_error1','grammer.py',47),
  ('func -> DEF error iden LPAREN flist RPAREN func_choice','func',7,'p_func_error2','grammer.py',59),
  ('func_choice -> LBRACE body RBRACE','func_choice',3,'p_func_choice1','grammer.py',72),
  ('func_choice -> RETURN expr SEMICOLON','func_choice',3,'p_func_choice2','grammer.py',81),
  ('body -> empty','body',1,'p_body1','grammer.py',90),
  ('body -> stmt body','body',2,'p_body2','grammer.py',99),
  ('body -> error body','body',2,'p_body2_error','grammer.py',111),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt1','grammer.py',125),
  ('stmt -> error SEMICOLON','stmt',2,'p_stmt1_error','grammer.py',134),
  ('stmt -> defvar SEMICOLON','stmt',2,'p_stmt2','grammer.py',146),
  ('stmt -> IF LPAREN expr RPAREN stmt else_choice','stmt',6,'p_stmt3','grammer.py',155),
  ('stmt -> IF LPAREN error RPAREN stmt else_choice','stmt',6,'p_stmt3_error','grammer.py',164),
  ('else_choice -> empty','else_choice',1,'p_else_choice1','grammer.py',176),
  ('else_choice -> ELSE stmt','else_choice',2,'p_else_choice2','grammer.py',185),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt4','grammer.py',194),
  ('stmt -> WHILE LPAREN error RPAREN stmt','stmt',5,'p_stmt4_error','grammer.py',203),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt','stmt',9,'p_stmt5','grammer.py',215),
  ('stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt','stmt',9,'p_stmt5_error1','grammer.py',224),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO error RPAREN stmt','stmt',9,'p_stmt5_error2','grammer.py',236),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN error','stmt',9,'p_stmt5_error3','grammer.py',248),
  ('stmt -> RETURN expr SEMICOLON','stmt',3,'p_stmt6','grammer.py',260),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt7','grammer.py',269),
  ('stmt -> func','stmt',1,'p_stmt8','grammer.py',278),
  ('defvar -> VAR type iden defvar_choice','defvar',4,'p_defvar','grammer.py',287),
  ('defvar -> VAR error iden defvar_choice','defvar',4,'p_defvar_error','grammer.py',296),
  ('defvar_choice -> empty','defvar_choice',1,'p_defvar_choice1','grammer.py',309),
  ('defvar_choice -> ASSIGN expr','defvar_choice',2,'p_defvar_choice2','grammer.py',318),
  ('flist -> empty','flist',1,'p_flist1','grammer.py',327),
  ('flist -> type iden','flist',2,'p_flist2','grammer.py',336),
  ('flist -> error iden','flist',2,'p_flist2_error','grammer.py',345),
  ('flist -> type iden COMMA flist','flist',4,'p_flist3','grammer.py',354),
  ('flist -> error iden COMMA flist','flist',4,'p_flist3_error','grammer.py',363),
  ('clist -> empty','clist',1,'p_clist1','grammer.py',372),
  ('clist -> expr','clist',1,'p_clist2','grammer.py',381),
  ('clist -> expr COMMA clist','clist',3,'p_clist3','grammer.py',390),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_expr1','grammer.py',399),
  ('expr -> expr LBRACKET error RBRACKET','expr',4,'p_expr1_error','grammer.py',408),
  ('expr -> LBRACKET clist RBRACKET','expr',3,'p_expr2','grammer.py',420),
  ('expr -> LBRACKET error RBRACKET','expr',3,'p_expr2_error','grammer.py',429),
  ('expr -> expr QUESTIONMARK expr COLON expr','expr',5,'p_expr3','grammer.py',441),
  ('expr -> expr QUESTIONMARK expr error expr','expr',5,'p_expr3_error','grammer.py',450),
  ('expr -> expr ASSIGN expr','expr',3,'p_expr4','grammer.py',462),
  ('expr -> expr PLUS expr','expr',3,'p_expr4','grammer.py',463),
  ('expr -> expr MINUS expr','expr',3,'p_expr4','grammer.py',464),
  ('expr -> expr TIMES expr','expr',3,'p_expr4','grammer.py',465),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr4','grammer.py',466),
  ('expr -> expr MOD expr','expr',3,'p_expr4','grammer.py',467),
  ('expr -> expr GT expr','expr',3,'p_expr4','grammer.py',468),
  ('expr -> expr LT expr','expr',3,'p_expr4','grammer.py',469),
  ('expr -> expr EQUAL expr','expr',3,'p_expr4','grammer.py',470),
  ('expr -> expr GTE expr','expr',3,'p_expr4','grammer.py',471),
  ('expr -> expr LTE expr','expr',3,'p_expr4','grammer.py',472),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr4','grammer.py',473),
  ('expr -> expr OR expr','expr',3,'p_expr4','grammer.py',474),
  ('expr -> expr AND expr','expr',3,'p_expr4','grammer.py',475),
  ('expr -> NOT expr','expr',2,'p_expr5','grammer.py',486),
  ('expr -> PLUS expr','expr',2,'p_expr5','grammer.py',487),
  ('expr -> MINUS expr','expr',2,'p_expr5','grammer.py',488),
  ('expr -> iden','expr',1,'p_expr6','grammer.py',497),
  ('expr -> iden LPAREN clist RPAREN','expr',4,'p_expr7','grammer.py',506),
  ('expr -> iden LPAREN error RPAREN','expr',4,'p_expr7_error','grammer.py',515),
  ('expr -> num','expr',1,'p_expr8','grammer.py',527),
  ('expr -> str','expr',1,'p_expr9','grammer.py',536),
  ('type -> INT_TYPE','type',1,'p_type1','grammer.py',545),
  ('type -> STR_TYPE','type',1,'p_type1','grammer.py',546),
  ('type -> NULL_TYPE','type',1,'p_type1','grammer.py',547),
  ('type -> VECTOR_TYPE LT INT_TYPE GT','type',4,'p_type2','grammer.py',556),
  ('type -> VECTOR_TYPE LT STR_TYPE GT','type',4,'p_type2','grammer.py',557),
  ('type -> VECTOR_TYPE LT INT_TYPE error','type',4,'p_type2_error1','grammer.py',567),
  ('type -> VECTOR_TYPE error INT_TYPE GT','type',4,'p_type2_error1','grammer.py',568),
  ('type -> VECTOR_TYPE error INT_TYPE error','type',4,'p_type2_error1','grammer.py',569),
  ('type -> VECTOR_TYPE LT STR_TYPE error','type',4,'p_type2_error1','grammer.py',570),
  ('type -> VECTOR_TYPE error STR_TYPE GT','type',4,'p_type2_error1','grammer.py',571),
  ('type -> VECTOR_TYPE error STR_TYPE error','type',4,'p_type2_error1','grammer.py',572),
  ('type -> VECTOR_TYPE LT error GT','type',4,'p_type2_error2','grammer.py',584),
  ('iden -> IDENTIFIER','iden',1,'p_iden','grammer.py',597),
  ('str -> STRING','str',1,'p_str','grammer.py',606),
  ('num -> NUMBER','num',1,'p_num','grammer.py',615),
  ('empty -> <empty>','empty',0,'p_empty','grammer.py',624),
]
