
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'lefterrorleftANDORleftNOTLTEGTENOT_EQUALEQUALLTGTleftASSIGNQUESTIONMARKCOLONleftPLUSMINUSleftTIMESDIVIDEMODleftLPARENRPARENLBRACERBRACELBRACKETRBRACKETAND ASSIGN COLON COMMA COMMENT DEF DIVIDE ELSE EQUAL FOR GT GTE IDENTIFIER IF INT_TYPE LBRACE LBRACKET LPAREN LT LTE MINUS MOD NOT NOT_EQUAL NULL_TYPE NUMBER OR PLUS QUESTIONMARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STR_TYPE TIMES TO VAR VECTOR_TYPE WHILEprog : emptyprog : func progfunc : DEF type iden LPAREN flist RPAREN func_choicefunc : DEF type iden LPAREN error RPAREN func_choicefunc_choice : LBRACE body RBRACEfunc_choice : RETURN expr SEMICOLONbody : emptybody : stmt bodybody : error bodystmt : expr SEMICOLONstmt : error SEMICOLONstmt : defvar SEMICOLONstmt : IF LPAREN expr RPAREN stmt else_choicestmt : IF LPAREN error RPAREN stmt else_choiceelse_choice : emptyelse_choice : ELSE stmtstmt : WHILE LPAREN expr RPAREN stmtstmt : WHILE LPAREN error RPAREN stmtstmt : FOR LPAREN iden ASSIGN expr TO expr RPAREN stmtstmt : FOR LPAREN iden ASSIGN error TO expr RPAREN stmtstmt : RETURN expr SEMICOLONstmt : LBRACE body RBRACEstmt : funcdefvar : VAR type iden defvar_choicedefvar : VAR error iden defvar_choicedefvar_choice : emptydefvar_choice : ASSIGN exprflist : emptyflist : type idenflist : type iden COMMA flistclist : emptyclist : exprclist : expr COMMA clisttype : INT_TYPE\n                | VECTOR_TYPE\n                | STR_TYPE\n                | NULL_TYPEexpr : expr LBRACKET expr RBRACKETexpr : expr LBRACKET error RBRACKETexpr : LBRACKET clist RBRACKETexpr : LBRACKET error RBRACKETexpr : expr QUESTIONMARK expr COLON exprexpr : expr QUESTIONMARK expr error exprexpr : expr ASSIGN expr\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr MOD expr\n                | expr GT expr\n                | expr LT expr\n                | expr EQUAL expr\n                | expr GTE expr\n                | expr LTE expr\n                | expr NOT_EQUAL expr\n                | expr OR expr\n                | expr AND exprexpr : NOT expr\n                | PLUS expr\n                | MINUS exprexpr : idenexpr : iden LPAREN clist RPARENexpr : iden LPAREN error RPARENexpr : numexpr : striden : IDENTIFIERstr : STRINGnum : NUMBERempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,22,25,51,87,],[-69,0,-1,-69,-2,-3,-4,-5,-6,]),'DEF':([0,3,22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,154,155,156,157,],[4,4,-3,4,-4,4,4,4,-23,-5,-11,-10,-12,-6,-22,-21,4,4,4,4,-69,-69,-17,-18,-13,-15,4,-14,-16,4,4,-19,-20,]),'INT_TYPE':([4,13,21,46,],[7,7,7,7,]),'VECTOR_TYPE':([4,13,21,46,],[8,8,8,8,]),'STR_TYPE':([4,13,21,46,],[9,9,9,9,]),'NULL_TYPE':([4,13,21,46,],[10,10,10,10,]),'IDENTIFIER':([6,7,8,9,10,14,22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,85,86,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,154,155,156,157,],[12,-34,-35,-36,-37,12,-3,12,12,-4,12,12,12,12,-23,12,12,12,12,-5,-11,-10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-12,12,12,12,12,12,12,-6,-22,-21,12,12,12,12,12,12,12,12,12,-69,-69,-17,-18,-13,-15,12,-14,12,12,-16,12,12,-19,-20,]),'LPAREN':([11,12,34,35,36,37,],[13,-66,73,74,75,76,]),'COMMA':([12,18,37,44,45,47,48,81,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,119,120,128,129,135,136,],[-66,21,-61,-64,-65,-68,-67,116,-59,-60,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-40,-41,-38,-39,-62,-63,-42,-43,]),'RPAREN':([12,13,15,16,17,18,21,26,37,44,45,47,48,76,80,81,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,116,119,120,128,129,130,135,136,152,153,],[-66,-69,19,20,-28,-29,-69,-30,-61,-64,-65,-68,-67,-69,-31,-32,-59,-60,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,123,124,125,126,128,129,-40,-41,-69,-38,-39,-62,-63,-33,-42,-43,154,155,]),'SEMICOLON':([12,31,32,33,37,44,45,47,48,49,77,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,117,118,119,120,128,129,131,132,134,135,136,138,144,],[-66,54,55,72,-61,-64,-65,-68,-67,87,113,-59,-60,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-40,-41,-69,-69,-38,-39,-62,-63,-24,-26,-25,-42,-43,54,-27,]),'LBRACKET':([12,22,23,24,25,27,30,31,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,133,135,136,137,139,140,141,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,],[-66,-3,40,40,-4,40,40,40,56,-61,40,-23,40,40,40,40,-64,-65,-68,-67,56,-5,-11,-10,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-12,40,40,40,56,56,56,56,56,-6,-22,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-21,-40,-41,40,-38,-39,40,40,40,40,40,40,40,-62,-63,40,56,56,-69,-69,-17,-18,56,56,-13,-15,40,-14,40,40,-16,56,56,40,40,-19,-20,]),'QUESTIONMARK':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,57,-61,-64,-65,-68,-67,57,57,57,-59,-60,57,57,57,-44,-45,-46,-47,-48,-49,57,57,57,57,57,57,57,57,57,57,-40,-41,-38,-39,-62,-63,-42,57,57,57,57,57,]),'ASSIGN':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,110,114,115,117,118,119,120,128,129,135,136,142,144,152,153,],[-66,58,-61,-64,-65,-68,-67,58,58,58,-59,-60,58,58,58,-44,-45,-46,-47,-48,-49,58,58,58,58,58,58,58,58,58,58,127,-40,-41,133,133,-38,-39,-62,-63,-42,58,58,58,58,58,]),'PLUS':([12,22,23,24,25,27,30,31,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,133,135,136,137,139,140,141,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,],[-66,-3,41,41,-4,41,41,41,59,-61,41,-23,41,41,41,41,-64,-65,-68,-67,59,-5,-11,-10,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-12,41,41,41,59,59,-59,-60,59,-6,-22,59,59,59,-45,-46,-47,-48,-49,59,59,59,59,59,59,59,59,59,59,-21,-40,-41,41,-38,-39,41,41,41,41,41,41,41,-62,-63,41,59,59,-69,-69,-17,-18,59,59,-13,-15,41,-14,41,41,-16,59,59,41,41,-19,-20,]),'MINUS':([12,22,23,24,25,27,30,31,32,37,38,39,40,41,42,43,44,45,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,81,82,83,84,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,133,135,136,137,139,140,141,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,],[-66,-3,42,42,-4,42,42,42,60,-61,42,-23,42,42,42,42,-64,-65,-68,-67,60,-5,-11,-10,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-12,42,42,42,60,60,-59,-60,60,-6,-22,60,60,60,-45,-46,-47,-48,-49,60,60,60,60,60,60,60,60,60,60,-21,-40,-41,42,-38,-39,42,42,42,42,42,42,42,-62,-63,42,60,60,-69,-69,-17,-18,60,60,-13,-15,42,-14,42,42,-16,60,60,42,42,-19,-20,]),'TIMES':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,61,-61,-64,-65,-68,-67,61,61,61,61,61,61,61,61,61,61,61,-47,-48,-49,61,61,61,61,61,61,61,61,61,61,-40,-41,-38,-39,-62,-63,61,61,61,61,61,61,]),'DIVIDE':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,62,-61,-64,-65,-68,-67,62,62,62,62,62,62,62,62,62,62,62,-47,-48,-49,62,62,62,62,62,62,62,62,62,62,-40,-41,-38,-39,-62,-63,62,62,62,62,62,62,]),'MOD':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,63,-61,-64,-65,-68,-67,63,63,63,63,63,63,63,63,63,63,63,-47,-48,-49,63,63,63,63,63,63,63,63,63,63,-40,-41,-38,-39,-62,-63,63,63,63,63,63,63,]),'GT':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,64,-61,-64,-65,-68,-67,64,64,64,-59,-60,-58,64,64,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,64,64,64,64,-40,-41,-38,-39,-62,-63,-42,64,64,64,64,64,]),'LT':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,65,-61,-64,-65,-68,-67,65,65,65,-59,-60,-58,65,65,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,65,65,65,65,-40,-41,-38,-39,-62,-63,-42,65,65,65,65,65,]),'EQUAL':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,66,-61,-64,-65,-68,-67,66,66,66,-59,-60,-58,66,66,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,66,66,66,66,-40,-41,-38,-39,-62,-63,-42,66,66,66,66,66,]),'GTE':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,67,-61,-64,-65,-68,-67,67,67,67,-59,-60,-58,67,67,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,67,67,67,67,-40,-41,-38,-39,-62,-63,-42,67,67,67,67,67,]),'LTE':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,68,-61,-64,-65,-68,-67,68,68,68,-59,-60,-58,68,68,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,68,68,68,68,-40,-41,-38,-39,-62,-63,-42,68,68,68,68,68,]),'NOT_EQUAL':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,69,-61,-64,-65,-68,-67,69,69,69,-59,-60,-58,69,69,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,69,69,69,69,-40,-41,-38,-39,-62,-63,-42,69,69,69,69,69,]),'OR':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,70,-61,-64,-65,-68,-67,70,70,70,-59,-60,-58,70,70,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,70,70,-40,-41,-38,-39,-62,-63,-42,70,70,70,70,70,]),'AND':([12,32,37,44,45,47,48,49,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,114,115,119,120,128,129,135,136,142,144,152,153,],[-66,71,-61,-64,-65,-68,-67,71,71,71,-59,-60,-58,71,71,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,71,71,-40,-41,-38,-39,-62,-63,-42,71,71,71,71,71,]),'RBRACKET':([12,37,40,44,45,47,48,78,79,80,81,82,83,84,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,116,119,120,128,129,130,135,136,],[-66,-61,-69,-64,-65,-68,-67,114,115,-31,-32,-59,-60,-58,119,120,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-40,-41,-69,-38,-39,-62,-63,-33,-42,-43,]),'COLON':([12,37,44,45,47,48,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,119,120,128,129,135,136,],[-66,-61,-64,-65,-68,-67,-59,-60,-58,121,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-40,-41,-38,-39,-62,-63,-42,-43,]),'error':([12,13,22,23,25,27,30,31,37,39,40,44,45,46,47,48,51,54,55,56,72,73,74,76,82,83,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,113,114,115,119,120,123,124,125,126,127,128,129,135,136,137,139,140,141,145,146,147,148,151,154,155,156,157,],[-66,16,-3,31,-4,31,31,31,-61,-23,79,-64,-65,86,-68,-67,-5,-11,-10,90,-12,107,109,112,-59,-60,-58,-6,-22,122,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-21,-40,-41,-38,-39,138,138,138,138,143,-62,-63,-42,-43,-69,-69,-17,-18,-13,-15,138,-14,-16,138,138,-19,-20,]),'TO':([12,37,44,45,47,48,82,83,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,115,119,120,128,129,135,136,142,143,],[-66,-61,-64,-65,-68,-67,-59,-60,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-40,-41,-38,-39,-62,-63,-42,-43,149,150,]),'LBRACE':([19,20,22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,154,155,156,157,],[23,23,-3,27,-4,27,27,27,-23,-5,-11,-10,-12,-6,-22,-21,27,27,27,27,-69,-69,-17,-18,-13,-15,27,-14,-16,27,27,-19,-20,]),'RETURN':([19,20,22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,154,155,156,157,],[24,24,-3,38,-4,38,38,38,-23,-5,-11,-10,-12,-6,-22,-21,38,38,38,38,-69,-69,-17,-18,-13,-15,38,-14,-16,38,38,-19,-20,]),'IF':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,154,155,156,157,],[-3,34,-4,34,34,34,-23,-5,-11,-10,-12,-6,-22,-21,34,34,34,34,-69,-69,-17,-18,-13,-15,34,-14,-16,34,34,-19,-20,]),'WHILE':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,154,155,156,157,],[-3,35,-4,35,35,35,-23,-5,-11,-10,-12,-6,-22,-21,35,35,35,35,-69,-69,-17,-18,-13,-15,35,-14,-16,35,35,-19,-20,]),'FOR':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,154,155,156,157,],[-3,36,-4,36,36,36,-23,-5,-11,-10,-12,-6,-22,-21,36,36,36,36,-69,-69,-17,-18,-13,-15,36,-14,-16,36,36,-19,-20,]),'NOT':([22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,154,155,156,157,],[-3,43,43,-4,43,43,43,43,-23,43,43,43,43,-5,-11,-10,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-12,43,43,43,-6,-22,-21,43,43,43,43,43,43,43,43,43,-69,-69,-17,-18,-13,-15,43,-14,43,43,-16,43,43,-19,-20,]),'VAR':([22,23,25,27,30,31,39,51,54,55,72,87,88,113,123,124,125,126,137,139,140,141,145,146,147,148,151,154,155,156,157,],[-3,46,-4,46,46,46,-23,-5,-11,-10,-12,-6,-22,-21,46,46,46,46,-69,-69,-17,-18,-13,-15,46,-14,-16,46,46,-19,-20,]),'NUMBER':([22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,154,155,156,157,],[-3,47,47,-4,47,47,47,47,-23,47,47,47,47,-5,-11,-10,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-12,47,47,47,-6,-22,-21,47,47,47,47,47,47,47,47,47,-69,-69,-17,-18,-13,-15,47,-14,47,47,-16,47,47,-19,-20,]),'STRING':([22,23,24,25,27,30,31,38,39,40,41,42,43,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,87,88,113,116,121,122,123,124,125,126,127,133,137,139,140,141,145,146,147,148,149,150,151,154,155,156,157,],[-3,48,48,-4,48,48,48,48,-23,48,48,48,48,-5,-11,-10,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-12,48,48,48,-6,-22,-21,48,48,48,48,48,48,48,48,48,-69,-69,-17,-18,-13,-15,48,-14,48,48,-16,48,48,-19,-20,]),'RBRACE':([22,23,25,27,28,29,30,31,39,50,51,52,53,54,55,72,87,88,113,137,139,140,141,145,146,148,151,156,157,],[-3,-69,-4,-69,51,-7,-69,-69,-23,88,-5,-8,-9,-11,-10,-12,-6,-22,-21,-69,-69,-17,-18,-13,-15,-14,-16,-19,-20,]),'ELSE':([22,25,39,51,54,55,72,87,88,113,137,139,140,141,145,146,148,151,156,157,],[-3,-4,-23,-5,-11,-10,-12,-6,-22,-21,147,147,-17,-18,-13,-15,-14,-16,-19,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,13,21,23,27,30,31,40,76,116,117,118,137,139,],[2,2,17,17,29,29,29,29,80,80,80,132,132,146,146,]),'func':([0,3,23,27,30,31,123,124,125,126,147,154,155,],[3,3,39,39,39,39,39,39,39,39,39,39,39,]),'type':([4,13,21,46,],[6,14,14,85,]),'iden':([6,14,23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,85,86,116,121,122,123,124,125,126,127,133,147,149,150,154,155,],[11,18,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,110,37,117,118,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'flist':([13,21,],[15,26,]),'func_choice':([19,20,],[22,25,]),'body':([23,27,30,31,],[28,50,52,53,]),'stmt':([23,27,30,31,123,124,125,126,147,154,155,],[30,30,30,30,137,139,140,141,151,156,157,]),'expr':([23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,116,121,122,123,124,125,126,127,133,147,149,150,154,155,],[32,49,32,32,32,77,81,82,83,84,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,81,81,135,136,32,32,32,32,142,144,32,152,153,32,32,]),'defvar':([23,27,30,31,123,124,125,126,147,154,155,],[33,33,33,33,33,33,33,33,33,33,33,]),'num':([23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,116,121,122,123,124,125,126,127,133,147,149,150,154,155,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'str':([23,24,27,30,31,38,40,41,42,43,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,116,121,122,123,124,125,126,127,133,147,149,150,154,155,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'clist':([40,76,116,],[78,111,130,]),'defvar_choice':([117,118,],[131,134,]),'else_choice':([137,139,],[145,148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog1','grammer.py',15),
  ('prog -> func prog','prog',2,'p_prog2','grammer.py',18),
  ('func -> DEF type iden LPAREN flist RPAREN func_choice','func',7,'p_func','grammer.py',21),
  ('func -> DEF type iden LPAREN error RPAREN func_choice','func',7,'p_func_error','grammer.py',24),
  ('func_choice -> LBRACE body RBRACE','func_choice',3,'p_func_choice1','grammer.py',30),
  ('func_choice -> RETURN expr SEMICOLON','func_choice',3,'p_func_choice2','grammer.py',33),
  ('body -> empty','body',1,'p_body1','grammer.py',36),
  ('body -> stmt body','body',2,'p_body2','grammer.py',39),
  ('body -> error body','body',2,'p_body2_error','grammer.py',44),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt1','grammer.py',50),
  ('stmt -> error SEMICOLON','stmt',2,'p_stmt1_error','grammer.py',53),
  ('stmt -> defvar SEMICOLON','stmt',2,'p_stmt2','grammer.py',59),
  ('stmt -> IF LPAREN expr RPAREN stmt else_choice','stmt',6,'p_stmt3','grammer.py',62),
  ('stmt -> IF LPAREN error RPAREN stmt else_choice','stmt',6,'p_stmt3_error','grammer.py',65),
  ('else_choice -> empty','else_choice',1,'p_else_choice1','grammer.py',70),
  ('else_choice -> ELSE stmt','else_choice',2,'p_else_choice2','grammer.py',73),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt4','grammer.py',76),
  ('stmt -> WHILE LPAREN error RPAREN stmt','stmt',5,'p_stmt4_error','grammer.py',79),
  ('stmt -> FOR LPAREN iden ASSIGN expr TO expr RPAREN stmt','stmt',9,'p_stmt5','grammer.py',84),
  ('stmt -> FOR LPAREN iden ASSIGN error TO expr RPAREN stmt','stmt',9,'p_stmt5_error','grammer.py',87),
  ('stmt -> RETURN expr SEMICOLON','stmt',3,'p_stmt6','grammer.py',92),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt7','grammer.py',95),
  ('stmt -> func','stmt',1,'p_stmt8','grammer.py',98),
  ('defvar -> VAR type iden defvar_choice','defvar',4,'p_defvar','grammer.py',101),
  ('defvar -> VAR error iden defvar_choice','defvar',4,'p_defvar_error','grammer.py',104),
  ('defvar_choice -> empty','defvar_choice',1,'p_defvar_choice1','grammer.py',110),
  ('defvar_choice -> ASSIGN expr','defvar_choice',2,'p_defvar_choice2','grammer.py',113),
  ('flist -> empty','flist',1,'p_flist1','grammer.py',116),
  ('flist -> type iden','flist',2,'p_flist2','grammer.py',119),
  ('flist -> type iden COMMA flist','flist',4,'p_flist3','grammer.py',122),
  ('clist -> empty','clist',1,'p_clist1','grammer.py',125),
  ('clist -> expr','clist',1,'p_clist2','grammer.py',128),
  ('clist -> expr COMMA clist','clist',3,'p_clist3','grammer.py',131),
  ('type -> INT_TYPE','type',1,'p_type','grammer.py',134),
  ('type -> VECTOR_TYPE','type',1,'p_type','grammer.py',135),
  ('type -> STR_TYPE','type',1,'p_type','grammer.py',136),
  ('type -> NULL_TYPE','type',1,'p_type','grammer.py',137),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_expr1','grammer.py',140),
  ('expr -> expr LBRACKET error RBRACKET','expr',4,'p_expr1_error','grammer.py',143),
  ('expr -> LBRACKET clist RBRACKET','expr',3,'p_expr2','grammer.py',148),
  ('expr -> LBRACKET error RBRACKET','expr',3,'p_expr2_error','grammer.py',151),
  ('expr -> expr QUESTIONMARK expr COLON expr','expr',5,'p_expr3','grammer.py',156),
  ('expr -> expr QUESTIONMARK expr error expr','expr',5,'p_expr3_error','grammer.py',160),
  ('expr -> expr ASSIGN expr','expr',3,'p_expr4','grammer.py',165),
  ('expr -> expr PLUS expr','expr',3,'p_expr4','grammer.py',166),
  ('expr -> expr MINUS expr','expr',3,'p_expr4','grammer.py',167),
  ('expr -> expr TIMES expr','expr',3,'p_expr4','grammer.py',168),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr4','grammer.py',169),
  ('expr -> expr MOD expr','expr',3,'p_expr4','grammer.py',170),
  ('expr -> expr GT expr','expr',3,'p_expr4','grammer.py',171),
  ('expr -> expr LT expr','expr',3,'p_expr4','grammer.py',172),
  ('expr -> expr EQUAL expr','expr',3,'p_expr4','grammer.py',173),
  ('expr -> expr GTE expr','expr',3,'p_expr4','grammer.py',174),
  ('expr -> expr LTE expr','expr',3,'p_expr4','grammer.py',175),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr4','grammer.py',176),
  ('expr -> expr OR expr','expr',3,'p_expr4','grammer.py',177),
  ('expr -> expr AND expr','expr',3,'p_expr4','grammer.py',178),
  ('expr -> NOT expr','expr',2,'p_expr5','grammer.py',186),
  ('expr -> PLUS expr','expr',2,'p_expr5','grammer.py',187),
  ('expr -> MINUS expr','expr',2,'p_expr5','grammer.py',188),
  ('expr -> iden','expr',1,'p_expr6','grammer.py',191),
  ('expr -> iden LPAREN clist RPAREN','expr',4,'p_expr7','grammer.py',194),
  ('expr -> iden LPAREN error RPAREN','expr',4,'p_expr7_error','grammer.py',197),
  ('expr -> num','expr',1,'p_expr8','grammer.py',202),
  ('expr -> str','expr',1,'p_expr9','grammer.py',205),
  ('iden -> IDENTIFIER','iden',1,'p_iden','grammer.py',208),
  ('str -> STRING','str',1,'p_str','grammer.py',211),
  ('num -> NUMBER','num',1,'p_num','grammer.py',214),
  ('empty -> <empty>','empty',0,'p_empty','grammer.py',217),
]
